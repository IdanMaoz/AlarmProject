
Alarm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b794  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a28  0800b924  0800b924  0001b924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c34c  0800c34c  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  0800c34c  0800c34c  0001c34c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c354  0800c354  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c354  0800c354  0001c354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c358  0800c358  0001c358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800c35c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003828  20000098  0800c3f4  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200038c0  0800c3f4  000238c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024716  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000525b  00000000  00000000  000447de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001dc0  00000000  00000000  00049a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001bc0  00000000  00000000  0004b800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c298  00000000  00000000  0004d3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024573  00000000  00000000  00079658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010205a  00000000  00000000  0009dbcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019fc25  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000089e4  00000000  00000000  0019fc78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b90c 	.word	0x0800b90c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	0800b90c 	.word	0x0800b90c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <Alarm_add>:
 * @param char* name - the name of the alarm
 * @param DateTime dateTime - the time of the alarm
 * @retval 0 if the alarm doesn't exists, 1 if he exists.
 */
int Alarm_add(char * name,DateTime dateTime)
{
 80005a4:	b084      	sub	sp, #16
 80005a6:	b5b0      	push	{r4, r5, r7, lr}
 80005a8:	b098      	sub	sp, #96	; 0x60
 80005aa:	af00      	add	r7, sp, #0
 80005ac:	6078      	str	r0, [r7, #4]
 80005ae:	f107 0074 	add.w	r0, r7, #116	; 0x74
 80005b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	for(int i=0;i<alarmsLen;i++){
 80005b6:	2300      	movs	r3, #0
 80005b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80005ba:	e011      	b.n	80005e0 <Alarm_add+0x3c>
		if(!strcmp(name,alarms[i].name)){
 80005bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80005be:	224c      	movs	r2, #76	; 0x4c
 80005c0:	fb02 f303 	mul.w	r3, r2, r3
 80005c4:	4a2a      	ldr	r2, [pc, #168]	; (8000670 <Alarm_add+0xcc>)
 80005c6:	4413      	add	r3, r2
 80005c8:	4619      	mov	r1, r3
 80005ca:	6878      	ldr	r0, [r7, #4]
 80005cc:	f7ff fe00 	bl	80001d0 <strcmp>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d101      	bne.n	80005da <Alarm_add+0x36>
			return 0;
 80005d6:	2300      	movs	r3, #0
 80005d8:	e043      	b.n	8000662 <Alarm_add+0xbe>
	for(int i=0;i<alarmsLen;i++){
 80005da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80005dc:	3301      	adds	r3, #1
 80005de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80005e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80005e2:	4b24      	ldr	r3, [pc, #144]	; (8000674 <Alarm_add+0xd0>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	429a      	cmp	r2, r3
 80005e8:	d3e8      	bcc.n	80005bc <Alarm_add+0x18>
		}
	}
	Alarm alarm;
	strncpy(alarm.name,name,maxNameSize);
 80005ea:	f107 030c 	add.w	r3, r7, #12
 80005ee:	2214      	movs	r2, #20
 80005f0:	6879      	ldr	r1, [r7, #4]
 80005f2:	4618      	mov	r0, r3
 80005f4:	f009 fc95 	bl	8009f22 <strncpy>
	alarm.countSnooze = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	657b      	str	r3, [r7, #84]	; 0x54
	strncpy(alarm.melodyName,"melody0",maxNameSize);
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	3334      	adds	r3, #52	; 0x34
 8000602:	2214      	movs	r2, #20
 8000604:	491c      	ldr	r1, [pc, #112]	; (8000678 <Alarm_add+0xd4>)
 8000606:	4618      	mov	r0, r3
 8000608:	f009 fc8b 	bl	8009f22 <strncpy>
	alarm.dateTime = dateTime;
 800060c:	f107 0420 	add.w	r4, r7, #32
 8000610:	f107 0574 	add.w	r5, r7, #116	; 0x74
 8000614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000618:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800061c:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	alarms[alarmsLen] = alarm;
 8000620:	4b14      	ldr	r3, [pc, #80]	; (8000674 <Alarm_add+0xd0>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a12      	ldr	r2, [pc, #72]	; (8000670 <Alarm_add+0xcc>)
 8000626:	214c      	movs	r1, #76	; 0x4c
 8000628:	fb01 f303 	mul.w	r3, r1, r3
 800062c:	4413      	add	r3, r2
 800062e:	4618      	mov	r0, r3
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	224c      	movs	r2, #76	; 0x4c
 8000636:	4619      	mov	r1, r3
 8000638:	f009 fb56 	bl	8009ce8 <memcpy>
	alarmsLen++;
 800063c:	4b0d      	ldr	r3, [pc, #52]	; (8000674 <Alarm_add+0xd0>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	3301      	adds	r3, #1
 8000642:	4a0c      	ldr	r2, [pc, #48]	; (8000674 <Alarm_add+0xd0>)
 8000644:	6013      	str	r3, [r2, #0]

	uint64_t* byteAlarms = (uint64_t*)(alarms);
 8000646:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <Alarm_add+0xcc>)
 8000648:	65bb      	str	r3, [r7, #88]	; 0x58
	HAL_FLASH_Unlock();
 800064a:	f002 f8a7 	bl	800279c <HAL_FLASH_Unlock>
	Flash_erase();
 800064e:	f000 ff63 	bl	8001518 <Flash_erase>
	Flash_program(byteAlarms, sizeof(alarms));
 8000652:	f44f 713e 	mov.w	r1, #760	; 0x2f8
 8000656:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8000658:	f000 ff78 	bl	800154c <Flash_program>
	HAL_FLASH_Lock();
 800065c:	f002 f8c0 	bl	80027e0 <HAL_FLASH_Lock>
	return 1;
 8000660:	2301      	movs	r3, #1
}
 8000662:	4618      	mov	r0, r3
 8000664:	3760      	adds	r7, #96	; 0x60
 8000666:	46bd      	mov	sp, r7
 8000668:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800066c:	b004      	add	sp, #16
 800066e:	4770      	bx	lr
 8000670:	200000b4 	.word	0x200000b4
 8000674:	200003ac 	.word	0x200003ac
 8000678:	0800b924 	.word	0x0800b924

0800067c <Alarm_delete>:
 *
 * @param char* name - the name of the alarm
 * @retval 0 if the alarm doesn't exists, 1 if he exists and deleted.
 */
int Alarm_delete(char * name)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
	for(int i=0;i<alarmsLen;i++){
 8000684:	2300      	movs	r3, #0
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	e041      	b.n	800070e <Alarm_delete+0x92>
		if(!strcmp(name,alarms[i].name)){
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	224c      	movs	r2, #76	; 0x4c
 800068e:	fb02 f303 	mul.w	r3, r2, r3
 8000692:	4a24      	ldr	r2, [pc, #144]	; (8000724 <Alarm_delete+0xa8>)
 8000694:	4413      	add	r3, r2
 8000696:	4619      	mov	r1, r3
 8000698:	6878      	ldr	r0, [r7, #4]
 800069a:	f7ff fd99 	bl	80001d0 <strcmp>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d131      	bne.n	8000708 <Alarm_delete+0x8c>
			alarms[i]=alarms[alarmsLen-1];
 80006a4:	4b20      	ldr	r3, [pc, #128]	; (8000728 <Alarm_delete+0xac>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	3b01      	subs	r3, #1
 80006aa:	491e      	ldr	r1, [pc, #120]	; (8000724 <Alarm_delete+0xa8>)
 80006ac:	68fa      	ldr	r2, [r7, #12]
 80006ae:	204c      	movs	r0, #76	; 0x4c
 80006b0:	fb00 f202 	mul.w	r2, r0, r2
 80006b4:	1888      	adds	r0, r1, r2
 80006b6:	4a1b      	ldr	r2, [pc, #108]	; (8000724 <Alarm_delete+0xa8>)
 80006b8:	214c      	movs	r1, #76	; 0x4c
 80006ba:	fb01 f303 	mul.w	r3, r1, r3
 80006be:	4413      	add	r3, r2
 80006c0:	4619      	mov	r1, r3
 80006c2:	234c      	movs	r3, #76	; 0x4c
 80006c4:	461a      	mov	r2, r3
 80006c6:	f009 fb0f 	bl	8009ce8 <memcpy>
			alarms[alarmsLen-1].isActive = 0;
 80006ca:	4b17      	ldr	r3, [pc, #92]	; (8000728 <Alarm_delete+0xac>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	3b01      	subs	r3, #1
 80006d0:	4a14      	ldr	r2, [pc, #80]	; (8000724 <Alarm_delete+0xa8>)
 80006d2:	214c      	movs	r1, #76	; 0x4c
 80006d4:	fb01 f303 	mul.w	r3, r1, r3
 80006d8:	4413      	add	r3, r2
 80006da:	3330      	adds	r3, #48	; 0x30
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
			alarmsLen--;
 80006e0:	4b11      	ldr	r3, [pc, #68]	; (8000728 <Alarm_delete+0xac>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	3b01      	subs	r3, #1
 80006e6:	4a10      	ldr	r2, [pc, #64]	; (8000728 <Alarm_delete+0xac>)
 80006e8:	6013      	str	r3, [r2, #0]

			uint64_t* byteAlarms = (uint64_t*)(alarms);
 80006ea:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <Alarm_delete+0xa8>)
 80006ec:	60bb      	str	r3, [r7, #8]
			HAL_FLASH_Unlock();
 80006ee:	f002 f855 	bl	800279c <HAL_FLASH_Unlock>
			Flash_erase();
 80006f2:	f000 ff11 	bl	8001518 <Flash_erase>
			Flash_program(byteAlarms, sizeof(alarms));
 80006f6:	f44f 713e 	mov.w	r1, #760	; 0x2f8
 80006fa:	68b8      	ldr	r0, [r7, #8]
 80006fc:	f000 ff26 	bl	800154c <Flash_program>
			HAL_FLASH_Lock();
 8000700:	f002 f86e 	bl	80027e0 <HAL_FLASH_Lock>
			return 1;
 8000704:	2301      	movs	r3, #1
 8000706:	e008      	b.n	800071a <Alarm_delete+0x9e>
	for(int i=0;i<alarmsLen;i++){
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	3301      	adds	r3, #1
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	68fa      	ldr	r2, [r7, #12]
 8000710:	4b05      	ldr	r3, [pc, #20]	; (8000728 <Alarm_delete+0xac>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	429a      	cmp	r2, r3
 8000716:	d3b8      	bcc.n	800068a <Alarm_delete+0xe>
		}
	}
	return 0;
 8000718:	2300      	movs	r3, #0

}
 800071a:	4618      	mov	r0, r3
 800071c:	3710      	adds	r7, #16
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	200000b4 	.word	0x200000b4
 8000728:	200003ac 	.word	0x200003ac

0800072c <Alarm_stop>:
 *
 * @param char* name - the name of the alarm
 * @retval none
 */
void Alarm_stop(char * name)//ask what they mean
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]

	Buzzer_changeToOff(&bz1);
 8000734:	4803      	ldr	r0, [pc, #12]	; (8000744 <Alarm_stop+0x18>)
 8000736:	f000 fa8f 	bl	8000c58 <Buzzer_changeToOff>

}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000664 	.word	0x20000664

08000748 <Alarm_changeMelody>:
 * @param char* name - the name of the alarm
 * @param char* melody - the melody of the alarm
 * @retval 0 if the alarm doesn't exists, 1 if he exists and the melody changed.
 */
int Alarm_changeMelody(char * name,char* melody)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
 8000750:	6039      	str	r1, [r7, #0]
	for(int i=0;i<alarmsLen;i++){
 8000752:	2300      	movs	r3, #0
 8000754:	60fb      	str	r3, [r7, #12]
 8000756:	e02a      	b.n	80007ae <Alarm_changeMelody+0x66>
		if(!strcmp(name,alarms[i].name)){
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	224c      	movs	r2, #76	; 0x4c
 800075c:	fb02 f303 	mul.w	r3, r2, r3
 8000760:	4a18      	ldr	r2, [pc, #96]	; (80007c4 <Alarm_changeMelody+0x7c>)
 8000762:	4413      	add	r3, r2
 8000764:	4619      	mov	r1, r3
 8000766:	6878      	ldr	r0, [r7, #4]
 8000768:	f7ff fd32 	bl	80001d0 <strcmp>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d11a      	bne.n	80007a8 <Alarm_changeMelody+0x60>
			strcpy(alarms[i].melodyName,melody);
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	224c      	movs	r2, #76	; 0x4c
 8000776:	fb02 f303 	mul.w	r3, r2, r3
 800077a:	3330      	adds	r3, #48	; 0x30
 800077c:	4a11      	ldr	r2, [pc, #68]	; (80007c4 <Alarm_changeMelody+0x7c>)
 800077e:	4413      	add	r3, r2
 8000780:	3304      	adds	r3, #4
 8000782:	6839      	ldr	r1, [r7, #0]
 8000784:	4618      	mov	r0, r3
 8000786:	f009 fbc4 	bl	8009f12 <strcpy>
			uint64_t* byteAlarms = (uint64_t*)(alarms);
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <Alarm_changeMelody+0x7c>)
 800078c:	60bb      	str	r3, [r7, #8]
			HAL_FLASH_Unlock();
 800078e:	f002 f805 	bl	800279c <HAL_FLASH_Unlock>
			Flash_erase();
 8000792:	f000 fec1 	bl	8001518 <Flash_erase>
			Flash_program(byteAlarms, sizeof(alarms));
 8000796:	f44f 713e 	mov.w	r1, #760	; 0x2f8
 800079a:	68b8      	ldr	r0, [r7, #8]
 800079c:	f000 fed6 	bl	800154c <Flash_program>
			HAL_FLASH_Lock();
 80007a0:	f002 f81e 	bl	80027e0 <HAL_FLASH_Lock>
			return 1;
 80007a4:	2301      	movs	r3, #1
 80007a6:	e008      	b.n	80007ba <Alarm_changeMelody+0x72>
	for(int i=0;i<alarmsLen;i++){
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	3301      	adds	r3, #1
 80007ac:	60fb      	str	r3, [r7, #12]
 80007ae:	68fa      	ldr	r2, [r7, #12]
 80007b0:	4b05      	ldr	r3, [pc, #20]	; (80007c8 <Alarm_changeMelody+0x80>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	429a      	cmp	r2, r3
 80007b6:	d3cf      	bcc.n	8000758 <Alarm_changeMelody+0x10>
		}
	}
	return 0;
 80007b8:	2300      	movs	r3, #0
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3710      	adds	r7, #16
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	200000b4 	.word	0x200000b4
 80007c8:	200003ac 	.word	0x200003ac

080007cc <Alarm_clearAll>:
 *
 * @param none
 * @retval none
 */
void Alarm_clearAll()
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
	for(int i=0;i<alarmsLen;i++){
 80007d2:	2300      	movs	r3, #0
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	e00b      	b.n	80007f0 <Alarm_clearAll+0x24>
		alarms[i].isActive = 0;
 80007d8:	4a12      	ldr	r2, [pc, #72]	; (8000824 <Alarm_clearAll+0x58>)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	214c      	movs	r1, #76	; 0x4c
 80007de:	fb01 f303 	mul.w	r3, r1, r3
 80007e2:	4413      	add	r3, r2
 80007e4:	3330      	adds	r3, #48	; 0x30
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
	for(int i=0;i<alarmsLen;i++){
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	3301      	adds	r3, #1
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687a      	ldr	r2, [r7, #4]
 80007f2:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <Alarm_clearAll+0x5c>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	429a      	cmp	r2, r3
 80007f8:	d3ee      	bcc.n	80007d8 <Alarm_clearAll+0xc>
	}
	alarmsLen = 0;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <Alarm_clearAll+0x5c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
	uint64_t* byteAlarms = (uint64_t*)(alarms);
 8000800:	4b08      	ldr	r3, [pc, #32]	; (8000824 <Alarm_clearAll+0x58>)
 8000802:	603b      	str	r3, [r7, #0]
	HAL_FLASH_Unlock();
 8000804:	f001 ffca 	bl	800279c <HAL_FLASH_Unlock>
	Flash_erase();
 8000808:	f000 fe86 	bl	8001518 <Flash_erase>
	Flash_program(byteAlarms, sizeof(alarms));
 800080c:	f44f 713e 	mov.w	r1, #760	; 0x2f8
 8000810:	6838      	ldr	r0, [r7, #0]
 8000812:	f000 fe9b 	bl	800154c <Flash_program>
	HAL_FLASH_Lock();
 8000816:	f001 ffe3 	bl	80027e0 <HAL_FLASH_Lock>
}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	200000b4 	.word	0x200000b4
 8000828:	200003ac 	.word	0x200003ac

0800082c <Alarm_edit>:
 * @param char* name - the name of the alarm
 * @param DateTime dateTime - the time of the alarm
 * @retval none
 */
void Alarm_edit(char * name,DateTime dateTime)
{
 800082c:	b084      	sub	sp, #16
 800082e:	b5b0      	push	{r4, r5, r7, lr}
 8000830:	b084      	sub	sp, #16
 8000832:	af00      	add	r7, sp, #0
 8000834:	6078      	str	r0, [r7, #4]
 8000836:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800083a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	for(int i=0;i<alarmsLen;i++){
 800083e:	2300      	movs	r3, #0
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	e01f      	b.n	8000884 <Alarm_edit+0x58>
		if(!strcmp(name,alarms[i].name)){
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	224c      	movs	r2, #76	; 0x4c
 8000848:	fb02 f303 	mul.w	r3, r2, r3
 800084c:	4a14      	ldr	r2, [pc, #80]	; (80008a0 <Alarm_edit+0x74>)
 800084e:	4413      	add	r3, r2
 8000850:	4619      	mov	r1, r3
 8000852:	6878      	ldr	r0, [r7, #4]
 8000854:	f7ff fcbc 	bl	80001d0 <strcmp>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d10f      	bne.n	800087e <Alarm_edit+0x52>
			alarms[i].dateTime=dateTime;
 800085e:	4a10      	ldr	r2, [pc, #64]	; (80008a0 <Alarm_edit+0x74>)
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	214c      	movs	r1, #76	; 0x4c
 8000864:	fb01 f303 	mul.w	r3, r1, r3
 8000868:	4413      	add	r3, r2
 800086a:	3310      	adds	r3, #16
 800086c:	1d1c      	adds	r4, r3, #4
 800086e:	f107 0524 	add.w	r5, r7, #36	; 0x24
 8000872:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000874:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000876:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800087a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	for(int i=0;i<alarmsLen;i++){
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	3301      	adds	r3, #1
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fa      	ldr	r2, [r7, #12]
 8000886:	4b07      	ldr	r3, [pc, #28]	; (80008a4 <Alarm_edit+0x78>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	429a      	cmp	r2, r3
 800088c:	d3da      	bcc.n	8000844 <Alarm_edit+0x18>
		}
	}
}
 800088e:	bf00      	nop
 8000890:	bf00      	nop
 8000892:	3710      	adds	r7, #16
 8000894:	46bd      	mov	sp, r7
 8000896:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800089a:	b004      	add	sp, #16
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	200000b4 	.word	0x200000b4
 80008a4:	200003ac 	.word	0x200003ac

080008a8 <addSnoozeTime>:
 * @param char* name - the name of the alarm
 * @param uint32_t count - the snooze count of alarm
 * @retval none
 */
void addSnoozeTime(char * name,uint32_t count)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	6039      	str	r1, [r7, #0]
	for(int i=0;i<alarmsLen;i++){
 80008b2:	2300      	movs	r3, #0
 80008b4:	60fb      	str	r3, [r7, #12]
 80008b6:	e018      	b.n	80008ea <addSnoozeTime+0x42>
			if(!strcmp(name,alarms[i].name)){
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	224c      	movs	r2, #76	; 0x4c
 80008bc:	fb02 f303 	mul.w	r3, r2, r3
 80008c0:	4a0f      	ldr	r2, [pc, #60]	; (8000900 <addSnoozeTime+0x58>)
 80008c2:	4413      	add	r3, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	6878      	ldr	r0, [r7, #4]
 80008c8:	f7ff fc82 	bl	80001d0 <strcmp>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d108      	bne.n	80008e4 <addSnoozeTime+0x3c>
				alarms[i].countSnooze = count;
 80008d2:	4a0b      	ldr	r2, [pc, #44]	; (8000900 <addSnoozeTime+0x58>)
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	214c      	movs	r1, #76	; 0x4c
 80008d8:	fb01 f303 	mul.w	r3, r1, r3
 80008dc:	4413      	add	r3, r2
 80008de:	3348      	adds	r3, #72	; 0x48
 80008e0:	683a      	ldr	r2, [r7, #0]
 80008e2:	601a      	str	r2, [r3, #0]
	for(int i=0;i<alarmsLen;i++){
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	3301      	adds	r3, #1
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	68fa      	ldr	r2, [r7, #12]
 80008ec:	4b05      	ldr	r3, [pc, #20]	; (8000904 <addSnoozeTime+0x5c>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	429a      	cmp	r2, r3
 80008f2:	d3e1      	bcc.n	80008b8 <addSnoozeTime+0x10>
			}
		}
}
 80008f4:	bf00      	nop
 80008f6:	bf00      	nop
 80008f8:	3710      	adds	r7, #16
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	200000b4 	.word	0x200000b4
 8000904:	200003ac 	.word	0x200003ac

08000908 <Alarm_startTask>:
 *
 * @param void* argument - a potential argument
 * @retval none
 */
void Alarm_startTask(void* argument)
{
 8000908:	b590      	push	{r4, r7, lr}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
	Rtc* rtc = (Rtc*)argument;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	60bb      	str	r3, [r7, #8]
	for(;;){
		if(alarmsLen!=0){
 8000914:	4b46      	ldr	r3, [pc, #280]	; (8000a30 <Alarm_startTask+0x128>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2b00      	cmp	r3, #0
 800091a:	f000 8084 	beq.w	8000a26 <Alarm_startTask+0x11e>
			for(int i=0;i<alarmsLen;i++){
 800091e:	2300      	movs	r3, #0
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	e07a      	b.n	8000a1a <Alarm_startTask+0x112>
				if(Rtc_convertToSec(&alarms[i].dateTime) + 10*alarms[i].countSnooze  == Rtc_getSeconds(rtc)){
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	224c      	movs	r2, #76	; 0x4c
 8000928:	fb02 f303 	mul.w	r3, r2, r3
 800092c:	3310      	adds	r3, #16
 800092e:	4a41      	ldr	r2, [pc, #260]	; (8000a34 <Alarm_startTask+0x12c>)
 8000930:	4413      	add	r3, r2
 8000932:	3304      	adds	r3, #4
 8000934:	4618      	mov	r0, r3
 8000936:	f001 f80f 	bl	8001958 <Rtc_convertToSec>
 800093a:	4601      	mov	r1, r0
 800093c:	4a3d      	ldr	r2, [pc, #244]	; (8000a34 <Alarm_startTask+0x12c>)
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	204c      	movs	r0, #76	; 0x4c
 8000942:	fb00 f303 	mul.w	r3, r0, r3
 8000946:	4413      	add	r3, r2
 8000948:	3348      	adds	r3, #72	; 0x48
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	4613      	mov	r3, r2
 800094e:	009b      	lsls	r3, r3, #2
 8000950:	4413      	add	r3, r2
 8000952:	005b      	lsls	r3, r3, #1
 8000954:	18cc      	adds	r4, r1, r3
 8000956:	68b8      	ldr	r0, [r7, #8]
 8000958:	f000 ffb0 	bl	80018bc <Rtc_getSeconds>
 800095c:	4603      	mov	r3, r0
 800095e:	429c      	cmp	r4, r3
 8000960:	d11e      	bne.n	80009a0 <Alarm_startTask+0x98>
					Buzzer_changeToOn(&bz1);
 8000962:	4835      	ldr	r0, [pc, #212]	; (8000a38 <Alarm_startTask+0x130>)
 8000964:	f000 f966 	bl	8000c34 <Buzzer_changeToOn>
					Buzzer_changeMelody(&bz1, alarms[i].melodyName);
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	224c      	movs	r2, #76	; 0x4c
 800096c:	fb02 f303 	mul.w	r3, r2, r3
 8000970:	3330      	adds	r3, #48	; 0x30
 8000972:	4a30      	ldr	r2, [pc, #192]	; (8000a34 <Alarm_startTask+0x12c>)
 8000974:	4413      	add	r3, r2
 8000976:	3304      	adds	r3, #4
 8000978:	4619      	mov	r1, r3
 800097a:	482f      	ldr	r0, [pc, #188]	; (8000a38 <Alarm_startTask+0x130>)
 800097c:	f000 f98a 	bl	8000c94 <Buzzer_changeMelody>
					Led_changeToBlink(&ledR);
 8000980:	482e      	ldr	r0, [pc, #184]	; (8000a3c <Alarm_startTask+0x134>)
 8000982:	f000 fe30 	bl	80015e6 <Led_changeToBlink>
					Led_changeToBlink(&ledB);
 8000986:	482e      	ldr	r0, [pc, #184]	; (8000a40 <Alarm_startTask+0x138>)
 8000988:	f000 fe2d 	bl	80015e6 <Led_changeToBlink>
					printf("Alarm %s turned on\r\n",alarms[i].name);
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	224c      	movs	r2, #76	; 0x4c
 8000990:	fb02 f303 	mul.w	r3, r2, r3
 8000994:	4a27      	ldr	r2, [pc, #156]	; (8000a34 <Alarm_startTask+0x12c>)
 8000996:	4413      	add	r3, r2
 8000998:	4619      	mov	r1, r3
 800099a:	482a      	ldr	r0, [pc, #168]	; (8000a44 <Alarm_startTask+0x13c>)
 800099c:	f009 f9ba 	bl	8009d14 <iprintf>
				}
				if(Buzzer_getState(&bz1) == BUZZER_STATE_OFF){
 80009a0:	4825      	ldr	r0, [pc, #148]	; (8000a38 <Alarm_startTask+0x130>)
 80009a2:	f000 f96b 	bl	8000c7c <Buzzer_getState>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d105      	bne.n	80009b8 <Alarm_startTask+0xb0>
					Led_changeToOff(&ledB);
 80009ac:	4824      	ldr	r0, [pc, #144]	; (8000a40 <Alarm_startTask+0x138>)
 80009ae:	f000 fe27 	bl	8001600 <Led_changeToOff>
					Led_changeToOff(&ledR);
 80009b2:	4822      	ldr	r0, [pc, #136]	; (8000a3c <Alarm_startTask+0x134>)
 80009b4:	f000 fe24 	bl	8001600 <Led_changeToOff>
				}
				if(Button_getState(&btn2) == BUTTON_STATE_PRESS && Buzzer_getState(&bz1) == BUZZER_STATE_ON){
 80009b8:	4823      	ldr	r0, [pc, #140]	; (8000a48 <Alarm_startTask+0x140>)
 80009ba:	f000 f909 	bl	8000bd0 <Button_getState>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d108      	bne.n	80009d6 <Alarm_startTask+0xce>
 80009c4:	481c      	ldr	r0, [pc, #112]	; (8000a38 <Alarm_startTask+0x130>)
 80009c6:	f000 f959 	bl	8000c7c <Buzzer_getState>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d102      	bne.n	80009d6 <Alarm_startTask+0xce>
					Buzzer_changeToOff(&bz1);
 80009d0:	4819      	ldr	r0, [pc, #100]	; (8000a38 <Alarm_startTask+0x130>)
 80009d2:	f000 f941 	bl	8000c58 <Buzzer_changeToOff>

				}
				if(Button_getState(&btn1) == BUTTON_STATE_PRESS && Buzzer_getState(&bz1) == BUZZER_STATE_ON){
 80009d6:	481d      	ldr	r0, [pc, #116]	; (8000a4c <Alarm_startTask+0x144>)
 80009d8:	f000 f8fa 	bl	8000bd0 <Button_getState>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d118      	bne.n	8000a14 <Alarm_startTask+0x10c>
 80009e2:	4815      	ldr	r0, [pc, #84]	; (8000a38 <Alarm_startTask+0x130>)
 80009e4:	f000 f94a 	bl	8000c7c <Buzzer_getState>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d112      	bne.n	8000a14 <Alarm_startTask+0x10c>
					addSnoozeTime(alarms[i].name, alarms[i].countSnooze+1);
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	224c      	movs	r2, #76	; 0x4c
 80009f2:	fb02 f303 	mul.w	r3, r2, r3
 80009f6:	4a0f      	ldr	r2, [pc, #60]	; (8000a34 <Alarm_startTask+0x12c>)
 80009f8:	441a      	add	r2, r3
 80009fa:	490e      	ldr	r1, [pc, #56]	; (8000a34 <Alarm_startTask+0x12c>)
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	204c      	movs	r0, #76	; 0x4c
 8000a00:	fb00 f303 	mul.w	r3, r0, r3
 8000a04:	440b      	add	r3, r1
 8000a06:	3348      	adds	r3, #72	; 0x48
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4610      	mov	r0, r2
 8000a10:	f7ff ff4a 	bl	80008a8 <addSnoozeTime>
			for(int i=0;i<alarmsLen;i++){
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	3301      	adds	r3, #1
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	68fa      	ldr	r2, [r7, #12]
 8000a1c:	4b04      	ldr	r3, [pc, #16]	; (8000a30 <Alarm_startTask+0x128>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	f4ff af7f 	bcc.w	8000924 <Alarm_startTask+0x1c>

				}
			}
		}
		osDelay(1000);
 8000a26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a2a:	f006 fcbb 	bl	80073a4 <osDelay>
		if(alarmsLen!=0){
 8000a2e:	e771      	b.n	8000914 <Alarm_startTask+0xc>
 8000a30:	200003ac 	.word	0x200003ac
 8000a34:	200000b4 	.word	0x200000b4
 8000a38:	20000664 	.word	0x20000664
 8000a3c:	20000670 	.word	0x20000670
 8000a40:	20000680 	.word	0x20000680
 8000a44:	0800b92c 	.word	0x0800b92c
 8000a48:	20000698 	.word	0x20000698
 8000a4c:	20000690 	.word	0x20000690

08000a50 <Alarm_print>:
 *
 *
 * @param none
 * @retval none
 */
void Alarm_print(){
 8000a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a52:	b08d      	sub	sp, #52	; 0x34
 8000a54:	af06      	add	r7, sp, #24
	printf("The existing alarms are:\r\n");
 8000a56:	4835      	ldr	r0, [pc, #212]	; (8000b2c <Alarm_print+0xdc>)
 8000a58:	f009 f9e2 	bl	8009e20 <puts>
	for(int i=0;i<alarmsLen;i++){
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]
 8000a60:	e05a      	b.n	8000b18 <Alarm_print+0xc8>
		printf("%s %02d:%02d:%02d-%d-%02d/%02d/%02d %s\r\n",alarms[i].name,
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	224c      	movs	r2, #76	; 0x4c
 8000a66:	fb02 f303 	mul.w	r3, r2, r3
 8000a6a:	4a31      	ldr	r2, [pc, #196]	; (8000b30 <Alarm_print+0xe0>)
 8000a6c:	189e      	adds	r6, r3, r2
 8000a6e:	4a30      	ldr	r2, [pc, #192]	; (8000b30 <Alarm_print+0xe0>)
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	214c      	movs	r1, #76	; 0x4c
 8000a74:	fb01 f303 	mul.w	r3, r1, r3
 8000a78:	4413      	add	r3, r2
 8000a7a:	331c      	adds	r3, #28
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	4a2b      	ldr	r2, [pc, #172]	; (8000b30 <Alarm_print+0xe0>)
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	214c      	movs	r1, #76	; 0x4c
 8000a86:	fb01 f303 	mul.w	r3, r1, r3
 8000a8a:	4413      	add	r3, r2
 8000a8c:	3318      	adds	r3, #24
 8000a8e:	6819      	ldr	r1, [r3, #0]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	4a27      	ldr	r2, [pc, #156]	; (8000b30 <Alarm_print+0xe0>)
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	214c      	movs	r1, #76	; 0x4c
 8000a98:	fb01 f303 	mul.w	r3, r1, r3
 8000a9c:	4413      	add	r3, r2
 8000a9e:	3314      	adds	r3, #20
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4923      	ldr	r1, [pc, #140]	; (8000b30 <Alarm_print+0xe0>)
 8000aa4:	697a      	ldr	r2, [r7, #20]
 8000aa6:	204c      	movs	r0, #76	; 0x4c
 8000aa8:	fb00 f202 	mul.w	r2, r0, r2
 8000aac:	440a      	add	r2, r1
 8000aae:	3220      	adds	r2, #32
 8000ab0:	6812      	ldr	r2, [r2, #0]
 8000ab2:	481f      	ldr	r0, [pc, #124]	; (8000b30 <Alarm_print+0xe0>)
 8000ab4:	6979      	ldr	r1, [r7, #20]
 8000ab6:	244c      	movs	r4, #76	; 0x4c
 8000ab8:	fb04 f101 	mul.w	r1, r4, r1
 8000abc:	4401      	add	r1, r0
 8000abe:	3124      	adds	r1, #36	; 0x24
 8000ac0:	6809      	ldr	r1, [r1, #0]
 8000ac2:	4c1b      	ldr	r4, [pc, #108]	; (8000b30 <Alarm_print+0xe0>)
 8000ac4:	6978      	ldr	r0, [r7, #20]
 8000ac6:	254c      	movs	r5, #76	; 0x4c
 8000ac8:	fb05 f000 	mul.w	r0, r5, r0
 8000acc:	4420      	add	r0, r4
 8000ace:	3028      	adds	r0, #40	; 0x28
 8000ad0:	6800      	ldr	r0, [r0, #0]
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	4d16      	ldr	r5, [pc, #88]	; (8000b30 <Alarm_print+0xe0>)
 8000ad6:	697c      	ldr	r4, [r7, #20]
 8000ad8:	f04f 0c4c 	mov.w	ip, #76	; 0x4c
 8000adc:	fb0c f404 	mul.w	r4, ip, r4
 8000ae0:	442c      	add	r4, r5
 8000ae2:	342c      	adds	r4, #44	; 0x2c
 8000ae4:	6824      	ldr	r4, [r4, #0]
					alarms[i].dateTime.hours, alarms[i].dateTime.min, alarms[i].dateTime.sec,
					alarms[i].dateTime.weekDay,alarms[i].dateTime.day, alarms[i].dateTime.month,
					alarms[i].dateTime.year,alarms[i].melodyName);
 8000ae6:	697d      	ldr	r5, [r7, #20]
 8000ae8:	f04f 0c4c 	mov.w	ip, #76	; 0x4c
 8000aec:	fb0c f505 	mul.w	r5, ip, r5
 8000af0:	3530      	adds	r5, #48	; 0x30
 8000af2:	480f      	ldr	r0, [pc, #60]	; (8000b30 <Alarm_print+0xe0>)
 8000af4:	4405      	add	r5, r0
 8000af6:	3504      	adds	r5, #4
		printf("%s %02d:%02d:%02d-%d-%02d/%02d/%02d %s\r\n",alarms[i].name,
 8000af8:	9505      	str	r5, [sp, #20]
 8000afa:	9404      	str	r4, [sp, #16]
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	9003      	str	r0, [sp, #12]
 8000b00:	9102      	str	r1, [sp, #8]
 8000b02:	9201      	str	r2, [sp, #4]
 8000b04:	9300      	str	r3, [sp, #0]
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	68fa      	ldr	r2, [r7, #12]
 8000b0a:	4631      	mov	r1, r6
 8000b0c:	4809      	ldr	r0, [pc, #36]	; (8000b34 <Alarm_print+0xe4>)
 8000b0e:	f009 f901 	bl	8009d14 <iprintf>
	for(int i=0;i<alarmsLen;i++){
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	3301      	adds	r3, #1
 8000b16:	617b      	str	r3, [r7, #20]
 8000b18:	697a      	ldr	r2, [r7, #20]
 8000b1a:	4b07      	ldr	r3, [pc, #28]	; (8000b38 <Alarm_print+0xe8>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	d39f      	bcc.n	8000a62 <Alarm_print+0x12>
	}
}
 8000b22:	bf00      	nop
 8000b24:	bf00      	nop
 8000b26:	371c      	adds	r7, #28
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b2c:	0800b944 	.word	0x0800b944
 8000b30:	200000b4 	.word	0x200000b4
 8000b34:	0800b960 	.word	0x0800b960
 8000b38:	200003ac 	.word	0x200003ac

08000b3c <Alarm_flashToAlarms>:
 *
 * @param none
 * @retval none
 */
void Alarm_flashToAlarms()
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
	for (int i = 0 ; i<sizeof(alarms)/sizeof(Alarm); i++)
 8000b42:	2300      	movs	r3, #0
 8000b44:	607b      	str	r3, [r7, #4]
 8000b46:	e021      	b.n	8000b8c <Alarm_flashToAlarms+0x50>
	{
		Alarm* alarm = (Alarm*)(0x08080000+(i*sizeof(Alarm)));
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	224c      	movs	r2, #76	; 0x4c
 8000b4c:	fb02 f303 	mul.w	r3, r2, r3
 8000b50:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000b54:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 8000b58:	603b      	str	r3, [r7, #0]
		if(alarm->isActive != 0){  //ask about this
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d004      	beq.n	8000b6c <Alarm_flashToAlarms+0x30>
			alarmsLen++;
 8000b62:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <Alarm_flashToAlarms+0x60>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	3301      	adds	r3, #1
 8000b68:	4a0c      	ldr	r2, [pc, #48]	; (8000b9c <Alarm_flashToAlarms+0x60>)
 8000b6a:	6013      	str	r3, [r2, #0]
		}
		alarms[i] = *alarm;
 8000b6c:	4a0c      	ldr	r2, [pc, #48]	; (8000ba0 <Alarm_flashToAlarms+0x64>)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	214c      	movs	r1, #76	; 0x4c
 8000b72:	fb01 f303 	mul.w	r3, r1, r3
 8000b76:	441a      	add	r2, r3
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	4610      	mov	r0, r2
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	234c      	movs	r3, #76	; 0x4c
 8000b80:	461a      	mov	r2, r3
 8000b82:	f009 f8b1 	bl	8009ce8 <memcpy>
	for (int i = 0 ; i<sizeof(alarms)/sizeof(Alarm); i++)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2b09      	cmp	r3, #9
 8000b90:	d9da      	bls.n	8000b48 <Alarm_flashToAlarms+0xc>
	}
}
 8000b92:	bf00      	nop
 8000b94:	bf00      	nop
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	200003ac 	.word	0x200003ac
 8000ba0:	200000b4 	.word	0x200000b4

08000ba4 <Button_init>:
 * @param  GPIO_TypeDef* gpioPort - the port of the button
 * @param uint16_t gpioPin - the pin of the button
 * @retval none
 */
void Button_init(Button* button, GPIO_TypeDef* gpioPort, uint16_t gpioPin)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	60f8      	str	r0, [r7, #12]
 8000bac:	60b9      	str	r1, [r7, #8]
 8000bae:	4613      	mov	r3, r2
 8000bb0:	80fb      	strh	r3, [r7, #6]

	button->gpioPort = gpioPort;
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	68ba      	ldr	r2, [r7, #8]
 8000bb6:	601a      	str	r2, [r3, #0]
	button->gpioPin = gpioPin;
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	88fa      	ldrh	r2, [r7, #6]
 8000bbc:	809a      	strh	r2, [r3, #4]
	button->btnState = BUTTON_STATE_NONE;
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	719a      	strb	r2, [r3, #6]
}
 8000bc4:	bf00      	nop
 8000bc6:	3714      	adds	r7, #20
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <Button_getState>:
 *
 *
 * @param  Button* button - the button
 * @retval the state of button
 */
ButtonState Button_getState(Button* button){
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
	return button->btnState;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	799b      	ldrb	r3, [r3, #6]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <Button_pressTask>:
 *
 * @param void* argument - a potential argument
 * @retval none
 */
void Button_pressTask(void *argument)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
	Button* btn = (Button*)argument;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	60fb      	str	r3, [r7, #12]
	for(;;){
		if(HAL_GPIO_ReadPin(btn->gpioPort, btn->gpioPin) == 0){
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	889b      	ldrh	r3, [r3, #4]
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4610      	mov	r0, r2
 8000c00:	f002 f99e 	bl	8002f40 <HAL_GPIO_ReadPin>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d103      	bne.n	8000c12 <Button_pressTask+0x2a>

			btn->btnState = BUTTON_STATE_PRESS;
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	719a      	strb	r2, [r3, #6]
 8000c10:	e7f0      	b.n	8000bf4 <Button_pressTask+0xc>
		}
		else{
			btn->btnState = BUTTON_STATE_NONE;
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	2200      	movs	r2, #0
 8000c16:	719a      	strb	r2, [r3, #6]
		if(HAL_GPIO_ReadPin(btn->gpioPort, btn->gpioPin) == 0){
 8000c18:	e7ec      	b.n	8000bf4 <Button_pressTask+0xc>

08000c1a <Buzzer_init>:
 *
 * @param  Buzzer* buzzer - the buzzer
 * @retval none
 */
void Buzzer_init(Buzzer * buzzer)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	b083      	sub	sp, #12
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	6078      	str	r0, [r7, #4]

	buzzer->bzState=BUZZER_STATE_OFF;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2200      	movs	r2, #0
 8000c26:	701a      	strb	r2, [r3, #0]

}
 8000c28:	bf00      	nop
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <Buzzer_changeToOn>:
 *
 * @param  Buzzer* buzzer - the buzzer
 * @retval none
 */
void Buzzer_changeToOn(Buzzer * buzzer)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4805      	ldr	r0, [pc, #20]	; (8000c54 <Buzzer_changeToOn+0x20>)
 8000c40:	f004 fc40 	bl	80054c4 <HAL_TIM_PWM_Start>
	buzzer->bzState=BUZZER_STATE_ON;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2201      	movs	r2, #1
 8000c48:	701a      	strb	r2, [r3, #0]

}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	200006f4 	.word	0x200006f4

08000c58 <Buzzer_changeToOff>:
 *
 * @param  Buzzer* buzzer - the buzzer
 * @retval none
 */
void Buzzer_changeToOff(Buzzer * buzzer)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8000c60:	2100      	movs	r1, #0
 8000c62:	4805      	ldr	r0, [pc, #20]	; (8000c78 <Buzzer_changeToOff+0x20>)
 8000c64:	f004 fd34 	bl	80056d0 <HAL_TIM_PWM_Stop>
	buzzer->bzState=BUZZER_STATE_OFF;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	701a      	strb	r2, [r3, #0]

}
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	200006f4 	.word	0x200006f4

08000c7c <Buzzer_getState>:
 *
 * @param  Buzzer* buzzer - the buzzer
 * @retval the state of buzzer
 */
BuzzerState Buzzer_getState(Buzzer * buzzer)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
	return buzzer->bzState;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	781b      	ldrb	r3, [r3, #0]

}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <Buzzer_changeMelody>:
 * @param  Buzzer* buzzer - the buzzer
 * @param char* name - the name of melody
 * @retval none
 */
void Buzzer_changeMelody(Buzzer* buzzer,char* name)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	6039      	str	r1, [r7, #0]
	if(!strcmp(name,"melody0")){
 8000c9e:	490c      	ldr	r1, [pc, #48]	; (8000cd0 <Buzzer_changeMelody+0x3c>)
 8000ca0:	6838      	ldr	r0, [r7, #0]
 8000ca2:	f7ff fa95 	bl	80001d0 <strcmp>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d103      	bne.n	8000cb4 <Buzzer_changeMelody+0x20>
		_melody = 0;
 8000cac:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <Buzzer_changeMelody+0x40>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
	}
	else if(!strcmp(name,"melody1")){
		_melody = 1;
	}
}
 8000cb2:	e009      	b.n	8000cc8 <Buzzer_changeMelody+0x34>
	else if(!strcmp(name,"melody1")){
 8000cb4:	4908      	ldr	r1, [pc, #32]	; (8000cd8 <Buzzer_changeMelody+0x44>)
 8000cb6:	6838      	ldr	r0, [r7, #0]
 8000cb8:	f7ff fa8a 	bl	80001d0 <strcmp>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d102      	bne.n	8000cc8 <Buzzer_changeMelody+0x34>
		_melody = 1;
 8000cc2:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <Buzzer_changeMelody+0x40>)
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	601a      	str	r2, [r3, #0]
}
 8000cc8:	bf00      	nop
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	0800b98c 	.word	0x0800b98c
 8000cd4:	200003bc 	.word	0x200003bc
 8000cd8:	0800b994 	.word	0x0800b994

08000cdc <Buzzer_printMelodies>:
 *
 * @param  none
 * @retval none
 */
void Buzzer_printMelodies()
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
	printf("The existing melodies are:\r\n");
 8000ce0:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <Buzzer_printMelodies+0x1c>)
 8000ce2:	f009 f89d 	bl	8009e20 <puts>
	printf("melody0 - beep\r\n");
 8000ce6:	4805      	ldr	r0, [pc, #20]	; (8000cfc <Buzzer_printMelodies+0x20>)
 8000ce8:	f009 f89a 	bl	8009e20 <puts>
	printf("melody1 - little hans\r\n");
 8000cec:	4804      	ldr	r0, [pc, #16]	; (8000d00 <Buzzer_printMelodies+0x24>)
 8000cee:	f009 f897 	bl	8009e20 <puts>

}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	0800b99c 	.word	0x0800b99c
 8000cfc:	0800b9b8 	.word	0x0800b9b8
 8000d00:	0800b9c8 	.word	0x0800b9c8

08000d04 <Buzzer_playTask>:
 *
 * @param void* argument - a potential argument
 * @retval none
 */
void Buzzer_playTask(void* argument)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
	Buzzer* buzzer = (Buzzer*)argument;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	60fb      	str	r3, [r7, #12]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000d10:	2100      	movs	r1, #0
 8000d12:	483b      	ldr	r0, [pc, #236]	; (8000e00 <Buzzer_playTask+0xfc>)
 8000d14:	f004 fbd6 	bl	80054c4 <HAL_TIM_PWM_Start>

	for(;;){
		if (buzzer->bzState == BUZZER_STATE_ON){
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d161      	bne.n	8000de4 <Buzzer_playTask+0xe0>
			if(_melody == 0){
 8000d20:	4b38      	ldr	r3, [pc, #224]	; (8000e04 <Buzzer_playTask+0x100>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d121      	bne.n	8000d6c <Buzzer_playTask+0x68>
				__HAL_TIM_SET_AUTORELOAD(&htim3, 100);
 8000d28:	4b35      	ldr	r3, [pc, #212]	; (8000e00 <Buzzer_playTask+0xfc>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2264      	movs	r2, #100	; 0x64
 8000d2e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d30:	4b33      	ldr	r3, [pc, #204]	; (8000e00 <Buzzer_playTask+0xfc>)
 8000d32:	2264      	movs	r2, #100	; 0x64
 8000d34:	60da      	str	r2, [r3, #12]
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 100/2);
 8000d36:	4b32      	ldr	r3, [pc, #200]	; (8000e00 <Buzzer_playTask+0xfc>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	2232      	movs	r2, #50	; 0x32
 8000d3c:	635a      	str	r2, [r3, #52]	; 0x34
				_countBeep++;
 8000d3e:	4b32      	ldr	r3, [pc, #200]	; (8000e08 <Buzzer_playTask+0x104>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	3301      	adds	r3, #1
 8000d44:	4a30      	ldr	r2, [pc, #192]	; (8000e08 <Buzzer_playTask+0x104>)
 8000d46:	6013      	str	r3, [r2, #0]
				if(_countBeep==20){
 8000d48:	4b2f      	ldr	r3, [pc, #188]	; (8000e08 <Buzzer_playTask+0x104>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2b14      	cmp	r3, #20
 8000d4e:	d149      	bne.n	8000de4 <Buzzer_playTask+0xe0>
					buzzer->bzState = BUZZER_STATE_OFF;
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	2200      	movs	r2, #0
 8000d54:	701a      	strb	r2, [r3, #0]
					HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8000d56:	2100      	movs	r1, #0
 8000d58:	4829      	ldr	r0, [pc, #164]	; (8000e00 <Buzzer_playTask+0xfc>)
 8000d5a:	f004 fcb9 	bl	80056d0 <HAL_TIM_PWM_Stop>
					_countBeep = 0;
 8000d5e:	4b2a      	ldr	r3, [pc, #168]	; (8000e08 <Buzzer_playTask+0x104>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
					_index = 0;
 8000d64:	4b29      	ldr	r3, [pc, #164]	; (8000e0c <Buzzer_playTask+0x108>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	e03b      	b.n	8000de4 <Buzzer_playTask+0xe0>
				}
			}
			else if(_melody == 1){
 8000d6c:	4b25      	ldr	r3, [pc, #148]	; (8000e04 <Buzzer_playTask+0x100>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d137      	bne.n	8000de4 <Buzzer_playTask+0xe0>
				_reload=(100000/_notes[_index])-1;
 8000d74:	4b25      	ldr	r3, [pc, #148]	; (8000e0c <Buzzer_playTask+0x108>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a25      	ldr	r2, [pc, #148]	; (8000e10 <Buzzer_playTask+0x10c>)
 8000d7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d7e:	4a25      	ldr	r2, [pc, #148]	; (8000e14 <Buzzer_playTask+0x110>)
 8000d80:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d84:	3b01      	subs	r3, #1
 8000d86:	4a24      	ldr	r2, [pc, #144]	; (8000e18 <Buzzer_playTask+0x114>)
 8000d88:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000d8a:	4b1d      	ldr	r3, [pc, #116]	; (8000e00 <Buzzer_playTask+0xfc>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	2200      	movs	r2, #0
 8000d90:	625a      	str	r2, [r3, #36]	; 0x24
				__HAL_TIM_SET_AUTORELOAD(&htim3, _reload);
 8000d92:	4b21      	ldr	r3, [pc, #132]	; (8000e18 <Buzzer_playTask+0x114>)
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	4b1a      	ldr	r3, [pc, #104]	; (8000e00 <Buzzer_playTask+0xfc>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d9c:	4b1e      	ldr	r3, [pc, #120]	; (8000e18 <Buzzer_playTask+0x114>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	461a      	mov	r2, r3
 8000da2:	4b17      	ldr	r3, [pc, #92]	; (8000e00 <Buzzer_playTask+0xfc>)
 8000da4:	60da      	str	r2, [r3, #12]
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, _reload/2);
 8000da6:	4b1c      	ldr	r3, [pc, #112]	; (8000e18 <Buzzer_playTask+0x114>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	0fda      	lsrs	r2, r3, #31
 8000dac:	4413      	add	r3, r2
 8000dae:	105b      	asrs	r3, r3, #1
 8000db0:	461a      	mov	r2, r3
 8000db2:	4b13      	ldr	r3, [pc, #76]	; (8000e00 <Buzzer_playTask+0xfc>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	635a      	str	r2, [r3, #52]	; 0x34

				if(_index==(_len-1)){
 8000db8:	230d      	movs	r3, #13
 8000dba:	1e5a      	subs	r2, r3, #1
 8000dbc:	4b13      	ldr	r3, [pc, #76]	; (8000e0c <Buzzer_playTask+0x108>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	d10a      	bne.n	8000dda <Buzzer_playTask+0xd6>
					buzzer->bzState = BUZZER_STATE_OFF;
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	701a      	strb	r2, [r3, #0]
					HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8000dca:	2100      	movs	r1, #0
 8000dcc:	480c      	ldr	r0, [pc, #48]	; (8000e00 <Buzzer_playTask+0xfc>)
 8000dce:	f004 fc7f 	bl	80056d0 <HAL_TIM_PWM_Stop>
					_index = 0;
 8000dd2:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <Buzzer_playTask+0x108>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	e004      	b.n	8000de4 <Buzzer_playTask+0xe0>
				}
				else{
					_index++;
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <Buzzer_playTask+0x108>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	3301      	adds	r3, #1
 8000de0:	4a0a      	ldr	r2, [pc, #40]	; (8000e0c <Buzzer_playTask+0x108>)
 8000de2:	6013      	str	r3, [r2, #0]
				}
			}
		}
			osDelay(1000/_lengths[_index]);
 8000de4:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <Buzzer_playTask+0x108>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a0c      	ldr	r2, [pc, #48]	; (8000e1c <Buzzer_playTask+0x118>)
 8000dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000df2:	fb92 f3f3 	sdiv	r3, r2, r3
 8000df6:	4618      	mov	r0, r3
 8000df8:	f006 fad4 	bl	80073a4 <osDelay>
		if (buzzer->bzState == BUZZER_STATE_ON){
 8000dfc:	e78c      	b.n	8000d18 <Buzzer_playTask+0x14>
 8000dfe:	bf00      	nop
 8000e00:	200006f4 	.word	0x200006f4
 8000e04:	200003bc 	.word	0x200003bc
 8000e08:	200003b8 	.word	0x200003b8
 8000e0c:	200003b0 	.word	0x200003b0
 8000e10:	0800bee0 	.word	0x0800bee0
 8000e14:	000186a0 	.word	0x000186a0
 8000e18:	200003b4 	.word	0x200003b4
 8000e1c:	0800bf14 	.word	0x0800bf14

08000e20 <checkToken>:
 * @param  int low - the lower time token can be
 * @param  int high - the higher time token can be
 * @retval 0 if token isn't between low and hight, 1 if it is
 */
static int checkToken(char* token,int low,int high)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
	int tokInt = atoi(token);
 8000e2c:	68f8      	ldr	r0, [r7, #12]
 8000e2e:	f008 ff2d 	bl	8009c8c <atoi>
 8000e32:	6178      	str	r0, [r7, #20]
	if(tokInt < low || tokInt > high){
 8000e34:	697a      	ldr	r2, [r7, #20]
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	db03      	blt.n	8000e44 <checkToken+0x24>
 8000e3c:	697a      	ldr	r2, [r7, #20]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	dd01      	ble.n	8000e48 <checkToken+0x28>
		return 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	e000      	b.n	8000e4a <checkToken+0x2a>
	}
	return 1;
 8000e48:	2301      	movs	r3, #1
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3718      	adds	r7, #24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
	...

08000e54 <timeStrTok>:
 * @param  char* params - the time in char
 * @param  DateTime* dateTime - date time struct
 * @retval 0 if params isn't ok, 1 if it is ok
 */
static int timeStrTok(char * params,DateTime* dateTime)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]
	char* token;
	token = strtok(params, ":");
 8000e5e:	4951      	ldr	r1, [pc, #324]	; (8000fa4 <timeStrTok+0x150>)
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	f009 f871 	bl	8009f48 <strtok>
 8000e66:	60f8      	str	r0, [r7, #12]
	if(!checkToken(token,0,59)){
 8000e68:	223b      	movs	r2, #59	; 0x3b
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	68f8      	ldr	r0, [r7, #12]
 8000e6e:	f7ff ffd7 	bl	8000e20 <checkToken>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d101      	bne.n	8000e7c <timeStrTok+0x28>
		return 0;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	e08e      	b.n	8000f9a <timeStrTok+0x146>
	}
	dateTime->hours = atoi(token);
 8000e7c:	68f8      	ldr	r0, [r7, #12]
 8000e7e:	f008 ff05 	bl	8009c8c <atoi>
 8000e82:	4602      	mov	r2, r0
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	609a      	str	r2, [r3, #8]
	token = strtok(NULL, ":");
 8000e88:	4946      	ldr	r1, [pc, #280]	; (8000fa4 <timeStrTok+0x150>)
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	f009 f85c 	bl	8009f48 <strtok>
 8000e90:	60f8      	str	r0, [r7, #12]
	if(!checkToken(token,0,59)){
 8000e92:	223b      	movs	r2, #59	; 0x3b
 8000e94:	2100      	movs	r1, #0
 8000e96:	68f8      	ldr	r0, [r7, #12]
 8000e98:	f7ff ffc2 	bl	8000e20 <checkToken>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d101      	bne.n	8000ea6 <timeStrTok+0x52>
		return 0;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	e079      	b.n	8000f9a <timeStrTok+0x146>
	}
	dateTime->min = atoi(token);
 8000ea6:	68f8      	ldr	r0, [r7, #12]
 8000ea8:	f008 fef0 	bl	8009c8c <atoi>
 8000eac:	4602      	mov	r2, r0
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
	token = strtok(NULL, "-");
 8000eb2:	493d      	ldr	r1, [pc, #244]	; (8000fa8 <timeStrTok+0x154>)
 8000eb4:	2000      	movs	r0, #0
 8000eb6:	f009 f847 	bl	8009f48 <strtok>
 8000eba:	60f8      	str	r0, [r7, #12]
	if(!checkToken(token,0,59)){
 8000ebc:	223b      	movs	r2, #59	; 0x3b
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	68f8      	ldr	r0, [r7, #12]
 8000ec2:	f7ff ffad 	bl	8000e20 <checkToken>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d101      	bne.n	8000ed0 <timeStrTok+0x7c>
		return 0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	e064      	b.n	8000f9a <timeStrTok+0x146>
	}
	dateTime->sec = atoi(token);
 8000ed0:	68f8      	ldr	r0, [r7, #12]
 8000ed2:	f008 fedb 	bl	8009c8c <atoi>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	601a      	str	r2, [r3, #0]
	token = strtok(NULL, "-");
 8000edc:	4932      	ldr	r1, [pc, #200]	; (8000fa8 <timeStrTok+0x154>)
 8000ede:	2000      	movs	r0, #0
 8000ee0:	f009 f832 	bl	8009f48 <strtok>
 8000ee4:	60f8      	str	r0, [r7, #12]
	if(!checkToken(token,0,7)){
 8000ee6:	2207      	movs	r2, #7
 8000ee8:	2100      	movs	r1, #0
 8000eea:	68f8      	ldr	r0, [r7, #12]
 8000eec:	f7ff ff98 	bl	8000e20 <checkToken>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d101      	bne.n	8000efa <timeStrTok+0xa6>
		return 0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	e04f      	b.n	8000f9a <timeStrTok+0x146>
	}
	dateTime->weekDay = atoi(token);
 8000efa:	68f8      	ldr	r0, [r7, #12]
 8000efc:	f008 fec6 	bl	8009c8c <atoi>
 8000f00:	4602      	mov	r2, r0
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	60da      	str	r2, [r3, #12]
	token = strtok(NULL, "/");
 8000f06:	4929      	ldr	r1, [pc, #164]	; (8000fac <timeStrTok+0x158>)
 8000f08:	2000      	movs	r0, #0
 8000f0a:	f009 f81d 	bl	8009f48 <strtok>
 8000f0e:	60f8      	str	r0, [r7, #12]
	if(!checkToken(token,1,31)){
 8000f10:	221f      	movs	r2, #31
 8000f12:	2101      	movs	r1, #1
 8000f14:	68f8      	ldr	r0, [r7, #12]
 8000f16:	f7ff ff83 	bl	8000e20 <checkToken>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d101      	bne.n	8000f24 <timeStrTok+0xd0>
		return 0;
 8000f20:	2300      	movs	r3, #0
 8000f22:	e03a      	b.n	8000f9a <timeStrTok+0x146>
	}
	dateTime->day = atoi(token);
 8000f24:	68f8      	ldr	r0, [r7, #12]
 8000f26:	f008 feb1 	bl	8009c8c <atoi>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	611a      	str	r2, [r3, #16]
	token = strtok(NULL, "/");
 8000f30:	491e      	ldr	r1, [pc, #120]	; (8000fac <timeStrTok+0x158>)
 8000f32:	2000      	movs	r0, #0
 8000f34:	f009 f808 	bl	8009f48 <strtok>
 8000f38:	60f8      	str	r0, [r7, #12]
	if(!checkToken(token,1,12)){
 8000f3a:	220c      	movs	r2, #12
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	68f8      	ldr	r0, [r7, #12]
 8000f40:	f7ff ff6e 	bl	8000e20 <checkToken>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d101      	bne.n	8000f4e <timeStrTok+0xfa>
		return 0;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	e025      	b.n	8000f9a <timeStrTok+0x146>
	}
	dateTime->month = atoi(token);
 8000f4e:	68f8      	ldr	r0, [r7, #12]
 8000f50:	f008 fe9c 	bl	8009c8c <atoi>
 8000f54:	4602      	mov	r2, r0
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	615a      	str	r2, [r3, #20]
	token = strtok(NULL, "/");
 8000f5a:	4914      	ldr	r1, [pc, #80]	; (8000fac <timeStrTok+0x158>)
 8000f5c:	2000      	movs	r0, #0
 8000f5e:	f008 fff3 	bl	8009f48 <strtok>
 8000f62:	60f8      	str	r0, [r7, #12]
	if(!checkToken(token,1,99)){
 8000f64:	2263      	movs	r2, #99	; 0x63
 8000f66:	2101      	movs	r1, #1
 8000f68:	68f8      	ldr	r0, [r7, #12]
 8000f6a:	f7ff ff59 	bl	8000e20 <checkToken>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d101      	bne.n	8000f78 <timeStrTok+0x124>
		return 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	e010      	b.n	8000f9a <timeStrTok+0x146>
	}
	dateTime->year = atoi(token);
 8000f78:	68f8      	ldr	r0, [r7, #12]
 8000f7a:	f008 fe87 	bl	8009c8c <atoi>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	619a      	str	r2, [r3, #24]
	token = strtok(NULL, "/");
 8000f84:	4909      	ldr	r1, [pc, #36]	; (8000fac <timeStrTok+0x158>)
 8000f86:	2000      	movs	r0, #0
 8000f88:	f008 ffde 	bl	8009f48 <strtok>
 8000f8c:	60f8      	str	r0, [r7, #12]
	if(token!=NULL){
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <timeStrTok+0x144>
		return 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	e000      	b.n	8000f9a <timeStrTok+0x146>
	}
	return 1;
 8000f98:	2301      	movs	r3, #1
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	0800b9e0 	.word	0x0800b9e0
 8000fa8:	0800b9e4 	.word	0x0800b9e4
 8000fac:	0800b9e8 	.word	0x0800b9e8

08000fb0 <paramStrTok>:
 *
 * @param  char* params - the param in char
 * @retval 0 for change date, 1 for change melody, 2 for rep the melody
 */
static int paramStrTok(char * params)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
	 char * token = strtok(params, "0123456789");
 8000fb8:	490d      	ldr	r1, [pc, #52]	; (8000ff0 <paramStrTok+0x40>)
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f008 ffc4 	bl	8009f48 <strtok>
 8000fc0:	60f8      	str	r0, [r7, #12]
	 if(!strcmp(token,"melody")){
 8000fc2:	490c      	ldr	r1, [pc, #48]	; (8000ff4 <paramStrTok+0x44>)
 8000fc4:	68f8      	ldr	r0, [r7, #12]
 8000fc6:	f7ff f903 	bl	80001d0 <strcmp>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d101      	bne.n	8000fd4 <paramStrTok+0x24>
		 return 1;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	e009      	b.n	8000fe8 <paramStrTok+0x38>
	 }
	 else if(!strcmp(token,"rep")){
 8000fd4:	4908      	ldr	r1, [pc, #32]	; (8000ff8 <paramStrTok+0x48>)
 8000fd6:	68f8      	ldr	r0, [r7, #12]
 8000fd8:	f7ff f8fa 	bl	80001d0 <strcmp>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d101      	bne.n	8000fe6 <paramStrTok+0x36>
		 return 2;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	e000      	b.n	8000fe8 <paramStrTok+0x38>
	 }
	 else{
		 return 0;
 8000fe6:	2300      	movs	r3, #0
	 }
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	0800b9ec 	.word	0x0800b9ec
 8000ff4:	0800b9f8 	.word	0x0800b9f8
 8000ff8:	0800ba00 	.word	0x0800ba00

08000ffc <cmdGetSeconds>:
 * @param  char* name - optional name
 *  @param  char* params - optional params
 * @retval none
 */
static void cmdGetSeconds(void* obj, char* name,char* params)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
	Rtc* rtc = (Rtc*)obj;
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	617b      	str	r3, [r7, #20]
	uint32_t sec = Rtc_getSeconds(rtc);
 800100c:	6978      	ldr	r0, [r7, #20]
 800100e:	f000 fc55 	bl	80018bc <Rtc_getSeconds>
 8001012:	6138      	str	r0, [r7, #16]
	printf("The sec is: %lu\r\n",sec);
 8001014:	6939      	ldr	r1, [r7, #16]
 8001016:	4803      	ldr	r0, [pc, #12]	; (8001024 <cmdGetSeconds+0x28>)
 8001018:	f008 fe7c 	bl	8009d14 <iprintf>
}
 800101c:	bf00      	nop
 800101e:	3718      	adds	r7, #24
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	0800ba04 	.word	0x0800ba04

08001028 <cmdListAlarms>:
 * @param  char* name - optional name
 *  @param  char* params - optional params
 * @retval none
 */
static void cmdListAlarms(void* obj, char* name,char* params)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
	Alarm_print();
 8001034:	f7ff fd0c 	bl	8000a50 <Alarm_print>
}
 8001038:	bf00      	nop
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <cmdSetDate>:
 * @param  char* name - optional name
 *  @param  char* params - optional params
 * @retval none
 */
static void cmdSetDate(void* obj, char* name,char* params)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
	Rtc* rtc = (Rtc*)obj;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	617b      	str	r3, [r7, #20]
	Rtc_setTime(rtc);
 8001050:	6978      	ldr	r0, [r7, #20]
 8001052:	f000 fcd5 	bl	8001a00 <Rtc_setTime>
}
 8001056:	bf00      	nop
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
	...

08001060 <cmdAddAlarm>:
 * @param  char* name - the alarm name
 *  @param  char* params - alarma date
 * @retval none
 */
static void cmdAddAlarm(void* obj, char* name,char* params)
{
 8001060:	b590      	push	{r4, r7, lr}
 8001062:	b091      	sub	sp, #68	; 0x44
 8001064:	af04      	add	r7, sp, #16
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
		DateTime dateTime;
		if(!timeStrTok(params,&dateTime)){
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	4619      	mov	r1, r3
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f7ff feee 	bl	8000e54 <timeStrTok>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d103      	bne.n	8001086 <cmdAddAlarm+0x26>
			printf("Incorrect time\r\n");
 800107e:	480d      	ldr	r0, [pc, #52]	; (80010b4 <cmdAddAlarm+0x54>)
 8001080:	f008 fece 	bl	8009e20 <puts>
		}
		else if(!Alarm_add(name, dateTime)){
			printf("Alarm name already exists\r\n");
		}
}
 8001084:	e011      	b.n	80010aa <cmdAddAlarm+0x4a>
		else if(!Alarm_add(name, dateTime)){
 8001086:	466c      	mov	r4, sp
 8001088:	f107 0320 	add.w	r3, r7, #32
 800108c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800108e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001092:	f107 0314 	add.w	r3, r7, #20
 8001096:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001098:	68b8      	ldr	r0, [r7, #8]
 800109a:	f7ff fa83 	bl	80005a4 <Alarm_add>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d102      	bne.n	80010aa <cmdAddAlarm+0x4a>
			printf("Alarm name already exists\r\n");
 80010a4:	4804      	ldr	r0, [pc, #16]	; (80010b8 <cmdAddAlarm+0x58>)
 80010a6:	f008 febb 	bl	8009e20 <puts>
}
 80010aa:	bf00      	nop
 80010ac:	3734      	adds	r7, #52	; 0x34
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd90      	pop	{r4, r7, pc}
 80010b2:	bf00      	nop
 80010b4:	0800ba18 	.word	0x0800ba18
 80010b8:	0800ba28 	.word	0x0800ba28

080010bc <cmdDelAlarm>:
 * @param  char* name - alarm name
 *  @param  char* params - optional params
 * @retval none
 */
static void cmdDelAlarm(void* obj, char* name,char* params)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]

	if(!Alarm_delete(name)){
 80010c8:	68b8      	ldr	r0, [r7, #8]
 80010ca:	f7ff fad7 	bl	800067c <Alarm_delete>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d102      	bne.n	80010da <cmdDelAlarm+0x1e>
		printf("Alarm name didn't eexists\r\n");
 80010d4:	4803      	ldr	r0, [pc, #12]	; (80010e4 <cmdDelAlarm+0x28>)
 80010d6:	f008 fea3 	bl	8009e20 <puts>
	}

}
 80010da:	bf00      	nop
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	0800ba44 	.word	0x0800ba44

080010e8 <cmdStopAlarm>:
 * @param  char* name - alarm name
 *  @param  char* params - optional params
 * @retval none
 */
static void cmdStopAlarm(void* obj, char* name,char* params)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
	Alarm_stop(name);
 80010f4:	68b8      	ldr	r0, [r7, #8]
 80010f6:	f7ff fb19 	bl	800072c <Alarm_stop>
}
 80010fa:	bf00      	nop
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <cmdClearAllAlarms>:
 * @param  char* name - optional name
 *  @param  char* params - optional params
 * @retval none
 */
static void cmdClearAllAlarms(void* obj, char* name,char* params)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b084      	sub	sp, #16
 8001106:	af00      	add	r7, sp, #0
 8001108:	60f8      	str	r0, [r7, #12]
 800110a:	60b9      	str	r1, [r7, #8]
 800110c:	607a      	str	r2, [r7, #4]
	Alarm_clearAll();
 800110e:	f7ff fb5d 	bl	80007cc <Alarm_clearAll>
}
 8001112:	bf00      	nop
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
	...

0800111c <cmdEditAlarm>:
 * @param  char* name - alarm name
 *  @param  char* params - alarm date
 * @retval none
 */
static void cmdEditAlarm(void* obj, char* name,char* params)
{
 800111c:	b590      	push	{r4, r7, lr}
 800111e:	b097      	sub	sp, #92	; 0x5c
 8001120:	af04      	add	r7, sp, #16
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
	char copy[20];
	strcpy(copy,params);
 8001128:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800112c:	6879      	ldr	r1, [r7, #4]
 800112e:	4618      	mov	r0, r3
 8001130:	f008 feef 	bl	8009f12 <strcpy>
	int num = paramStrTok(copy);
 8001134:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ff39 	bl	8000fb0 <paramStrTok>
 800113e:	6478      	str	r0, [r7, #68]	; 0x44
	if(num == 1){
 8001140:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001142:	2b01      	cmp	r3, #1
 8001144:	d10a      	bne.n	800115c <cmdEditAlarm+0x40>
		if(!Alarm_changeMelody(name, params)){
 8001146:	6879      	ldr	r1, [r7, #4]
 8001148:	68b8      	ldr	r0, [r7, #8]
 800114a:	f7ff fafd 	bl	8000748 <Alarm_changeMelody>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d123      	bne.n	800119c <cmdEditAlarm+0x80>
			printf("Alarm name didn't exists\r\n");
 8001154:	4813      	ldr	r0, [pc, #76]	; (80011a4 <cmdEditAlarm+0x88>)
 8001156:	f008 fe63 	bl	8009e20 <puts>
		}
		else{
			Alarm_edit(name, dateTime);
		}
	}
}
 800115a:	e01f      	b.n	800119c <cmdEditAlarm+0x80>
	else if(num == 2){
 800115c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800115e:	2b02      	cmp	r3, #2
 8001160:	d103      	bne.n	800116a <cmdEditAlarm+0x4e>
		printf("it is rep\r\n");
 8001162:	4811      	ldr	r0, [pc, #68]	; (80011a8 <cmdEditAlarm+0x8c>)
 8001164:	f008 fe5c 	bl	8009e20 <puts>
}
 8001168:	e018      	b.n	800119c <cmdEditAlarm+0x80>
		if(!timeStrTok(params, &dateTime)){
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	4619      	mov	r1, r3
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f7ff fe6f 	bl	8000e54 <timeStrTok>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d103      	bne.n	8001184 <cmdEditAlarm+0x68>
			printf("Incorrect time\r\n");
 800117c:	480b      	ldr	r0, [pc, #44]	; (80011ac <cmdEditAlarm+0x90>)
 800117e:	f008 fe4f 	bl	8009e20 <puts>
}
 8001182:	e00b      	b.n	800119c <cmdEditAlarm+0x80>
			Alarm_edit(name, dateTime);
 8001184:	466c      	mov	r4, sp
 8001186:	f107 0320 	add.w	r3, r7, #32
 800118a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800118c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001196:	68b8      	ldr	r0, [r7, #8]
 8001198:	f7ff fb48 	bl	800082c <Alarm_edit>
}
 800119c:	bf00      	nop
 800119e:	374c      	adds	r7, #76	; 0x4c
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd90      	pop	{r4, r7, pc}
 80011a4:	0800ba60 	.word	0x0800ba60
 80011a8:	0800ba7c 	.word	0x0800ba7c
 80011ac:	0800ba18 	.word	0x0800ba18

080011b0 <cmdListMelody>:
 * @param  char* name - optional name
 *  @param  char* params - optional params
 * @retval none
 */
void cmdListMelody(void* obj, char* name,char* params)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
	Buzzer_printMelodies();
 80011bc:	f7ff fd8e 	bl	8000cdc <Buzzer_printMelodies>
}
 80011c0:	bf00      	nop
 80011c2:	3710      	adds	r7, #16
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <Cli_init>:
 *
 *
 * @param  none
 * @retval none
 */
void Cli_init(){
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
	Communication_register("getSeconds", &cmdGetSeconds,&rtc1);
 80011cc:	4a17      	ldr	r2, [pc, #92]	; (800122c <Cli_init+0x64>)
 80011ce:	4918      	ldr	r1, [pc, #96]	; (8001230 <Cli_init+0x68>)
 80011d0:	4818      	ldr	r0, [pc, #96]	; (8001234 <Cli_init+0x6c>)
 80011d2:	f000 f953 	bl	800147c <Communication_register>
	Communication_register("list", &cmdListAlarms, "");
 80011d6:	4a18      	ldr	r2, [pc, #96]	; (8001238 <Cli_init+0x70>)
 80011d8:	4918      	ldr	r1, [pc, #96]	; (800123c <Cli_init+0x74>)
 80011da:	4819      	ldr	r0, [pc, #100]	; (8001240 <Cli_init+0x78>)
 80011dc:	f000 f94e 	bl	800147c <Communication_register>
	Communication_register("date", &cmdSetDate, &rtc1);
 80011e0:	4a12      	ldr	r2, [pc, #72]	; (800122c <Cli_init+0x64>)
 80011e2:	4918      	ldr	r1, [pc, #96]	; (8001244 <Cli_init+0x7c>)
 80011e4:	4818      	ldr	r0, [pc, #96]	; (8001248 <Cli_init+0x80>)
 80011e6:	f000 f949 	bl	800147c <Communication_register>
	Communication_register("add", &cmdAddAlarm,"");
 80011ea:	4a13      	ldr	r2, [pc, #76]	; (8001238 <Cli_init+0x70>)
 80011ec:	4917      	ldr	r1, [pc, #92]	; (800124c <Cli_init+0x84>)
 80011ee:	4818      	ldr	r0, [pc, #96]	; (8001250 <Cli_init+0x88>)
 80011f0:	f000 f944 	bl	800147c <Communication_register>
	Communication_register("del", &cmdDelAlarm,"");
 80011f4:	4a10      	ldr	r2, [pc, #64]	; (8001238 <Cli_init+0x70>)
 80011f6:	4917      	ldr	r1, [pc, #92]	; (8001254 <Cli_init+0x8c>)
 80011f8:	4817      	ldr	r0, [pc, #92]	; (8001258 <Cli_init+0x90>)
 80011fa:	f000 f93f 	bl	800147c <Communication_register>
	Communication_register("stop", &cmdStopAlarm,"");
 80011fe:	4a0e      	ldr	r2, [pc, #56]	; (8001238 <Cli_init+0x70>)
 8001200:	4916      	ldr	r1, [pc, #88]	; (800125c <Cli_init+0x94>)
 8001202:	4817      	ldr	r0, [pc, #92]	; (8001260 <Cli_init+0x98>)
 8001204:	f000 f93a 	bl	800147c <Communication_register>
	Communication_register("clearall", &cmdClearAllAlarms,"");
 8001208:	4a0b      	ldr	r2, [pc, #44]	; (8001238 <Cli_init+0x70>)
 800120a:	4916      	ldr	r1, [pc, #88]	; (8001264 <Cli_init+0x9c>)
 800120c:	4816      	ldr	r0, [pc, #88]	; (8001268 <Cli_init+0xa0>)
 800120e:	f000 f935 	bl	800147c <Communication_register>
	Communication_register("edit", &cmdEditAlarm,"");
 8001212:	4a09      	ldr	r2, [pc, #36]	; (8001238 <Cli_init+0x70>)
 8001214:	4915      	ldr	r1, [pc, #84]	; (800126c <Cli_init+0xa4>)
 8001216:	4816      	ldr	r0, [pc, #88]	; (8001270 <Cli_init+0xa8>)
 8001218:	f000 f930 	bl	800147c <Communication_register>
	Communication_register("melody", &cmdListMelody,"");
 800121c:	4a06      	ldr	r2, [pc, #24]	; (8001238 <Cli_init+0x70>)
 800121e:	4915      	ldr	r1, [pc, #84]	; (8001274 <Cli_init+0xac>)
 8001220:	4815      	ldr	r0, [pc, #84]	; (8001278 <Cli_init+0xb0>)
 8001222:	f000 f92b 	bl	800147c <Communication_register>
}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000668 	.word	0x20000668
 8001230:	08000ffd 	.word	0x08000ffd
 8001234:	0800ba88 	.word	0x0800ba88
 8001238:	0800ba94 	.word	0x0800ba94
 800123c:	08001029 	.word	0x08001029
 8001240:	0800ba98 	.word	0x0800ba98
 8001244:	08001041 	.word	0x08001041
 8001248:	0800baa0 	.word	0x0800baa0
 800124c:	08001061 	.word	0x08001061
 8001250:	0800baa8 	.word	0x0800baa8
 8001254:	080010bd 	.word	0x080010bd
 8001258:	0800baac 	.word	0x0800baac
 800125c:	080010e9 	.word	0x080010e9
 8001260:	0800bab0 	.word	0x0800bab0
 8001264:	08001103 	.word	0x08001103
 8001268:	0800bab8 	.word	0x0800bab8
 800126c:	0800111d 	.word	0x0800111d
 8001270:	0800bac4 	.word	0x0800bac4
 8001274:	080011b1 	.word	0x080011b1
 8001278:	0800b9f8 	.word	0x0800b9f8

0800127c <task>:
 *
 * @param  none
 * @retval 0 if the char isn't /n or /r, 1 if it is
 */
 int task()
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
	uint8_t ch;

	HAL_StatusTypeDef Status = HAL_UART_Receive(&huart2, &ch, 1, 10);
 8001282:	1db9      	adds	r1, r7, #6
 8001284:	230a      	movs	r3, #10
 8001286:	2201      	movs	r2, #1
 8001288:	4844      	ldr	r0, [pc, #272]	; (800139c <task+0x120>)
 800128a:	f005 fa31 	bl	80066f0 <HAL_UART_Receive>
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
	if (Status != HAL_OK)
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d020      	beq.n	80012da <task+0x5e>
	{
		if ((huart2.Instance->ISR & USART_ISR_ORE) != 0)
 8001298:	4b40      	ldr	r3, [pc, #256]	; (800139c <task+0x120>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	69db      	ldr	r3, [r3, #28]
 800129e:	f003 0308 	and.w	r3, r3, #8
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d011      	beq.n	80012ca <task+0x4e>
		{
			__HAL_UART_CLEAR_OREFLAG(&huart2);
 80012a6:	4b3d      	ldr	r3, [pc, #244]	; (800139c <task+0x120>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2208      	movs	r2, #8
 80012ac:	621a      	str	r2, [r3, #32]
		}

		// here we have a time to print the command
		while (_cmdprint < _cmdcount)
 80012ae:	e00c      	b.n	80012ca <task+0x4e>
		{
			HAL_UART_Transmit(&huart2, &_cmdbuffer[_cmdprint++], 1, 0xFFFF);
 80012b0:	4b3b      	ldr	r3, [pc, #236]	; (80013a0 <task+0x124>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	1c5a      	adds	r2, r3, #1
 80012b6:	493a      	ldr	r1, [pc, #232]	; (80013a0 <task+0x124>)
 80012b8:	600a      	str	r2, [r1, #0]
 80012ba:	4a3a      	ldr	r2, [pc, #232]	; (80013a4 <task+0x128>)
 80012bc:	1899      	adds	r1, r3, r2
 80012be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012c2:	2201      	movs	r2, #1
 80012c4:	4835      	ldr	r0, [pc, #212]	; (800139c <task+0x120>)
 80012c6:	f005 f97f 	bl	80065c8 <HAL_UART_Transmit>
		while (_cmdprint < _cmdcount)
 80012ca:	4b35      	ldr	r3, [pc, #212]	; (80013a0 <task+0x124>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	4b36      	ldr	r3, [pc, #216]	; (80013a8 <task+0x12c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	429a      	cmp	r2, r3
 80012d4:	dbec      	blt.n	80012b0 <task+0x34>
		}

		return 0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	e05c      	b.n	8001394 <task+0x118>
	}

	if (ch == '\r' || ch == '\n')
 80012da:	79bb      	ldrb	r3, [r7, #6]
 80012dc:	2b0d      	cmp	r3, #13
 80012de:	d010      	beq.n	8001302 <task+0x86>
 80012e0:	79bb      	ldrb	r3, [r7, #6]
 80012e2:	2b0a      	cmp	r3, #10
 80012e4:	d127      	bne.n	8001336 <task+0xba>
	{
		// here we have a time to print the command
		while (_cmdprint < _cmdcount)
 80012e6:	e00c      	b.n	8001302 <task+0x86>
		{
			HAL_UART_Transmit(&huart2, &_cmdbuffer[_cmdprint++], 1, 0xFFFF);
 80012e8:	4b2d      	ldr	r3, [pc, #180]	; (80013a0 <task+0x124>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	1c5a      	adds	r2, r3, #1
 80012ee:	492c      	ldr	r1, [pc, #176]	; (80013a0 <task+0x124>)
 80012f0:	600a      	str	r2, [r1, #0]
 80012f2:	4a2c      	ldr	r2, [pc, #176]	; (80013a4 <task+0x128>)
 80012f4:	1899      	adds	r1, r3, r2
 80012f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012fa:	2201      	movs	r2, #1
 80012fc:	4827      	ldr	r0, [pc, #156]	; (800139c <task+0x120>)
 80012fe:	f005 f963 	bl	80065c8 <HAL_UART_Transmit>
		while (_cmdprint < _cmdcount)
 8001302:	4b27      	ldr	r3, [pc, #156]	; (80013a0 <task+0x124>)
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	4b28      	ldr	r3, [pc, #160]	; (80013a8 <task+0x12c>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	429a      	cmp	r2, r3
 800130c:	dbec      	blt.n	80012e8 <task+0x6c>
		}

		HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, 0xFFFF);
 800130e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001312:	2202      	movs	r2, #2
 8001314:	4925      	ldr	r1, [pc, #148]	; (80013ac <task+0x130>)
 8001316:	4821      	ldr	r0, [pc, #132]	; (800139c <task+0x120>)
 8001318:	f005 f956 	bl	80065c8 <HAL_UART_Transmit>

		_cmdbuffer[_cmdcount] = 0;
 800131c:	4b22      	ldr	r3, [pc, #136]	; (80013a8 <task+0x12c>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a20      	ldr	r2, [pc, #128]	; (80013a4 <task+0x128>)
 8001322:	2100      	movs	r1, #0
 8001324:	54d1      	strb	r1, [r2, r3]
		_cmdcount = 0;
 8001326:	4b20      	ldr	r3, [pc, #128]	; (80013a8 <task+0x12c>)
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
		_cmdprint = 0;
 800132c:	4b1c      	ldr	r3, [pc, #112]	; (80013a0 <task+0x124>)
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]

		// command is ready
		return 1;
 8001332:	2301      	movs	r3, #1
 8001334:	e02e      	b.n	8001394 <task+0x118>
	}
	else if (ch == '\b')
 8001336:	79bb      	ldrb	r3, [r7, #6]
 8001338:	2b08      	cmp	r3, #8
 800133a:	d118      	bne.n	800136e <task+0xf2>
	{
		char bs[] = "\b \b";
 800133c:	4b1c      	ldr	r3, [pc, #112]	; (80013b0 <task+0x134>)
 800133e:	603b      	str	r3, [r7, #0]
		_cmdcount--;
 8001340:	4b19      	ldr	r3, [pc, #100]	; (80013a8 <task+0x12c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	3b01      	subs	r3, #1
 8001346:	4a18      	ldr	r2, [pc, #96]	; (80013a8 <task+0x12c>)
 8001348:	6013      	str	r3, [r2, #0]
		_cmdprint--;
 800134a:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <task+0x124>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	3b01      	subs	r3, #1
 8001350:	4a13      	ldr	r2, [pc, #76]	; (80013a0 <task+0x124>)
 8001352:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)bs, strlen(bs), 0xFFFF);
 8001354:	463b      	mov	r3, r7
 8001356:	4618      	mov	r0, r3
 8001358:	f7fe ff44 	bl	80001e4 <strlen>
 800135c:	4603      	mov	r3, r0
 800135e:	b29a      	uxth	r2, r3
 8001360:	4639      	mov	r1, r7
 8001362:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001366:	480d      	ldr	r0, [pc, #52]	; (800139c <task+0x120>)
 8001368:	f005 f92e 	bl	80065c8 <HAL_UART_Transmit>
 800136c:	e011      	b.n	8001392 <task+0x116>
	}
	else
	{
		if (_cmdcount >= MAX_BUFFER_LENGTH)
 800136e:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <task+0x12c>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2b63      	cmp	r3, #99	; 0x63
 8001374:	dd05      	ble.n	8001382 <task+0x106>
		{
			_cmdcount = 0;
 8001376:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <task+0x12c>)
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
			_cmdprint = 0;
 800137c:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <task+0x124>)
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
		}

		_cmdbuffer[_cmdcount++] = ch;
 8001382:	4b09      	ldr	r3, [pc, #36]	; (80013a8 <task+0x12c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	1c5a      	adds	r2, r3, #1
 8001388:	4907      	ldr	r1, [pc, #28]	; (80013a8 <task+0x12c>)
 800138a:	600a      	str	r2, [r1, #0]
 800138c:	79b9      	ldrb	r1, [r7, #6]
 800138e:	4a05      	ldr	r2, [pc, #20]	; (80013a4 <task+0x128>)
 8001390:	54d1      	strb	r1, [r2, r3]
	}

	return 0;
 8001392:	2300      	movs	r3, #0
}
 8001394:	4618      	mov	r0, r3
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20000740 	.word	0x20000740
 80013a0:	20000428 	.word	0x20000428
 80013a4:	200003c0 	.word	0x200003c0
 80013a8:	20000424 	.word	0x20000424
 80013ac:	0800bacc 	.word	0x0800bacc
 80013b0:	00082008 	.word	0x00082008

080013b4 <handle>:
  *
  * @param  none
  * @retval none
  */
 void handle()
{
 80013b4:	b590      	push	{r4, r7, lr}
 80013b6:	b095      	sub	sp, #84	; 0x54
 80013b8:	af02      	add	r7, sp, #8
	char cmd[20];
	char name[20];
	char param[20];

	int params = sscanf((const char*)_cmdbuffer, "%s %s %s", cmd, name,param);
 80013ba:	f107 0118 	add.w	r1, r7, #24
 80013be:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	9300      	str	r3, [sp, #0]
 80013c6:	460b      	mov	r3, r1
 80013c8:	4921      	ldr	r1, [pc, #132]	; (8001450 <handle+0x9c>)
 80013ca:	4822      	ldr	r0, [pc, #136]	; (8001454 <handle+0xa0>)
 80013cc:	f008 fd30 	bl	8009e30 <siscanf>
 80013d0:	6438      	str	r0, [r7, #64]	; 0x40

	if (params == 0)
 80013d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d036      	beq.n	8001446 <handle+0x92>
	{
		return;
	}
	for(int i=0;i<_CommandArrLen;i++){
 80013d8:	2300      	movs	r3, #0
 80013da:	647b      	str	r3, [r7, #68]	; 0x44
 80013dc:	e02a      	b.n	8001434 <handle+0x80>
		if(strcmp(cmd,_commandsArr[i].commandName) == 0){
 80013de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80013e0:	4613      	mov	r3, r2
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	1a9b      	subs	r3, r3, r2
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	4a1b      	ldr	r2, [pc, #108]	; (8001458 <handle+0xa4>)
 80013ea:	441a      	add	r2, r3
 80013ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013f0:	4611      	mov	r1, r2
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7fe feec 	bl	80001d0 <strcmp>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d117      	bne.n	800142e <handle+0x7a>
			_commandsArr[i].func(_commandsArr[i].object, name,param);
 80013fe:	4916      	ldr	r1, [pc, #88]	; (8001458 <handle+0xa4>)
 8001400:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001402:	4613      	mov	r3, r2
 8001404:	00db      	lsls	r3, r3, #3
 8001406:	1a9b      	subs	r3, r3, r2
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	440b      	add	r3, r1
 800140c:	3314      	adds	r3, #20
 800140e:	681c      	ldr	r4, [r3, #0]
 8001410:	4911      	ldr	r1, [pc, #68]	; (8001458 <handle+0xa4>)
 8001412:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001414:	4613      	mov	r3, r2
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	1a9b      	subs	r3, r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	440b      	add	r3, r1
 800141e:	3318      	adds	r3, #24
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	1d3a      	adds	r2, r7, #4
 8001424:	f107 0118 	add.w	r1, r7, #24
 8001428:	4618      	mov	r0, r3
 800142a:	47a0      	blx	r4
			return;
 800142c:	e00c      	b.n	8001448 <handle+0x94>
	for(int i=0;i<_CommandArrLen;i++){
 800142e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001430:	3301      	adds	r3, #1
 8001432:	647b      	str	r3, [r7, #68]	; 0x44
 8001434:	4b09      	ldr	r3, [pc, #36]	; (800145c <handle+0xa8>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800143a:	429a      	cmp	r2, r3
 800143c:	dbcf      	blt.n	80013de <handle+0x2a>
		}

	}
	printf("Invalid command\r\n");
 800143e:	4808      	ldr	r0, [pc, #32]	; (8001460 <handle+0xac>)
 8001440:	f008 fcee 	bl	8009e20 <puts>
 8001444:	e000      	b.n	8001448 <handle+0x94>
		return;
 8001446:	bf00      	nop

}
 8001448:	374c      	adds	r7, #76	; 0x4c
 800144a:	46bd      	mov	sp, r7
 800144c:	bd90      	pop	{r4, r7, pc}
 800144e:	bf00      	nop
 8001450:	0800bad0 	.word	0x0800bad0
 8001454:	200003c0 	.word	0x200003c0
 8001458:	2000042c 	.word	0x2000042c
 800145c:	2000065c 	.word	0x2000065c
 8001460:	0800badc 	.word	0x0800badc

08001464 <Communication_handleTask>:
   *
   * @param  void* argument - a potential argument
   * @retval none
   */
void Communication_handleTask(void *argument)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
	for(;;){
		if(task()){
 800146c:	f7ff ff06 	bl	800127c <task>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d0fa      	beq.n	800146c <Communication_handleTask+0x8>
			handle();
 8001476:	f7ff ff9d 	bl	80013b4 <handle>
		if(task()){
 800147a:	e7f7      	b.n	800146c <Communication_handleTask+0x8>

0800147c <Communication_register>:
  * @param HandlerFunc func - the function that the command used
  * @param void* object - the object of the command
  * @retval none
  */
void Communication_register(char* commandName, HandlerFunc func,void* object)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]

	strncpy(_commandsArr[_CommandArrLen].commandName, commandName, 20);
 8001488:	4b15      	ldr	r3, [pc, #84]	; (80014e0 <Communication_register+0x64>)
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	4613      	mov	r3, r2
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	1a9b      	subs	r3, r3, r2
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	4a13      	ldr	r2, [pc, #76]	; (80014e4 <Communication_register+0x68>)
 8001496:	4413      	add	r3, r2
 8001498:	2214      	movs	r2, #20
 800149a:	68f9      	ldr	r1, [r7, #12]
 800149c:	4618      	mov	r0, r3
 800149e:	f008 fd40 	bl	8009f22 <strncpy>
	_commandsArr[_CommandArrLen].func=func;
 80014a2:	4b0f      	ldr	r3, [pc, #60]	; (80014e0 <Communication_register+0x64>)
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	490f      	ldr	r1, [pc, #60]	; (80014e4 <Communication_register+0x68>)
 80014a8:	4613      	mov	r3, r2
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	1a9b      	subs	r3, r3, r2
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	440b      	add	r3, r1
 80014b2:	3314      	adds	r3, #20
 80014b4:	68ba      	ldr	r2, [r7, #8]
 80014b6:	601a      	str	r2, [r3, #0]
	_commandsArr[_CommandArrLen].object=object;
 80014b8:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <Communication_register+0x64>)
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	4909      	ldr	r1, [pc, #36]	; (80014e4 <Communication_register+0x68>)
 80014be:	4613      	mov	r3, r2
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	1a9b      	subs	r3, r3, r2
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	440b      	add	r3, r1
 80014c8:	3318      	adds	r3, #24
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	601a      	str	r2, [r3, #0]
	_CommandArrLen++;
 80014ce:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <Communication_register+0x64>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	3301      	adds	r3, #1
 80014d4:	4a02      	ldr	r2, [pc, #8]	; (80014e0 <Communication_register+0x64>)
 80014d6:	6013      	str	r3, [r2, #0]
}
 80014d8:	bf00      	nop
 80014da:	3710      	adds	r7, #16
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	2000065c 	.word	0x2000065c
 80014e4:	2000042c 	.word	0x2000042c

080014e8 <pageSelect>:
 *
 * @param  FLASH_EraseInitTypeDef* flash - the flash
 * @retval none
 */
static void pageSelect (FLASH_EraseInitTypeDef * flash)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
	flash->TypeErase = FLASH_TYPEERASE_PAGES;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
	flash->Banks = FLASH_BANK_2;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2202      	movs	r2, #2
 80014fa:	605a      	str	r2, [r3, #4]
	flash->Page = 256;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001502:	609a      	str	r2, [r3, #8]
	flash->NbPages = 1;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2201      	movs	r2, #1
 8001508:	60da      	str	r2, [r3, #12]
}
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
	...

08001518 <Flash_erase>:
 *
 * @param  none
 * @retval none
 */
void Flash_erase()
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef page;
	pageSelect(&page);
 800151e:	463b      	mov	r3, r7
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff ffe1 	bl	80014e8 <pageSelect>

	if (HAL_FLASHEx_Erase(&page, &pageerror) != HAL_OK) {
 8001526:	463b      	mov	r3, r7
 8001528:	4906      	ldr	r1, [pc, #24]	; (8001544 <Flash_erase+0x2c>)
 800152a:	4618      	mov	r0, r3
 800152c:	f001 fa1a 	bl	8002964 <HAL_FLASHEx_Erase>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d002      	beq.n	800153c <Flash_erase+0x24>
		printf("Erase failed\r\n");
 8001536:	4804      	ldr	r0, [pc, #16]	; (8001548 <Flash_erase+0x30>)
 8001538:	f008 fc72 	bl	8009e20 <puts>
	}
}
 800153c:	bf00      	nop
 800153e:	3710      	adds	r7, #16
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	20000660 	.word	0x20000660
 8001548:	0800baf0 	.word	0x0800baf0

0800154c <Flash_program>:
 * @param  uint64_t* array - the data
 * @param  uint32_t size - the data size
 * @retval none
 */
void Flash_program(uint64_t* array,uint32_t size)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]

	for (int i = 0 ; i<size/8; i++)
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	e018      	b.n	800158e <Flash_program+0x42>
	{
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address+(i*8), *(array+i)) != HAL_OK) {
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	00db      	lsls	r3, r3, #3
 8001560:	461a      	mov	r2, r3
 8001562:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <Flash_program+0x58>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	18d1      	adds	r1, r2, r3
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	00db      	lsls	r3, r3, #3
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	4413      	add	r3, r2
 8001570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001574:	2000      	movs	r0, #0
 8001576:	f001 f8a5 	bl	80026c4 <HAL_FLASH_Program>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d003      	beq.n	8001588 <Flash_program+0x3c>
			printf("Program failed\r\n");
 8001580:	4809      	ldr	r0, [pc, #36]	; (80015a8 <Flash_program+0x5c>)
 8001582:	f008 fc4d 	bl	8009e20 <puts>
			break;
 8001586:	e008      	b.n	800159a <Flash_program+0x4e>
	for (int i = 0 ; i<size/8; i++)
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	3301      	adds	r3, #1
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	08da      	lsrs	r2, r3, #3
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	429a      	cmp	r2, r3
 8001596:	d8e1      	bhi.n	800155c <Flash_program+0x10>
		}
	}
}
 8001598:	bf00      	nop
 800159a:	bf00      	nop
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000000 	.word	0x20000000
 80015a8:	0800bb00 	.word	0x0800bb00

080015ac <Led_init>:
 * @param uint16_t gpioPin - the pin of the led
 * @param uint16_t delay - the led delay
 * @retval none
 */
void Led_init(Led* led, GPIO_TypeDef* gpioPort, uint16_t gpioPin,uint16_t delay)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	4611      	mov	r1, r2
 80015b8:	461a      	mov	r2, r3
 80015ba:	460b      	mov	r3, r1
 80015bc:	80fb      	strh	r3, [r7, #6]
 80015be:	4613      	mov	r3, r2
 80015c0:	80bb      	strh	r3, [r7, #4]

	led->gpioPort = gpioPort;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	68ba      	ldr	r2, [r7, #8]
 80015c6:	601a      	str	r2, [r3, #0]
	led->gpioPin = gpioPin;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	88fa      	ldrh	r2, [r7, #6]
 80015cc:	809a      	strh	r2, [r3, #4]
	led->delay = delay;
 80015ce:	88ba      	ldrh	r2, [r7, #4]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	609a      	str	r2, [r3, #8]
	led->ledState = LED_STATE_OFF;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	2200      	movs	r2, #0
 80015d8:	731a      	strb	r2, [r3, #12]
}
 80015da:	bf00      	nop
 80015dc:	3714      	adds	r7, #20
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <Led_changeToBlink>:
 *
 *
 * @param  Led* led- the led
 * @retval none
 */
void Led_changeToBlink(Led* led){
 80015e6:	b480      	push	{r7}
 80015e8:	b083      	sub	sp, #12
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
	led->ledState = LED_STATE_BLINK;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2202      	movs	r2, #2
 80015f2:	731a      	strb	r2, [r3, #12]
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <Led_changeToOff>:
 *
 *
 * @param  Led* led- the led
 * @retval none
 */
void Led_changeToOff(Led* led){
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
	led->ledState = LED_STATE_OFF;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2200      	movs	r2, #0
 800160c:	731a      	strb	r2, [r3, #12]
}
 800160e:	bf00      	nop
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <Led_blinkTask>:
 *
 * @param  void* argument - a potentioal argument(led)
 * @retval none
 */
void Led_blinkTask(void *argument)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b084      	sub	sp, #16
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
	Led* led = (Led*)argument;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	60fb      	str	r3, [r7, #12]
	for(;;){
		if(led->ledState == LED_STATE_BLINK){
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	7b1b      	ldrb	r3, [r3, #12]
 800162a:	2b02      	cmp	r3, #2
 800162c:	d10d      	bne.n	800164a <Led_blinkTask+0x30>
			HAL_GPIO_TogglePin(led->gpioPort, led->gpioPin);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	889b      	ldrh	r3, [r3, #4]
 8001636:	4619      	mov	r1, r3
 8001638:	4610      	mov	r0, r2
 800163a:	f001 fcb1 	bl	8002fa0 <HAL_GPIO_TogglePin>
			osDelay(led->delay);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	4618      	mov	r0, r3
 8001644:	f005 feae 	bl	80073a4 <osDelay>
 8001648:	e7ed      	b.n	8001626 <Led_blinkTask+0xc>
		}
		else if(led->ledState == LED_STATE_OFF){
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	7b1b      	ldrb	r3, [r3, #12]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1e9      	bne.n	8001626 <Led_blinkTask+0xc>
			HAL_GPIO_WritePin(led->gpioPort, led->gpioPin, 0);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	6818      	ldr	r0, [r3, #0]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	889b      	ldrh	r3, [r3, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	4619      	mov	r1, r3
 800165e:	f001 fc87 	bl	8002f70 <HAL_GPIO_WritePin>
		if(led->ledState == LED_STATE_BLINK){
 8001662:	e7e0      	b.n	8001626 <Led_blinkTask+0xc>

08001664 <MyMain>:
Led ledR;
Led ledB;
Button btn1;
Button btn2;
void MyMain()
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
	printf("----------Commands List----------\r\n");
 8001668:	4829      	ldr	r0, [pc, #164]	; (8001710 <MyMain+0xac>)
 800166a:	f008 fbd9 	bl	8009e20 <puts>
	printf(" 1.Command \033[33mlist \033[0m to print all existing alarms.\r\n");
 800166e:	4829      	ldr	r0, [pc, #164]	; (8001714 <MyMain+0xb0>)
 8001670:	f008 fbd6 	bl	8009e20 <puts>
	printf(" 2.Command \033[33mdate hours:min:sec-weekDay-day/month/year\033[0m to sets the current date.\r\n");
 8001674:	4828      	ldr	r0, [pc, #160]	; (8001718 <MyMain+0xb4>)
 8001676:	f008 fbd3 	bl	8009e20 <puts>
	printf(" 3.Command \033[33madd alarmName hours:min:sec-weekDay-day/month/year\033[0m to add alarm.\r\n");
 800167a:	4828      	ldr	r0, [pc, #160]	; (800171c <MyMain+0xb8>)
 800167c:	f008 fbd0 	bl	8009e20 <puts>
	printf(" 4.Command \033[33mdel alarmName\033[0m to delete current alarm.\r\n");
 8001680:	4827      	ldr	r0, [pc, #156]	; (8001720 <MyMain+0xbc>)
 8001682:	f008 fbcd 	bl	8009e20 <puts>
	printf(" 5.Command \033[33mstop alarmName\033[0m to stop current alarm.\r\n");
 8001686:	4827      	ldr	r0, [pc, #156]	; (8001724 <MyMain+0xc0>)
 8001688:	f008 fbca 	bl	8009e20 <puts>
	printf(" 6.Command \033[33msnooze alarmName\033[0m to snooze current alarm.\r\n");
 800168c:	4826      	ldr	r0, [pc, #152]	; (8001728 <MyMain+0xc4>)
 800168e:	f008 fbc7 	bl	8009e20 <puts>
	printf(" 7.Command \033[33mclearall\033[0m to remove all alarms.\r\n");
 8001692:	4826      	ldr	r0, [pc, #152]	; (800172c <MyMain+0xc8>)
 8001694:	f008 fbc4 	bl	8009e20 <puts>
	printf(" 8.Command \033[33medit alarmName hours:min:sec-weekDay-day/month/year\033[0m to edit time.\r\n");
 8001698:	4825      	ldr	r0, [pc, #148]	; (8001730 <MyMain+0xcc>)
 800169a:	f008 fbc1 	bl	8009e20 <puts>
	printf(" 9.Command \033[33medit alarmName melodyNumber\033[0m to edit melody.\r\n");
 800169e:	4825      	ldr	r0, [pc, #148]	; (8001734 <MyMain+0xd0>)
 80016a0:	f008 fbbe 	bl	8009e20 <puts>
	printf("10.Command \033[33medit alarmName repNumber\033[0m to edit repetetion.\r\n");
 80016a4:	4824      	ldr	r0, [pc, #144]	; (8001738 <MyMain+0xd4>)
 80016a6:	f008 fbbb 	bl	8009e20 <puts>
	printf("11.Command \033[33melody \033[0m to print all all available melodies.\r\n");
 80016aa:	4824      	ldr	r0, [pc, #144]	; (800173c <MyMain+0xd8>)
 80016ac:	f008 fbb8 	bl	8009e20 <puts>
	printf("---------------------------------\r\n");
 80016b0:	4823      	ldr	r0, [pc, #140]	; (8001740 <MyMain+0xdc>)
 80016b2:	f008 fbb5 	bl	8009e20 <puts>



	Alarm_flashToAlarms();
 80016b6:	f7ff fa41 	bl	8000b3c <Alarm_flashToAlarms>
	Cli_init();
 80016ba:	f7ff fd85 	bl	80011c8 <Cli_init>
	Rtc_init(&rtc1, &hi2c1, 0xD0);
 80016be:	22d0      	movs	r2, #208	; 0xd0
 80016c0:	4920      	ldr	r1, [pc, #128]	; (8001744 <MyMain+0xe0>)
 80016c2:	4821      	ldr	r0, [pc, #132]	; (8001748 <MyMain+0xe4>)
 80016c4:	f000 f84e 	bl	8001764 <Rtc_init>
	Rtc_setTime(&rtc1);
 80016c8:	481f      	ldr	r0, [pc, #124]	; (8001748 <MyMain+0xe4>)
 80016ca:	f000 f999 	bl	8001a00 <Rtc_setTime>
	Buzzer_init(&bz1);
 80016ce:	481f      	ldr	r0, [pc, #124]	; (800174c <MyMain+0xe8>)
 80016d0:	f7ff faa3 	bl	8000c1a <Buzzer_init>
	Led_init(&ledR, LED2_GPIO_Port, LED2_Pin,50);
 80016d4:	2332      	movs	r3, #50	; 0x32
 80016d6:	2240      	movs	r2, #64	; 0x40
 80016d8:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80016dc:	481c      	ldr	r0, [pc, #112]	; (8001750 <MyMain+0xec>)
 80016de:	f7ff ff65 	bl	80015ac <Led_init>
	Led_init(&ledB, LED1_GPIO_Port, LED1_Pin,300);
 80016e2:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80016e6:	2220      	movs	r2, #32
 80016e8:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80016ec:	4819      	ldr	r0, [pc, #100]	; (8001754 <MyMain+0xf0>)
 80016ee:	f7ff ff5d 	bl	80015ac <Led_init>
	Button_init(&btn1, SW1_GPIO_Port, SW1_Pin);
 80016f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016f6:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80016fa:	4817      	ldr	r0, [pc, #92]	; (8001758 <MyMain+0xf4>)
 80016fc:	f7ff fa52 	bl	8000ba4 <Button_init>
	Button_init(&btn2, SW2_GPIO_Port, SW2_Pin);
 8001700:	2208      	movs	r2, #8
 8001702:	4916      	ldr	r1, [pc, #88]	; (800175c <MyMain+0xf8>)
 8001704:	4816      	ldr	r0, [pc, #88]	; (8001760 <MyMain+0xfc>)
 8001706:	f7ff fa4d 	bl	8000ba4 <Button_init>

}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	0800bb10 	.word	0x0800bb10
 8001714:	0800bb34 	.word	0x0800bb34
 8001718:	0800bb70 	.word	0x0800bb70
 800171c:	0800bbcc 	.word	0x0800bbcc
 8001720:	0800bc24 	.word	0x0800bc24
 8001724:	0800bc60 	.word	0x0800bc60
 8001728:	0800bc9c 	.word	0x0800bc9c
 800172c:	0800bcdc 	.word	0x0800bcdc
 8001730:	0800bd10 	.word	0x0800bd10
 8001734:	0800bd68 	.word	0x0800bd68
 8001738:	0800bdac 	.word	0x0800bdac
 800173c:	0800bdf0 	.word	0x0800bdf0
 8001740:	0800be34 	.word	0x0800be34
 8001744:	200006a0 	.word	0x200006a0
 8001748:	20000668 	.word	0x20000668
 800174c:	20000664 	.word	0x20000664
 8001750:	20000670 	.word	0x20000670
 8001754:	20000680 	.word	0x20000680
 8001758:	20000690 	.word	0x20000690
 800175c:	48000400 	.word	0x48000400
 8001760:	20000698 	.word	0x20000698

08001764 <Rtc_init>:
 * @param  I2C_HandleTypeDef* hi2c - the hi2c of rtc
 * @param  uint8_t devAddr - the address of rtc
 * @retval none
 */
void Rtc_init(Rtc * rtc, I2C_HandleTypeDef * hi2c, uint32_t devAddr)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
	rtc->hi2c = hi2c;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	68ba      	ldr	r2, [r7, #8]
 8001774:	601a      	str	r2, [r3, #0]
	rtc->devAddr = devAddr;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	b2da      	uxtb	r2, r3
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	711a      	strb	r2, [r3, #4]
}
 800177e:	bf00      	nop
 8001780:	3714      	adds	r7, #20
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <bcdToInt>:
 *
 * @param  uint8_t bcd - the number in bcd
 * @retval the number in int
 */
static int bcdToInt(uint8_t bcd)
{
 800178a:	b480      	push	{r7}
 800178c:	b083      	sub	sp, #12
 800178e:	af00      	add	r7, sp, #0
 8001790:	4603      	mov	r3, r0
 8001792:	71fb      	strb	r3, [r7, #7]
	return (bcd >> 4) * 10 + (bcd & 0x0F);
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	091b      	lsrs	r3, r3, #4
 8001798:	b2db      	uxtb	r3, r3
 800179a:	461a      	mov	r2, r3
 800179c:	4613      	mov	r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	4413      	add	r3, r2
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	461a      	mov	r2, r3
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	f003 030f 	and.w	r3, r3, #15
 80017ac:	4413      	add	r3, r2
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
	...

080017bc <intToBcd>:
 * @param int minVal - the minimum that value can be
 * @param int maxVal - the maximum that value can be
 * @retval 0 if value isn't in range, the number in bcd if it is in range
 */
static uint8_t intToBcd(int value, int minVal, int maxVal)
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
	if (value < minVal || value > maxVal) {
 80017c8:	68fa      	ldr	r2, [r7, #12]
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	db03      	blt.n	80017d8 <intToBcd+0x1c>
 80017d0:	68fa      	ldr	r2, [r7, #12]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	dd01      	ble.n	80017dc <intToBcd+0x20>
		return 0;
 80017d8:	2300      	movs	r3, #0
 80017da:	e018      	b.n	800180e <intToBcd+0x52>
	}
	return ((value / 10) << 4) | (value % 10);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	4a0f      	ldr	r2, [pc, #60]	; (800181c <intToBcd+0x60>)
 80017e0:	fb82 1203 	smull	r1, r2, r2, r3
 80017e4:	1092      	asrs	r2, r2, #2
 80017e6:	17db      	asrs	r3, r3, #31
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	011b      	lsls	r3, r3, #4
 80017ec:	b258      	sxtb	r0, r3
 80017ee:	68fa      	ldr	r2, [r7, #12]
 80017f0:	4b0a      	ldr	r3, [pc, #40]	; (800181c <intToBcd+0x60>)
 80017f2:	fb83 1302 	smull	r1, r3, r3, r2
 80017f6:	1099      	asrs	r1, r3, #2
 80017f8:	17d3      	asrs	r3, r2, #31
 80017fa:	1ac9      	subs	r1, r1, r3
 80017fc:	460b      	mov	r3, r1
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	440b      	add	r3, r1
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	1ad1      	subs	r1, r2, r3
 8001806:	b24b      	sxtb	r3, r1
 8001808:	4303      	orrs	r3, r0
 800180a:	b25b      	sxtb	r3, r3
 800180c:	b2db      	uxtb	r3, r3
}
 800180e:	4618      	mov	r0, r3
 8001810:	3714      	adds	r7, #20
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	66666667 	.word	0x66666667

08001820 <Rtc_getTime>:
 *@param Rtc* rtc- the rtc
 * @param  DateTime* dateTime - to insert the time
 * @retval none
 */
void Rtc_getTime(Rtc * rtc, DateTime * dateTime)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b088      	sub	sp, #32
 8001824:	af04      	add	r7, sp, #16
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
	uint8_t buffer[RTC_DATE_TIME_SIZE];
	HAL_I2C_Mem_Read(rtc->hi2c, rtc->devAddr, 0, 1, buffer, RTC_DATE_TIME_SIZE, 0xFF);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6818      	ldr	r0, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	791b      	ldrb	r3, [r3, #4]
 8001832:	b299      	uxth	r1, r3
 8001834:	23ff      	movs	r3, #255	; 0xff
 8001836:	9302      	str	r3, [sp, #8]
 8001838:	2307      	movs	r3, #7
 800183a:	9301      	str	r3, [sp, #4]
 800183c:	f107 0308 	add.w	r3, r7, #8
 8001840:	9300      	str	r3, [sp, #0]
 8001842:	2301      	movs	r3, #1
 8001844:	2200      	movs	r2, #0
 8001846:	f001 fd69 	bl	800331c <HAL_I2C_Mem_Read>

	// remove stop bit if set
	buffer[0] &= ~RTC_START_STOP;
 800184a:	7a3b      	ldrb	r3, [r7, #8]
 800184c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001850:	b2db      	uxtb	r3, r3
 8001852:	723b      	strb	r3, [r7, #8]
	dateTime->sec = bcdToInt(buffer[0]);
 8001854:	7a3b      	ldrb	r3, [r7, #8]
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff ff97 	bl	800178a <bcdToInt>
 800185c:	4602      	mov	r2, r0
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	601a      	str	r2, [r3, #0]
	dateTime->min = bcdToInt(buffer[1]);
 8001862:	7a7b      	ldrb	r3, [r7, #9]
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff ff90 	bl	800178a <bcdToInt>
 800186a:	4602      	mov	r2, r0
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	605a      	str	r2, [r3, #4]
	dateTime->hours = bcdToInt(buffer[2]);
 8001870:	7abb      	ldrb	r3, [r7, #10]
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff ff89 	bl	800178a <bcdToInt>
 8001878:	4602      	mov	r2, r0
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	609a      	str	r2, [r3, #8]
	dateTime->weekDay = buffer[3] & 0x07;
 800187e:	7afb      	ldrb	r3, [r7, #11]
 8001880:	f003 0207 	and.w	r2, r3, #7
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	60da      	str	r2, [r3, #12]
	dateTime->day = bcdToInt(buffer[4]);
 8001888:	7b3b      	ldrb	r3, [r7, #12]
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff ff7d 	bl	800178a <bcdToInt>
 8001890:	4602      	mov	r2, r0
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	611a      	str	r2, [r3, #16]
	dateTime->month = bcdToInt(buffer[5]);
 8001896:	7b7b      	ldrb	r3, [r7, #13]
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff ff76 	bl	800178a <bcdToInt>
 800189e:	4602      	mov	r2, r0
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	615a      	str	r2, [r3, #20]
	dateTime->year = bcdToInt(buffer[6]);
 80018a4:	7bbb      	ldrb	r3, [r7, #14]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff ff6f 	bl	800178a <bcdToInt>
 80018ac:	4602      	mov	r2, r0
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	619a      	str	r2, [r3, #24]
	
}
 80018b2:	bf00      	nop
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
	...

080018bc <Rtc_getSeconds>:
 *
 * @param  Rtc* rtc - the rtc
 * @retval the rtc in seconds
 */
uint32_t Rtc_getSeconds(Rtc * rtc)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08a      	sub	sp, #40	; 0x28
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
	// calculate seconds from 00:00:00 1/1/2020
	DateTime dateTime;
	Rtc_getTime(rtc, &dateTime);
 80018c4:	f107 0308 	add.w	r3, r7, #8
 80018c8:	4619      	mov	r1, r3
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f7ff ffa8 	bl	8001820 <Rtc_getTime>

	uint32_t seconds = dateTime.sec +
 80018d0:	68bb      	ldr	r3, [r7, #8]
			dateTime.min * SecondsInMin +
 80018d2:	4619      	mov	r1, r3
			dateTime.hours * SecondsInHour +
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	461a      	mov	r2, r3
 80018d8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80018dc:	fb03 f202 	mul.w	r2, r3, r2
			dateTime.min * SecondsInMin +
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	4618      	mov	r0, r3
 80018e4:	233c      	movs	r3, #60	; 0x3c
 80018e6:	fb00 f303 	mul.w	r3, r0, r3
 80018ea:	4413      	add	r3, r2
 80018ec:	18ca      	adds	r2, r1, r3
			dateTime.day * SecondsInDay +
			_daysUntilMonth[dateTime.month - 1] * SecondsInDay +
			dateTime.year * DaysInYear * SecondsInDay;
 80018ee:	6a3b      	ldr	r3, [r7, #32]
 80018f0:	4619      	mov	r1, r3
 80018f2:	f240 136d 	movw	r3, #365	; 0x16d
 80018f6:	fb03 f101 	mul.w	r1, r3, r1
			_daysUntilMonth[dateTime.month - 1] * SecondsInDay +
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	3b01      	subs	r3, #1
 80018fe:	4814      	ldr	r0, [pc, #80]	; (8001950 <Rtc_getSeconds+0x94>)
 8001900:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001904:	4618      	mov	r0, r3
			dateTime.day * SecondsInDay +
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	4403      	add	r3, r0
			_daysUntilMonth[dateTime.month - 1] * SecondsInDay +
 800190a:	440b      	add	r3, r1
 800190c:	4911      	ldr	r1, [pc, #68]	; (8001954 <Rtc_getSeconds+0x98>)
 800190e:	fb01 f303 	mul.w	r3, r1, r3
	uint32_t seconds = dateTime.sec +
 8001912:	4413      	add	r3, r2
 8001914:	627b      	str	r3, [r7, #36]	; 0x24
	if (dateTime.year % 4 == 0 && dateTime.month > 2) {
 8001916:	6a3b      	ldr	r3, [r7, #32]
 8001918:	f003 0303 	and.w	r3, r3, #3
 800191c:	2b00      	cmp	r3, #0
 800191e:	d106      	bne.n	800192e <Rtc_getSeconds+0x72>
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	2b02      	cmp	r3, #2
 8001924:	dd03      	ble.n	800192e <Rtc_getSeconds+0x72>
		// if current year is a leap year and month is after February
		// add seconds for February 29
		seconds += SecondsInDay;
 8001926:	4a0b      	ldr	r2, [pc, #44]	; (8001954 <Rtc_getSeconds+0x98>)
 8001928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192a:	4413      	add	r3, r2
 800192c:	627b      	str	r3, [r7, #36]	; 0x24
	}
	// add seconds for all previous leap years
	seconds += (dateTime.year / 4) * SecondsInDay;
 800192e:	6a3b      	ldr	r3, [r7, #32]
 8001930:	2b00      	cmp	r3, #0
 8001932:	da00      	bge.n	8001936 <Rtc_getSeconds+0x7a>
 8001934:	3303      	adds	r3, #3
 8001936:	109b      	asrs	r3, r3, #2
 8001938:	461a      	mov	r2, r3
 800193a:	4b06      	ldr	r3, [pc, #24]	; (8001954 <Rtc_getSeconds+0x98>)
 800193c:	fb02 f303 	mul.w	r3, r2, r3
 8001940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001942:	4413      	add	r3, r2
 8001944:	627b      	str	r3, [r7, #36]	; 0x24
	return seconds;
 8001946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001948:	4618      	mov	r0, r3
 800194a:	3728      	adds	r7, #40	; 0x28
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	0800bf48 	.word	0x0800bf48
 8001954:	00015180 	.word	0x00015180

08001958 <Rtc_convertToSec>:
 *
 * @param  DateTime * dateTime - the time
 * @retval the time in seconds
 */
uint32_t Rtc_convertToSec(DateTime * dateTime)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
	// calculate seconds from 00:00:00 1/1/2020
	uint32_t seconds = dateTime->sec +
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
			dateTime->min * SecondsInMin +
 8001964:	4619      	mov	r1, r3
			dateTime->hours * SecondsInHour +
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	461a      	mov	r2, r3
 800196c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001970:	fb03 f202 	mul.w	r2, r3, r2
			dateTime->min * SecondsInMin +
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	4618      	mov	r0, r3
 800197a:	233c      	movs	r3, #60	; 0x3c
 800197c:	fb00 f303 	mul.w	r3, r0, r3
 8001980:	4413      	add	r3, r2
 8001982:	18ca      	adds	r2, r1, r3
			dateTime->day * SecondsInDay +
			_daysUntilMonth[dateTime->month - 1] * SecondsInDay +
			dateTime->year * DaysInYear * SecondsInDay;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	4619      	mov	r1, r3
 800198a:	f240 136d 	movw	r3, #365	; 0x16d
 800198e:	fb03 f101 	mul.w	r1, r3, r1
			_daysUntilMonth[dateTime->month - 1] * SecondsInDay +
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	695b      	ldr	r3, [r3, #20]
 8001996:	3b01      	subs	r3, #1
 8001998:	4817      	ldr	r0, [pc, #92]	; (80019f8 <Rtc_convertToSec+0xa0>)
 800199a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800199e:	4618      	mov	r0, r3
			dateTime->day * SecondsInDay +
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	691b      	ldr	r3, [r3, #16]
 80019a4:	4403      	add	r3, r0
			_daysUntilMonth[dateTime->month - 1] * SecondsInDay +
 80019a6:	440b      	add	r3, r1
 80019a8:	4914      	ldr	r1, [pc, #80]	; (80019fc <Rtc_convertToSec+0xa4>)
 80019aa:	fb01 f303 	mul.w	r3, r1, r3
	uint32_t seconds = dateTime->sec +
 80019ae:	4413      	add	r3, r2
 80019b0:	60fb      	str	r3, [r7, #12]
	if (dateTime->year % 4 == 0 && dateTime->month > 2) {
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	f003 0303 	and.w	r3, r3, #3
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d107      	bne.n	80019ce <Rtc_convertToSec+0x76>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	dd03      	ble.n	80019ce <Rtc_convertToSec+0x76>
		// if current year is a leap year and month is after February
		// add seconds for February 29
		seconds += SecondsInDay;
 80019c6:	4a0d      	ldr	r2, [pc, #52]	; (80019fc <Rtc_convertToSec+0xa4>)
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	4413      	add	r3, r2
 80019cc:	60fb      	str	r3, [r7, #12]
	}
	// add seconds for all previous leap years
	seconds += (dateTime->year / 4) * SecondsInDay;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	da00      	bge.n	80019d8 <Rtc_convertToSec+0x80>
 80019d6:	3303      	adds	r3, #3
 80019d8:	109b      	asrs	r3, r3, #2
 80019da:	461a      	mov	r2, r3
 80019dc:	4b07      	ldr	r3, [pc, #28]	; (80019fc <Rtc_convertToSec+0xa4>)
 80019de:	fb02 f303 	mul.w	r3, r2, r3
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	4413      	add	r3, r2
 80019e6:	60fb      	str	r3, [r7, #12]
	return seconds;
 80019e8:	68fb      	ldr	r3, [r7, #12]
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3714      	adds	r7, #20
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	0800bf48 	.word	0x0800bf48
 80019fc:	00015180 	.word	0x00015180

08001a00 <Rtc_setTime>:
 *
 * @param  DateTime* dateTime - to set the time
 * @retval none
 */
void Rtc_setTime(Rtc * rtc)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b088      	sub	sp, #32
 8001a04:	af04      	add	r7, sp, #16
 8001a06:	6078      	str	r0, [r7, #4]
	uint8_t buffer[RTC_DATE_TIME_SIZE];

	buffer[0] = intToBcd(0, 0, 59);
 8001a08:	223b      	movs	r2, #59	; 0x3b
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	f7ff fed5 	bl	80017bc <intToBcd>
 8001a12:	4603      	mov	r3, r0
 8001a14:	723b      	strb	r3, [r7, #8]
	buffer[1] = intToBcd(0, 0, 59);
 8001a16:	223b      	movs	r2, #59	; 0x3b
 8001a18:	2100      	movs	r1, #0
 8001a1a:	2000      	movs	r0, #0
 8001a1c:	f7ff fece 	bl	80017bc <intToBcd>
 8001a20:	4603      	mov	r3, r0
 8001a22:	727b      	strb	r3, [r7, #9]
	buffer[2] = intToBcd(0, 0, 24);
 8001a24:	2218      	movs	r2, #24
 8001a26:	2100      	movs	r1, #0
 8001a28:	2000      	movs	r0, #0
 8001a2a:	f7ff fec7 	bl	80017bc <intToBcd>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	72bb      	strb	r3, [r7, #10]
	buffer[3] = 0 < 1 || 0 > 7 ? 0 : 1;
 8001a32:	2300      	movs	r3, #0
 8001a34:	72fb      	strb	r3, [r7, #11]
	buffer[4] = intToBcd(1, 1, 31);
 8001a36:	221f      	movs	r2, #31
 8001a38:	2101      	movs	r1, #1
 8001a3a:	2001      	movs	r0, #1
 8001a3c:	f7ff febe 	bl	80017bc <intToBcd>
 8001a40:	4603      	mov	r3, r0
 8001a42:	733b      	strb	r3, [r7, #12]
	buffer[5] = intToBcd(1, 1, 12);
 8001a44:	220c      	movs	r2, #12
 8001a46:	2101      	movs	r1, #1
 8001a48:	2001      	movs	r0, #1
 8001a4a:	f7ff feb7 	bl	80017bc <intToBcd>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	737b      	strb	r3, [r7, #13]
	buffer[6] = intToBcd(1, 1, 99);
 8001a52:	2263      	movs	r2, #99	; 0x63
 8001a54:	2101      	movs	r1, #1
 8001a56:	2001      	movs	r0, #1
 8001a58:	f7ff feb0 	bl	80017bc <intToBcd>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(rtc->hi2c, rtc->devAddr, 0, 1, buffer, RTC_DATE_TIME_SIZE, 0xFF);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6818      	ldr	r0, [r3, #0]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	791b      	ldrb	r3, [r3, #4]
 8001a68:	b299      	uxth	r1, r3
 8001a6a:	23ff      	movs	r3, #255	; 0xff
 8001a6c:	9302      	str	r3, [sp, #8]
 8001a6e:	2307      	movs	r3, #7
 8001a70:	9301      	str	r3, [sp, #4]
 8001a72:	f107 0308 	add.w	r3, r7, #8
 8001a76:	9300      	str	r3, [sp, #0]
 8001a78:	2301      	movs	r3, #1
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f001 fb3a 	bl	80030f4 <HAL_I2C_Mem_Write>
}
 8001a80:	bf00      	nop
 8001a82:	3710      	adds	r7, #16
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a8c:	f000 fcf8 	bl	8002480 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a90:	f000 f888 	bl	8001ba4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a94:	f000 f9a4 	bl	8001de0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001a98:	f000 f972 	bl	8001d80 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001a9c:	f000 f914 	bl	8001cc8 <MX_TIM3_Init>
  MX_I2C1_Init();
 8001aa0:	f000 f8d2 	bl	8001c48 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  MyMain();
 8001aa4:	f7ff fdde 	bl	8001664 <MyMain>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001aa8:	f005 fba0 	bl	80071ec <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTas */
  defaultTasHandle = osThreadNew(Default, NULL, &defaultTas_attributes);
 8001aac:	4a21      	ldr	r2, [pc, #132]	; (8001b34 <main+0xac>)
 8001aae:	2100      	movs	r1, #0
 8001ab0:	4821      	ldr	r0, [pc, #132]	; (8001b38 <main+0xb0>)
 8001ab2:	f005 fbe5 	bl	8007280 <osThreadNew>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	4a20      	ldr	r2, [pc, #128]	; (8001b3c <main+0xb4>)
 8001aba:	6013      	str	r3, [r2, #0]

  /* creation of buzzerTask */
  buzzerTaskHandle = osThreadNew(Buzzer_playTask, (void*) &bz1, &buzzerTask_attributes);
 8001abc:	4a20      	ldr	r2, [pc, #128]	; (8001b40 <main+0xb8>)
 8001abe:	4921      	ldr	r1, [pc, #132]	; (8001b44 <main+0xbc>)
 8001ac0:	4821      	ldr	r0, [pc, #132]	; (8001b48 <main+0xc0>)
 8001ac2:	f005 fbdd 	bl	8007280 <osThreadNew>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	4a20      	ldr	r2, [pc, #128]	; (8001b4c <main+0xc4>)
 8001aca:	6013      	str	r3, [r2, #0]

  /* creation of comTask */
  comTaskHandle = osThreadNew(Communication_handleTask, NULL, &comTask_attributes);
 8001acc:	4a20      	ldr	r2, [pc, #128]	; (8001b50 <main+0xc8>)
 8001ace:	2100      	movs	r1, #0
 8001ad0:	4820      	ldr	r0, [pc, #128]	; (8001b54 <main+0xcc>)
 8001ad2:	f005 fbd5 	bl	8007280 <osThreadNew>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	4a1f      	ldr	r2, [pc, #124]	; (8001b58 <main+0xd0>)
 8001ada:	6013      	str	r3, [r2, #0]

  /* creation of alarmTask */
  alarmTaskHandle = osThreadNew(Alarm_startTask, (void*) &rtc1, &alarmTask_attributes);
 8001adc:	4a1f      	ldr	r2, [pc, #124]	; (8001b5c <main+0xd4>)
 8001ade:	4920      	ldr	r1, [pc, #128]	; (8001b60 <main+0xd8>)
 8001ae0:	4820      	ldr	r0, [pc, #128]	; (8001b64 <main+0xdc>)
 8001ae2:	f005 fbcd 	bl	8007280 <osThreadNew>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	4a1f      	ldr	r2, [pc, #124]	; (8001b68 <main+0xe0>)
 8001aea:	6013      	str	r3, [r2, #0]

  /* creation of blinkTaskRed */
  blinkTaskRedHandle = osThreadNew(Led_blinkTask, (void*) &ledR, &blinkTaskRed_attributes);
 8001aec:	4a1f      	ldr	r2, [pc, #124]	; (8001b6c <main+0xe4>)
 8001aee:	4920      	ldr	r1, [pc, #128]	; (8001b70 <main+0xe8>)
 8001af0:	4820      	ldr	r0, [pc, #128]	; (8001b74 <main+0xec>)
 8001af2:	f005 fbc5 	bl	8007280 <osThreadNew>
 8001af6:	4603      	mov	r3, r0
 8001af8:	4a1f      	ldr	r2, [pc, #124]	; (8001b78 <main+0xf0>)
 8001afa:	6013      	str	r3, [r2, #0]

  /* creation of blinkTaskBlue */
  blinkTaskBlueHandle = osThreadNew(Led_blinkTask, (void*) &ledB, &blinkTaskBlue_attributes);
 8001afc:	4a1f      	ldr	r2, [pc, #124]	; (8001b7c <main+0xf4>)
 8001afe:	4920      	ldr	r1, [pc, #128]	; (8001b80 <main+0xf8>)
 8001b00:	481c      	ldr	r0, [pc, #112]	; (8001b74 <main+0xec>)
 8001b02:	f005 fbbd 	bl	8007280 <osThreadNew>
 8001b06:	4603      	mov	r3, r0
 8001b08:	4a1e      	ldr	r2, [pc, #120]	; (8001b84 <main+0xfc>)
 8001b0a:	6013      	str	r3, [r2, #0]

  /* creation of buttonTask1 */
  buttonTask1Handle = osThreadNew(Button_pressTask, (void*) &btn1, &buttonTask1_attributes);
 8001b0c:	4a1e      	ldr	r2, [pc, #120]	; (8001b88 <main+0x100>)
 8001b0e:	491f      	ldr	r1, [pc, #124]	; (8001b8c <main+0x104>)
 8001b10:	481f      	ldr	r0, [pc, #124]	; (8001b90 <main+0x108>)
 8001b12:	f005 fbb5 	bl	8007280 <osThreadNew>
 8001b16:	4603      	mov	r3, r0
 8001b18:	4a1e      	ldr	r2, [pc, #120]	; (8001b94 <main+0x10c>)
 8001b1a:	6013      	str	r3, [r2, #0]

  /* creation of buttonTask2 */
  buttonTask2Handle = osThreadNew(Button_pressTask, (void*) &btn2, &buttonTask2_attributes);
 8001b1c:	4a1e      	ldr	r2, [pc, #120]	; (8001b98 <main+0x110>)
 8001b1e:	491f      	ldr	r1, [pc, #124]	; (8001b9c <main+0x114>)
 8001b20:	481b      	ldr	r0, [pc, #108]	; (8001b90 <main+0x108>)
 8001b22:	f005 fbad 	bl	8007280 <osThreadNew>
 8001b26:	4603      	mov	r3, r0
 8001b28:	4a1d      	ldr	r2, [pc, #116]	; (8001ba0 <main+0x118>)
 8001b2a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001b2c:	f005 fb82 	bl	8007234 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b30:	e7fe      	b.n	8001b30 <main+0xa8>
 8001b32:	bf00      	nop
 8001b34:	0800bf7c 	.word	0x0800bf7c
 8001b38:	08001f15 	.word	0x08001f15
 8001b3c:	200007c4 	.word	0x200007c4
 8001b40:	0800bfa0 	.word	0x0800bfa0
 8001b44:	20000664 	.word	0x20000664
 8001b48:	08000d05 	.word	0x08000d05
 8001b4c:	200007c8 	.word	0x200007c8
 8001b50:	0800bfc4 	.word	0x0800bfc4
 8001b54:	08001465 	.word	0x08001465
 8001b58:	200007cc 	.word	0x200007cc
 8001b5c:	0800bfe8 	.word	0x0800bfe8
 8001b60:	20000668 	.word	0x20000668
 8001b64:	08000909 	.word	0x08000909
 8001b68:	200007d0 	.word	0x200007d0
 8001b6c:	0800c00c 	.word	0x0800c00c
 8001b70:	20000670 	.word	0x20000670
 8001b74:	0800161b 	.word	0x0800161b
 8001b78:	200007d4 	.word	0x200007d4
 8001b7c:	0800c030 	.word	0x0800c030
 8001b80:	20000680 	.word	0x20000680
 8001b84:	200007d8 	.word	0x200007d8
 8001b88:	0800c054 	.word	0x0800c054
 8001b8c:	20000690 	.word	0x20000690
 8001b90:	08000be9 	.word	0x08000be9
 8001b94:	200007dc 	.word	0x200007dc
 8001b98:	0800c078 	.word	0x0800c078
 8001b9c:	20000698 	.word	0x20000698
 8001ba0:	200007e0 	.word	0x200007e0

08001ba4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b096      	sub	sp, #88	; 0x58
 8001ba8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001baa:	f107 0314 	add.w	r3, r7, #20
 8001bae:	2244      	movs	r2, #68	; 0x44
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f008 f8a6 	bl	8009d04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bb8:	463b      	mov	r3, r7
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	605a      	str	r2, [r3, #4]
 8001bc0:	609a      	str	r2, [r3, #8]
 8001bc2:	60da      	str	r2, [r3, #12]
 8001bc4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001bc6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001bca:	f002 f80d 	bl	8003be8 <HAL_PWREx_ControlVoltageScaling>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001bd4:	f000 f9b8 	bl	8001f48 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bd8:	2302      	movs	r3, #2
 8001bda:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001be0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001be2:	2310      	movs	r3, #16
 8001be4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001be6:	2302      	movs	r3, #2
 8001be8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001bea:	2302      	movs	r3, #2
 8001bec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001bf2:	230a      	movs	r3, #10
 8001bf4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001bf6:	2307      	movs	r3, #7
 8001bf8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c02:	f107 0314 	add.w	r3, r7, #20
 8001c06:	4618      	mov	r0, r3
 8001c08:	f002 f844 	bl	8003c94 <HAL_RCC_OscConfig>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001c12:	f000 f999 	bl	8001f48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c16:	230f      	movs	r3, #15
 8001c18:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c22:	2300      	movs	r3, #0
 8001c24:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c26:	2300      	movs	r3, #0
 8001c28:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001c2a:	463b      	mov	r3, r7
 8001c2c:	2104      	movs	r1, #4
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f002 fc0c 	bl	800444c <HAL_RCC_ClockConfig>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001c3a:	f000 f985 	bl	8001f48 <Error_Handler>
  }
}
 8001c3e:	bf00      	nop
 8001c40:	3758      	adds	r7, #88	; 0x58
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
	...

08001c48 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c4c:	4b1b      	ldr	r3, [pc, #108]	; (8001cbc <MX_I2C1_Init+0x74>)
 8001c4e:	4a1c      	ldr	r2, [pc, #112]	; (8001cc0 <MX_I2C1_Init+0x78>)
 8001c50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8001c52:	4b1a      	ldr	r3, [pc, #104]	; (8001cbc <MX_I2C1_Init+0x74>)
 8001c54:	4a1b      	ldr	r2, [pc, #108]	; (8001cc4 <MX_I2C1_Init+0x7c>)
 8001c56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001c58:	4b18      	ldr	r3, [pc, #96]	; (8001cbc <MX_I2C1_Init+0x74>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c5e:	4b17      	ldr	r3, [pc, #92]	; (8001cbc <MX_I2C1_Init+0x74>)
 8001c60:	2201      	movs	r2, #1
 8001c62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c64:	4b15      	ldr	r3, [pc, #84]	; (8001cbc <MX_I2C1_Init+0x74>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001c6a:	4b14      	ldr	r3, [pc, #80]	; (8001cbc <MX_I2C1_Init+0x74>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c70:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <MX_I2C1_Init+0x74>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c76:	4b11      	ldr	r3, [pc, #68]	; (8001cbc <MX_I2C1_Init+0x74>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c7c:	4b0f      	ldr	r3, [pc, #60]	; (8001cbc <MX_I2C1_Init+0x74>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c82:	480e      	ldr	r0, [pc, #56]	; (8001cbc <MX_I2C1_Init+0x74>)
 8001c84:	f001 f9a6 	bl	8002fd4 <HAL_I2C_Init>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001c8e:	f000 f95b 	bl	8001f48 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c92:	2100      	movs	r1, #0
 8001c94:	4809      	ldr	r0, [pc, #36]	; (8001cbc <MX_I2C1_Init+0x74>)
 8001c96:	f001 ff01 	bl	8003a9c <HAL_I2CEx_ConfigAnalogFilter>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001ca0:	f000 f952 	bl	8001f48 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	4805      	ldr	r0, [pc, #20]	; (8001cbc <MX_I2C1_Init+0x74>)
 8001ca8:	f001 ff43 	bl	8003b32 <HAL_I2CEx_ConfigDigitalFilter>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001cb2:	f000 f949 	bl	8001f48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	200006a0 	.word	0x200006a0
 8001cc0:	40005400 	.word	0x40005400
 8001cc4:	10909cec 	.word	0x10909cec

08001cc8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b08a      	sub	sp, #40	; 0x28
 8001ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cce:	f107 031c 	add.w	r3, r7, #28
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	605a      	str	r2, [r3, #4]
 8001cd8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cda:	463b      	mov	r3, r7
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	60da      	str	r2, [r3, #12]
 8001ce6:	611a      	str	r2, [r3, #16]
 8001ce8:	615a      	str	r2, [r3, #20]
 8001cea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001cec:	4b22      	ldr	r3, [pc, #136]	; (8001d78 <MX_TIM3_Init+0xb0>)
 8001cee:	4a23      	ldr	r2, [pc, #140]	; (8001d7c <MX_TIM3_Init+0xb4>)
 8001cf0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 799;
 8001cf2:	4b21      	ldr	r3, [pc, #132]	; (8001d78 <MX_TIM3_Init+0xb0>)
 8001cf4:	f240 321f 	movw	r2, #799	; 0x31f
 8001cf8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cfa:	4b1f      	ldr	r3, [pc, #124]	; (8001d78 <MX_TIM3_Init+0xb0>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 392;
 8001d00:	4b1d      	ldr	r3, [pc, #116]	; (8001d78 <MX_TIM3_Init+0xb0>)
 8001d02:	f44f 72c4 	mov.w	r2, #392	; 0x188
 8001d06:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d08:	4b1b      	ldr	r3, [pc, #108]	; (8001d78 <MX_TIM3_Init+0xb0>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d0e:	4b1a      	ldr	r3, [pc, #104]	; (8001d78 <MX_TIM3_Init+0xb0>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d14:	4818      	ldr	r0, [pc, #96]	; (8001d78 <MX_TIM3_Init+0xb0>)
 8001d16:	f003 fb7d 	bl	8005414 <HAL_TIM_PWM_Init>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8001d20:	f000 f912 	bl	8001f48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d24:	2300      	movs	r3, #0
 8001d26:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d2c:	f107 031c 	add.w	r3, r7, #28
 8001d30:	4619      	mov	r1, r3
 8001d32:	4811      	ldr	r0, [pc, #68]	; (8001d78 <MX_TIM3_Init+0xb0>)
 8001d34:	f004 fb54 	bl	80063e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8001d3e:	f000 f903 	bl	8001f48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d42:	2360      	movs	r3, #96	; 0x60
 8001d44:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001d46:	2300      	movs	r3, #0
 8001d48:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d52:	463b      	mov	r3, r7
 8001d54:	2200      	movs	r2, #0
 8001d56:	4619      	mov	r1, r3
 8001d58:	4807      	ldr	r0, [pc, #28]	; (8001d78 <MX_TIM3_Init+0xb0>)
 8001d5a:	f003 fe6f 	bl	8005a3c <HAL_TIM_PWM_ConfigChannel>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8001d64:	f000 f8f0 	bl	8001f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001d68:	4803      	ldr	r0, [pc, #12]	; (8001d78 <MX_TIM3_Init+0xb0>)
 8001d6a:	f000 f999 	bl	80020a0 <HAL_TIM_MspPostInit>

}
 8001d6e:	bf00      	nop
 8001d70:	3728      	adds	r7, #40	; 0x28
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	200006f4 	.word	0x200006f4
 8001d7c:	40000400 	.word	0x40000400

08001d80 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d84:	4b14      	ldr	r3, [pc, #80]	; (8001dd8 <MX_USART2_UART_Init+0x58>)
 8001d86:	4a15      	ldr	r2, [pc, #84]	; (8001ddc <MX_USART2_UART_Init+0x5c>)
 8001d88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d8a:	4b13      	ldr	r3, [pc, #76]	; (8001dd8 <MX_USART2_UART_Init+0x58>)
 8001d8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d92:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <MX_USART2_UART_Init+0x58>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d98:	4b0f      	ldr	r3, [pc, #60]	; (8001dd8 <MX_USART2_UART_Init+0x58>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d9e:	4b0e      	ldr	r3, [pc, #56]	; (8001dd8 <MX_USART2_UART_Init+0x58>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001da4:	4b0c      	ldr	r3, [pc, #48]	; (8001dd8 <MX_USART2_UART_Init+0x58>)
 8001da6:	220c      	movs	r2, #12
 8001da8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001daa:	4b0b      	ldr	r3, [pc, #44]	; (8001dd8 <MX_USART2_UART_Init+0x58>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001db0:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <MX_USART2_UART_Init+0x58>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001db6:	4b08      	ldr	r3, [pc, #32]	; (8001dd8 <MX_USART2_UART_Init+0x58>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dbc:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <MX_USART2_UART_Init+0x58>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001dc2:	4805      	ldr	r0, [pc, #20]	; (8001dd8 <MX_USART2_UART_Init+0x58>)
 8001dc4:	f004 fbb2 	bl	800652c <HAL_UART_Init>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001dce:	f000 f8bb 	bl	8001f48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001dd2:	bf00      	nop
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	20000740 	.word	0x20000740
 8001ddc:	40004400 	.word	0x40004400

08001de0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b08a      	sub	sp, #40	; 0x28
 8001de4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de6:	f107 0314 	add.w	r3, r7, #20
 8001dea:	2200      	movs	r2, #0
 8001dec:	601a      	str	r2, [r3, #0]
 8001dee:	605a      	str	r2, [r3, #4]
 8001df0:	609a      	str	r2, [r3, #8]
 8001df2:	60da      	str	r2, [r3, #12]
 8001df4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001df6:	4b39      	ldr	r3, [pc, #228]	; (8001edc <MX_GPIO_Init+0xfc>)
 8001df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dfa:	4a38      	ldr	r2, [pc, #224]	; (8001edc <MX_GPIO_Init+0xfc>)
 8001dfc:	f043 0304 	orr.w	r3, r3, #4
 8001e00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e02:	4b36      	ldr	r3, [pc, #216]	; (8001edc <MX_GPIO_Init+0xfc>)
 8001e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e06:	f003 0304 	and.w	r3, r3, #4
 8001e0a:	613b      	str	r3, [r7, #16]
 8001e0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e0e:	4b33      	ldr	r3, [pc, #204]	; (8001edc <MX_GPIO_Init+0xfc>)
 8001e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e12:	4a32      	ldr	r2, [pc, #200]	; (8001edc <MX_GPIO_Init+0xfc>)
 8001e14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e1a:	4b30      	ldr	r3, [pc, #192]	; (8001edc <MX_GPIO_Init+0xfc>)
 8001e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e26:	4b2d      	ldr	r3, [pc, #180]	; (8001edc <MX_GPIO_Init+0xfc>)
 8001e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e2a:	4a2c      	ldr	r2, [pc, #176]	; (8001edc <MX_GPIO_Init+0xfc>)
 8001e2c:	f043 0301 	orr.w	r3, r3, #1
 8001e30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e32:	4b2a      	ldr	r3, [pc, #168]	; (8001edc <MX_GPIO_Init+0xfc>)
 8001e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	60bb      	str	r3, [r7, #8]
 8001e3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e3e:	4b27      	ldr	r3, [pc, #156]	; (8001edc <MX_GPIO_Init+0xfc>)
 8001e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e42:	4a26      	ldr	r2, [pc, #152]	; (8001edc <MX_GPIO_Init+0xfc>)
 8001e44:	f043 0302 	orr.w	r3, r3, #2
 8001e48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e4a:	4b24      	ldr	r3, [pc, #144]	; (8001edc <MX_GPIO_Init+0xfc>)
 8001e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	607b      	str	r3, [r7, #4]
 8001e54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001e56:	2200      	movs	r2, #0
 8001e58:	2160      	movs	r1, #96	; 0x60
 8001e5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e5e:	f001 f887 	bl	8002f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e68:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001e6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e72:	f107 0314 	add.w	r3, r7, #20
 8001e76:	4619      	mov	r1, r3
 8001e78:	4819      	ldr	r0, [pc, #100]	; (8001ee0 <MX_GPIO_Init+0x100>)
 8001e7a:	f000 feb7 	bl	8002bec <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8001e7e:	2360      	movs	r3, #96	; 0x60
 8001e80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e82:	2301      	movs	r3, #1
 8001e84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e86:	2300      	movs	r3, #0
 8001e88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e8e:	f107 0314 	add.w	r3, r7, #20
 8001e92:	4619      	mov	r1, r3
 8001e94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e98:	f000 fea8 	bl	8002bec <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin;
 8001e9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ea0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ea2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ea6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8001eac:	f107 0314 	add.w	r3, r7, #20
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eb6:	f000 fe99 	bl	8002bec <HAL_GPIO_Init>

  /*Configure GPIO pin : SW2_Pin */
  GPIO_InitStruct.Pin = SW2_Pin;
 8001eba:	2308      	movs	r3, #8
 8001ebc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ebe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ec2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW2_GPIO_Port, &GPIO_InitStruct);
 8001ec8:	f107 0314 	add.w	r3, r7, #20
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4805      	ldr	r0, [pc, #20]	; (8001ee4 <MX_GPIO_Init+0x104>)
 8001ed0:	f000 fe8c 	bl	8002bec <HAL_GPIO_Init>

}
 8001ed4:	bf00      	nop
 8001ed6:	3728      	adds	r7, #40	; 0x28
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	48000800 	.word	0x48000800
 8001ee4:	48000400 	.word	0x48000400

08001ee8 <_write>:

/* USER CODE BEGIN 4 */
int _write(int fd, char* ptr, int len) {
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8001efc:	68b9      	ldr	r1, [r7, #8]
 8001efe:	4804      	ldr	r0, [pc, #16]	; (8001f10 <_write+0x28>)
 8001f00:	f004 fb62 	bl	80065c8 <HAL_UART_Transmit>
    return len;
 8001f04:	687b      	ldr	r3, [r7, #4]
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	20000740 	.word	0x20000740

08001f14 <Default>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Default */
__weak void Default(void *argument)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001f1c:	2001      	movs	r0, #1
 8001f1e:	f005 fa41 	bl	80073a4 <osDelay>
 8001f22:	e7fb      	b.n	8001f1c <Default+0x8>

08001f24 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a04      	ldr	r2, [pc, #16]	; (8001f44 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d101      	bne.n	8001f3a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001f36:	f000 fac3 	bl	80024c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f3a:	bf00      	nop
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40014400 	.word	0x40014400

08001f48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f4c:	b672      	cpsid	i
}
 8001f4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f50:	e7fe      	b.n	8001f50 <Error_Handler+0x8>
	...

08001f54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f5a:	4b11      	ldr	r3, [pc, #68]	; (8001fa0 <HAL_MspInit+0x4c>)
 8001f5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f5e:	4a10      	ldr	r2, [pc, #64]	; (8001fa0 <HAL_MspInit+0x4c>)
 8001f60:	f043 0301 	orr.w	r3, r3, #1
 8001f64:	6613      	str	r3, [r2, #96]	; 0x60
 8001f66:	4b0e      	ldr	r3, [pc, #56]	; (8001fa0 <HAL_MspInit+0x4c>)
 8001f68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	607b      	str	r3, [r7, #4]
 8001f70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f72:	4b0b      	ldr	r3, [pc, #44]	; (8001fa0 <HAL_MspInit+0x4c>)
 8001f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f76:	4a0a      	ldr	r2, [pc, #40]	; (8001fa0 <HAL_MspInit+0x4c>)
 8001f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f7c:	6593      	str	r3, [r2, #88]	; 0x58
 8001f7e:	4b08      	ldr	r3, [pc, #32]	; (8001fa0 <HAL_MspInit+0x4c>)
 8001f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f86:	603b      	str	r3, [r7, #0]
 8001f88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	210f      	movs	r1, #15
 8001f8e:	f06f 0001 	mvn.w	r0, #1
 8001f92:	f000 fb6d 	bl	8002670 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f96:	bf00      	nop
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	40021000 	.word	0x40021000

08001fa4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b0ac      	sub	sp, #176	; 0xb0
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	605a      	str	r2, [r3, #4]
 8001fb6:	609a      	str	r2, [r3, #8]
 8001fb8:	60da      	str	r2, [r3, #12]
 8001fba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fbc:	f107 0314 	add.w	r3, r7, #20
 8001fc0:	2288      	movs	r2, #136	; 0x88
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f007 fe9d 	bl	8009d04 <memset>
  if(hi2c->Instance==I2C1)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a21      	ldr	r2, [pc, #132]	; (8002054 <HAL_I2C_MspInit+0xb0>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d13b      	bne.n	800204c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001fd4:	2340      	movs	r3, #64	; 0x40
 8001fd6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fdc:	f107 0314 	add.w	r3, r7, #20
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f002 fc89 	bl	80048f8 <HAL_RCCEx_PeriphCLKConfig>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001fec:	f7ff ffac 	bl	8001f48 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ff0:	4b19      	ldr	r3, [pc, #100]	; (8002058 <HAL_I2C_MspInit+0xb4>)
 8001ff2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff4:	4a18      	ldr	r2, [pc, #96]	; (8002058 <HAL_I2C_MspInit+0xb4>)
 8001ff6:	f043 0302 	orr.w	r3, r3, #2
 8001ffa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ffc:	4b16      	ldr	r3, [pc, #88]	; (8002058 <HAL_I2C_MspInit+0xb4>)
 8001ffe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	613b      	str	r3, [r7, #16]
 8002006:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002008:	f44f 7340 	mov.w	r3, #768	; 0x300
 800200c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002010:	2312      	movs	r3, #18
 8002012:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002016:	2300      	movs	r3, #0
 8002018:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800201c:	2303      	movs	r3, #3
 800201e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002022:	2304      	movs	r3, #4
 8002024:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002028:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800202c:	4619      	mov	r1, r3
 800202e:	480b      	ldr	r0, [pc, #44]	; (800205c <HAL_I2C_MspInit+0xb8>)
 8002030:	f000 fddc 	bl	8002bec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002034:	4b08      	ldr	r3, [pc, #32]	; (8002058 <HAL_I2C_MspInit+0xb4>)
 8002036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002038:	4a07      	ldr	r2, [pc, #28]	; (8002058 <HAL_I2C_MspInit+0xb4>)
 800203a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800203e:	6593      	str	r3, [r2, #88]	; 0x58
 8002040:	4b05      	ldr	r3, [pc, #20]	; (8002058 <HAL_I2C_MspInit+0xb4>)
 8002042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002044:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800204c:	bf00      	nop
 800204e:	37b0      	adds	r7, #176	; 0xb0
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40005400 	.word	0x40005400
 8002058:	40021000 	.word	0x40021000
 800205c:	48000400 	.word	0x48000400

08002060 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002060:	b480      	push	{r7}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a0a      	ldr	r2, [pc, #40]	; (8002098 <HAL_TIM_PWM_MspInit+0x38>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d10b      	bne.n	800208a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002072:	4b0a      	ldr	r3, [pc, #40]	; (800209c <HAL_TIM_PWM_MspInit+0x3c>)
 8002074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002076:	4a09      	ldr	r2, [pc, #36]	; (800209c <HAL_TIM_PWM_MspInit+0x3c>)
 8002078:	f043 0302 	orr.w	r3, r3, #2
 800207c:	6593      	str	r3, [r2, #88]	; 0x58
 800207e:	4b07      	ldr	r3, [pc, #28]	; (800209c <HAL_TIM_PWM_MspInit+0x3c>)
 8002080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800208a:	bf00      	nop
 800208c:	3714      	adds	r7, #20
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	40000400 	.word	0x40000400
 800209c:	40021000 	.word	0x40021000

080020a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b088      	sub	sp, #32
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a8:	f107 030c 	add.w	r3, r7, #12
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	605a      	str	r2, [r3, #4]
 80020b2:	609a      	str	r2, [r3, #8]
 80020b4:	60da      	str	r2, [r3, #12]
 80020b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a11      	ldr	r2, [pc, #68]	; (8002104 <HAL_TIM_MspPostInit+0x64>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d11b      	bne.n	80020fa <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020c2:	4b11      	ldr	r3, [pc, #68]	; (8002108 <HAL_TIM_MspPostInit+0x68>)
 80020c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c6:	4a10      	ldr	r2, [pc, #64]	; (8002108 <HAL_TIM_MspPostInit+0x68>)
 80020c8:	f043 0302 	orr.w	r3, r3, #2
 80020cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020ce:	4b0e      	ldr	r3, [pc, #56]	; (8002108 <HAL_TIM_MspPostInit+0x68>)
 80020d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	60bb      	str	r3, [r7, #8]
 80020d8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4 (NJTRST)     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80020da:	2310      	movs	r3, #16
 80020dc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020de:	2302      	movs	r3, #2
 80020e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e2:	2300      	movs	r3, #0
 80020e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e6:	2300      	movs	r3, #0
 80020e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020ea:	2302      	movs	r3, #2
 80020ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ee:	f107 030c 	add.w	r3, r7, #12
 80020f2:	4619      	mov	r1, r3
 80020f4:	4805      	ldr	r0, [pc, #20]	; (800210c <HAL_TIM_MspPostInit+0x6c>)
 80020f6:	f000 fd79 	bl	8002bec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80020fa:	bf00      	nop
 80020fc:	3720      	adds	r7, #32
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40000400 	.word	0x40000400
 8002108:	40021000 	.word	0x40021000
 800210c:	48000400 	.word	0x48000400

08002110 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b0ac      	sub	sp, #176	; 0xb0
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002118:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	605a      	str	r2, [r3, #4]
 8002122:	609a      	str	r2, [r3, #8]
 8002124:	60da      	str	r2, [r3, #12]
 8002126:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002128:	f107 0314 	add.w	r3, r7, #20
 800212c:	2288      	movs	r2, #136	; 0x88
 800212e:	2100      	movs	r1, #0
 8002130:	4618      	mov	r0, r3
 8002132:	f007 fde7 	bl	8009d04 <memset>
  if(huart->Instance==USART2)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a21      	ldr	r2, [pc, #132]	; (80021c0 <HAL_UART_MspInit+0xb0>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d13b      	bne.n	80021b8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002140:	2302      	movs	r3, #2
 8002142:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002144:	2300      	movs	r3, #0
 8002146:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002148:	f107 0314 	add.w	r3, r7, #20
 800214c:	4618      	mov	r0, r3
 800214e:	f002 fbd3 	bl	80048f8 <HAL_RCCEx_PeriphCLKConfig>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002158:	f7ff fef6 	bl	8001f48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800215c:	4b19      	ldr	r3, [pc, #100]	; (80021c4 <HAL_UART_MspInit+0xb4>)
 800215e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002160:	4a18      	ldr	r2, [pc, #96]	; (80021c4 <HAL_UART_MspInit+0xb4>)
 8002162:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002166:	6593      	str	r3, [r2, #88]	; 0x58
 8002168:	4b16      	ldr	r3, [pc, #88]	; (80021c4 <HAL_UART_MspInit+0xb4>)
 800216a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800216c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002170:	613b      	str	r3, [r7, #16]
 8002172:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002174:	4b13      	ldr	r3, [pc, #76]	; (80021c4 <HAL_UART_MspInit+0xb4>)
 8002176:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002178:	4a12      	ldr	r2, [pc, #72]	; (80021c4 <HAL_UART_MspInit+0xb4>)
 800217a:	f043 0301 	orr.w	r3, r3, #1
 800217e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002180:	4b10      	ldr	r3, [pc, #64]	; (80021c4 <HAL_UART_MspInit+0xb4>)
 8002182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	60fb      	str	r3, [r7, #12]
 800218a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800218c:	230c      	movs	r3, #12
 800218e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002192:	2302      	movs	r3, #2
 8002194:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002198:	2300      	movs	r3, #0
 800219a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800219e:	2303      	movs	r3, #3
 80021a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021a4:	2307      	movs	r3, #7
 80021a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021aa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80021ae:	4619      	mov	r1, r3
 80021b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021b4:	f000 fd1a 	bl	8002bec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80021b8:	bf00      	nop
 80021ba:	37b0      	adds	r7, #176	; 0xb0
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	40004400 	.word	0x40004400
 80021c4:	40021000 	.word	0x40021000

080021c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b08c      	sub	sp, #48	; 0x30
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80021d0:	2300      	movs	r3, #0
 80021d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80021d4:	2300      	movs	r3, #0
 80021d6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM16 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 80021d8:	2200      	movs	r2, #0
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	2019      	movs	r0, #25
 80021de:	f000 fa47 	bl	8002670 <HAL_NVIC_SetPriority>

  /* Enable the TIM16 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80021e2:	2019      	movs	r0, #25
 80021e4:	f000 fa60 	bl	80026a8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 80021e8:	4b1e      	ldr	r3, [pc, #120]	; (8002264 <HAL_InitTick+0x9c>)
 80021ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021ec:	4a1d      	ldr	r2, [pc, #116]	; (8002264 <HAL_InitTick+0x9c>)
 80021ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021f2:	6613      	str	r3, [r2, #96]	; 0x60
 80021f4:	4b1b      	ldr	r3, [pc, #108]	; (8002264 <HAL_InitTick+0x9c>)
 80021f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021fc:	60fb      	str	r3, [r7, #12]
 80021fe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002200:	f107 0210 	add.w	r2, r7, #16
 8002204:	f107 0314 	add.w	r3, r7, #20
 8002208:	4611      	mov	r1, r2
 800220a:	4618      	mov	r0, r3
 800220c:	f002 fae2 	bl	80047d4 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002210:	f002 faca 	bl	80047a8 <HAL_RCC_GetPCLK2Freq>
 8002214:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002218:	4a13      	ldr	r2, [pc, #76]	; (8002268 <HAL_InitTick+0xa0>)
 800221a:	fba2 2303 	umull	r2, r3, r2, r3
 800221e:	0c9b      	lsrs	r3, r3, #18
 8002220:	3b01      	subs	r3, #1
 8002222:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8002224:	4b11      	ldr	r3, [pc, #68]	; (800226c <HAL_InitTick+0xa4>)
 8002226:	4a12      	ldr	r2, [pc, #72]	; (8002270 <HAL_InitTick+0xa8>)
 8002228:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 800222a:	4b10      	ldr	r3, [pc, #64]	; (800226c <HAL_InitTick+0xa4>)
 800222c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002230:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8002232:	4a0e      	ldr	r2, [pc, #56]	; (800226c <HAL_InitTick+0xa4>)
 8002234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002236:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 8002238:	4b0c      	ldr	r3, [pc, #48]	; (800226c <HAL_InitTick+0xa4>)
 800223a:	2200      	movs	r2, #0
 800223c:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800223e:	4b0b      	ldr	r3, [pc, #44]	; (800226c <HAL_InitTick+0xa4>)
 8002240:	2200      	movs	r2, #0
 8002242:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim16) == HAL_OK)
 8002244:	4809      	ldr	r0, [pc, #36]	; (800226c <HAL_InitTick+0xa4>)
 8002246:	f003 f813 	bl	8005270 <HAL_TIM_Base_Init>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d104      	bne.n	800225a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim16);
 8002250:	4806      	ldr	r0, [pc, #24]	; (800226c <HAL_InitTick+0xa4>)
 8002252:	f003 f86f 	bl	8005334 <HAL_TIM_Base_Start_IT>
 8002256:	4603      	mov	r3, r0
 8002258:	e000      	b.n	800225c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
}
 800225c:	4618      	mov	r0, r3
 800225e:	3730      	adds	r7, #48	; 0x30
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40021000 	.word	0x40021000
 8002268:	431bde83 	.word	0x431bde83
 800226c:	200007e4 	.word	0x200007e4
 8002270:	40014400 	.word	0x40014400

08002274 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002278:	e7fe      	b.n	8002278 <NMI_Handler+0x4>

0800227a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800227a:	b480      	push	{r7}
 800227c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800227e:	e7fe      	b.n	800227e <HardFault_Handler+0x4>

08002280 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002284:	e7fe      	b.n	8002284 <MemManage_Handler+0x4>

08002286 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002286:	b480      	push	{r7}
 8002288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800228a:	e7fe      	b.n	800228a <BusFault_Handler+0x4>

0800228c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002290:	e7fe      	b.n	8002290 <UsageFault_Handler+0x4>

08002292 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002292:	b480      	push	{r7}
 8002294:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002296:	bf00      	nop
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80022a4:	4802      	ldr	r0, [pc, #8]	; (80022b0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80022a6:	f003 faa9 	bl	80057fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80022aa:	bf00      	nop
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	200007e4 	.word	0x200007e4

080022b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
	return 1;
 80022b8:	2301      	movs	r3, #1
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <_kill>:

int _kill(int pid, int sig)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80022ce:	f007 fce1 	bl	8009c94 <__errno>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2216      	movs	r2, #22
 80022d6:	601a      	str	r2, [r3, #0]
	return -1;
 80022d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3708      	adds	r7, #8
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <_exit>:

void _exit (int status)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80022ec:	f04f 31ff 	mov.w	r1, #4294967295
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f7ff ffe7 	bl	80022c4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80022f6:	e7fe      	b.n	80022f6 <_exit+0x12>

080022f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002304:	2300      	movs	r3, #0
 8002306:	617b      	str	r3, [r7, #20]
 8002308:	e00a      	b.n	8002320 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800230a:	f3af 8000 	nop.w
 800230e:	4601      	mov	r1, r0
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	1c5a      	adds	r2, r3, #1
 8002314:	60ba      	str	r2, [r7, #8]
 8002316:	b2ca      	uxtb	r2, r1
 8002318:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	3301      	adds	r3, #1
 800231e:	617b      	str	r3, [r7, #20]
 8002320:	697a      	ldr	r2, [r7, #20]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	429a      	cmp	r2, r3
 8002326:	dbf0      	blt.n	800230a <_read+0x12>
	}

return len;
 8002328:	687b      	ldr	r3, [r7, #4]
}
 800232a:	4618      	mov	r0, r3
 800232c:	3718      	adds	r7, #24
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002332:	b480      	push	{r7}
 8002334:	b083      	sub	sp, #12
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
	return -1;
 800233a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800233e:	4618      	mov	r0, r3
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr

0800234a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800234a:	b480      	push	{r7}
 800234c:	b083      	sub	sp, #12
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
 8002352:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800235a:	605a      	str	r2, [r3, #4]
	return 0;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr

0800236a <_isatty>:

int _isatty(int file)
{
 800236a:	b480      	push	{r7}
 800236c:	b083      	sub	sp, #12
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
	return 1;
 8002372:	2301      	movs	r3, #1
}
 8002374:	4618      	mov	r0, r3
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]
	return 0;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3714      	adds	r7, #20
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
	...

0800239c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023a4:	4a14      	ldr	r2, [pc, #80]	; (80023f8 <_sbrk+0x5c>)
 80023a6:	4b15      	ldr	r3, [pc, #84]	; (80023fc <_sbrk+0x60>)
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023b0:	4b13      	ldr	r3, [pc, #76]	; (8002400 <_sbrk+0x64>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d102      	bne.n	80023be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023b8:	4b11      	ldr	r3, [pc, #68]	; (8002400 <_sbrk+0x64>)
 80023ba:	4a12      	ldr	r2, [pc, #72]	; (8002404 <_sbrk+0x68>)
 80023bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023be:	4b10      	ldr	r3, [pc, #64]	; (8002400 <_sbrk+0x64>)
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4413      	add	r3, r2
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d207      	bcs.n	80023dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023cc:	f007 fc62 	bl	8009c94 <__errno>
 80023d0:	4603      	mov	r3, r0
 80023d2:	220c      	movs	r2, #12
 80023d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023d6:	f04f 33ff 	mov.w	r3, #4294967295
 80023da:	e009      	b.n	80023f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023dc:	4b08      	ldr	r3, [pc, #32]	; (8002400 <_sbrk+0x64>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023e2:	4b07      	ldr	r3, [pc, #28]	; (8002400 <_sbrk+0x64>)
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4413      	add	r3, r2
 80023ea:	4a05      	ldr	r2, [pc, #20]	; (8002400 <_sbrk+0x64>)
 80023ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023ee:	68fb      	ldr	r3, [r7, #12]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3718      	adds	r7, #24
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	20018000 	.word	0x20018000
 80023fc:	00000400 	.word	0x00000400
 8002400:	20000830 	.word	0x20000830
 8002404:	200038c0 	.word	0x200038c0

08002408 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800240c:	4b06      	ldr	r3, [pc, #24]	; (8002428 <SystemInit+0x20>)
 800240e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002412:	4a05      	ldr	r2, [pc, #20]	; (8002428 <SystemInit+0x20>)
 8002414:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002418:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800241c:	bf00      	nop
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	e000ed00 	.word	0xe000ed00

0800242c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800242c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002464 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002430:	f7ff ffea 	bl	8002408 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002434:	480c      	ldr	r0, [pc, #48]	; (8002468 <LoopForever+0x6>)
  ldr r1, =_edata
 8002436:	490d      	ldr	r1, [pc, #52]	; (800246c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002438:	4a0d      	ldr	r2, [pc, #52]	; (8002470 <LoopForever+0xe>)
  movs r3, #0
 800243a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800243c:	e002      	b.n	8002444 <LoopCopyDataInit>

0800243e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800243e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002440:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002442:	3304      	adds	r3, #4

08002444 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002444:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002446:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002448:	d3f9      	bcc.n	800243e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800244a:	4a0a      	ldr	r2, [pc, #40]	; (8002474 <LoopForever+0x12>)
  ldr r4, =_ebss
 800244c:	4c0a      	ldr	r4, [pc, #40]	; (8002478 <LoopForever+0x16>)
  movs r3, #0
 800244e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002450:	e001      	b.n	8002456 <LoopFillZerobss>

08002452 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002452:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002454:	3204      	adds	r2, #4

08002456 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002456:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002458:	d3fb      	bcc.n	8002452 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800245a:	f007 fc21 	bl	8009ca0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800245e:	f7ff fb13 	bl	8001a88 <main>

08002462 <LoopForever>:

LoopForever:
    b LoopForever
 8002462:	e7fe      	b.n	8002462 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002464:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002468:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800246c:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8002470:	0800c35c 	.word	0x0800c35c
  ldr r2, =_sbss
 8002474:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8002478:	200038c0 	.word	0x200038c0

0800247c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800247c:	e7fe      	b.n	800247c <ADC1_2_IRQHandler>
	...

08002480 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002486:	2300      	movs	r3, #0
 8002488:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800248a:	4b0c      	ldr	r3, [pc, #48]	; (80024bc <HAL_Init+0x3c>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a0b      	ldr	r2, [pc, #44]	; (80024bc <HAL_Init+0x3c>)
 8002490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002494:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002496:	2003      	movs	r0, #3
 8002498:	f000 f8df 	bl	800265a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800249c:	200f      	movs	r0, #15
 800249e:	f7ff fe93 	bl	80021c8 <HAL_InitTick>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d002      	beq.n	80024ae <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	71fb      	strb	r3, [r7, #7]
 80024ac:	e001      	b.n	80024b2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80024ae:	f7ff fd51 	bl	8001f54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80024b2:	79fb      	ldrb	r3, [r7, #7]
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3708      	adds	r7, #8
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40022000 	.word	0x40022000

080024c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024c4:	4b06      	ldr	r3, [pc, #24]	; (80024e0 <HAL_IncTick+0x20>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	461a      	mov	r2, r3
 80024ca:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <HAL_IncTick+0x24>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4413      	add	r3, r2
 80024d0:	4a04      	ldr	r2, [pc, #16]	; (80024e4 <HAL_IncTick+0x24>)
 80024d2:	6013      	str	r3, [r2, #0]
}
 80024d4:	bf00      	nop
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	2000000c 	.word	0x2000000c
 80024e4:	20000834 	.word	0x20000834

080024e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  return uwTick;
 80024ec:	4b03      	ldr	r3, [pc, #12]	; (80024fc <HAL_GetTick+0x14>)
 80024ee:	681b      	ldr	r3, [r3, #0]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	20000834 	.word	0x20000834

08002500 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f003 0307 	and.w	r3, r3, #7
 800250e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002510:	4b0c      	ldr	r3, [pc, #48]	; (8002544 <__NVIC_SetPriorityGrouping+0x44>)
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002516:	68ba      	ldr	r2, [r7, #8]
 8002518:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800251c:	4013      	ands	r3, r2
 800251e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002528:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800252c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002530:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002532:	4a04      	ldr	r2, [pc, #16]	; (8002544 <__NVIC_SetPriorityGrouping+0x44>)
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	60d3      	str	r3, [r2, #12]
}
 8002538:	bf00      	nop
 800253a:	3714      	adds	r7, #20
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	e000ed00 	.word	0xe000ed00

08002548 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800254c:	4b04      	ldr	r3, [pc, #16]	; (8002560 <__NVIC_GetPriorityGrouping+0x18>)
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	0a1b      	lsrs	r3, r3, #8
 8002552:	f003 0307 	and.w	r3, r3, #7
}
 8002556:	4618      	mov	r0, r3
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr
 8002560:	e000ed00 	.word	0xe000ed00

08002564 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	4603      	mov	r3, r0
 800256c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800256e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002572:	2b00      	cmp	r3, #0
 8002574:	db0b      	blt.n	800258e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002576:	79fb      	ldrb	r3, [r7, #7]
 8002578:	f003 021f 	and.w	r2, r3, #31
 800257c:	4907      	ldr	r1, [pc, #28]	; (800259c <__NVIC_EnableIRQ+0x38>)
 800257e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002582:	095b      	lsrs	r3, r3, #5
 8002584:	2001      	movs	r0, #1
 8002586:	fa00 f202 	lsl.w	r2, r0, r2
 800258a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800258e:	bf00      	nop
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	e000e100 	.word	0xe000e100

080025a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	6039      	str	r1, [r7, #0]
 80025aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	db0a      	blt.n	80025ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	b2da      	uxtb	r2, r3
 80025b8:	490c      	ldr	r1, [pc, #48]	; (80025ec <__NVIC_SetPriority+0x4c>)
 80025ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025be:	0112      	lsls	r2, r2, #4
 80025c0:	b2d2      	uxtb	r2, r2
 80025c2:	440b      	add	r3, r1
 80025c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025c8:	e00a      	b.n	80025e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	b2da      	uxtb	r2, r3
 80025ce:	4908      	ldr	r1, [pc, #32]	; (80025f0 <__NVIC_SetPriority+0x50>)
 80025d0:	79fb      	ldrb	r3, [r7, #7]
 80025d2:	f003 030f 	and.w	r3, r3, #15
 80025d6:	3b04      	subs	r3, #4
 80025d8:	0112      	lsls	r2, r2, #4
 80025da:	b2d2      	uxtb	r2, r2
 80025dc:	440b      	add	r3, r1
 80025de:	761a      	strb	r2, [r3, #24]
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr
 80025ec:	e000e100 	.word	0xe000e100
 80025f0:	e000ed00 	.word	0xe000ed00

080025f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b089      	sub	sp, #36	; 0x24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f003 0307 	and.w	r3, r3, #7
 8002606:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	f1c3 0307 	rsb	r3, r3, #7
 800260e:	2b04      	cmp	r3, #4
 8002610:	bf28      	it	cs
 8002612:	2304      	movcs	r3, #4
 8002614:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	3304      	adds	r3, #4
 800261a:	2b06      	cmp	r3, #6
 800261c:	d902      	bls.n	8002624 <NVIC_EncodePriority+0x30>
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	3b03      	subs	r3, #3
 8002622:	e000      	b.n	8002626 <NVIC_EncodePriority+0x32>
 8002624:	2300      	movs	r3, #0
 8002626:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002628:	f04f 32ff 	mov.w	r2, #4294967295
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	fa02 f303 	lsl.w	r3, r2, r3
 8002632:	43da      	mvns	r2, r3
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	401a      	ands	r2, r3
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800263c:	f04f 31ff 	mov.w	r1, #4294967295
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	fa01 f303 	lsl.w	r3, r1, r3
 8002646:	43d9      	mvns	r1, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800264c:	4313      	orrs	r3, r2
         );
}
 800264e:	4618      	mov	r0, r3
 8002650:	3724      	adds	r7, #36	; 0x24
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr

0800265a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b082      	sub	sp, #8
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f7ff ff4c 	bl	8002500 <__NVIC_SetPriorityGrouping>
}
 8002668:	bf00      	nop
 800266a:	3708      	adds	r7, #8
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	4603      	mov	r3, r0
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	607a      	str	r2, [r7, #4]
 800267c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800267e:	2300      	movs	r3, #0
 8002680:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002682:	f7ff ff61 	bl	8002548 <__NVIC_GetPriorityGrouping>
 8002686:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	68b9      	ldr	r1, [r7, #8]
 800268c:	6978      	ldr	r0, [r7, #20]
 800268e:	f7ff ffb1 	bl	80025f4 <NVIC_EncodePriority>
 8002692:	4602      	mov	r2, r0
 8002694:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002698:	4611      	mov	r1, r2
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff ff80 	bl	80025a0 <__NVIC_SetPriority>
}
 80026a0:	bf00      	nop
 80026a2:	3718      	adds	r7, #24
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	4603      	mov	r3, r0
 80026b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff ff54 	bl	8002564 <__NVIC_EnableIRQ>
}
 80026bc:	bf00      	nop
 80026be:	3708      	adds	r7, #8
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 80026d2:	2300      	movs	r3, #0
 80026d4:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80026d6:	4b2f      	ldr	r3, [pc, #188]	; (8002794 <HAL_FLASH_Program+0xd0>)
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d101      	bne.n	80026e2 <HAL_FLASH_Program+0x1e>
 80026de:	2302      	movs	r3, #2
 80026e0:	e053      	b.n	800278a <HAL_FLASH_Program+0xc6>
 80026e2:	4b2c      	ldr	r3, [pc, #176]	; (8002794 <HAL_FLASH_Program+0xd0>)
 80026e4:	2201      	movs	r2, #1
 80026e6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80026e8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80026ec:	f000 f888 	bl	8002800 <FLASH_WaitForLastOperation>
 80026f0:	4603      	mov	r3, r0
 80026f2:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 80026f4:	7dfb      	ldrb	r3, [r7, #23]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d143      	bne.n	8002782 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80026fa:	4b26      	ldr	r3, [pc, #152]	; (8002794 <HAL_FLASH_Program+0xd0>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002700:	4b25      	ldr	r3, [pc, #148]	; (8002798 <HAL_FLASH_Program+0xd4>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002708:	2b00      	cmp	r3, #0
 800270a:	d009      	beq.n	8002720 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800270c:	4b22      	ldr	r3, [pc, #136]	; (8002798 <HAL_FLASH_Program+0xd4>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a21      	ldr	r2, [pc, #132]	; (8002798 <HAL_FLASH_Program+0xd4>)
 8002712:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002716:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8002718:	4b1e      	ldr	r3, [pc, #120]	; (8002794 <HAL_FLASH_Program+0xd0>)
 800271a:	2202      	movs	r2, #2
 800271c:	771a      	strb	r2, [r3, #28]
 800271e:	e002      	b.n	8002726 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002720:	4b1c      	ldr	r3, [pc, #112]	; (8002794 <HAL_FLASH_Program+0xd0>)
 8002722:	2200      	movs	r2, #0
 8002724:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d107      	bne.n	800273c <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800272c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002730:	68b8      	ldr	r0, [r7, #8]
 8002732:	f000 f8bb 	bl	80028ac <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8002736:	2301      	movs	r3, #1
 8002738:	613b      	str	r3, [r7, #16]
 800273a:	e010      	b.n	800275e <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d002      	beq.n	8002748 <HAL_FLASH_Program+0x84>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2b02      	cmp	r3, #2
 8002746:	d10a      	bne.n	800275e <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	4619      	mov	r1, r3
 800274c:	68b8      	ldr	r0, [r7, #8]
 800274e:	f000 f8d3 	bl	80028f8 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2b02      	cmp	r3, #2
 8002756:	d102      	bne.n	800275e <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8002758:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800275c:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800275e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002762:	f000 f84d 	bl	8002800 <FLASH_WaitForLastOperation>
 8002766:	4603      	mov	r3, r0
 8002768:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d006      	beq.n	800277e <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8002770:	4b09      	ldr	r3, [pc, #36]	; (8002798 <HAL_FLASH_Program+0xd4>)
 8002772:	695a      	ldr	r2, [r3, #20]
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	43db      	mvns	r3, r3
 8002778:	4907      	ldr	r1, [pc, #28]	; (8002798 <HAL_FLASH_Program+0xd4>)
 800277a:	4013      	ands	r3, r2
 800277c:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800277e:	f000 f9eb 	bl	8002b58 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002782:	4b04      	ldr	r3, [pc, #16]	; (8002794 <HAL_FLASH_Program+0xd0>)
 8002784:	2200      	movs	r2, #0
 8002786:	701a      	strb	r2, [r3, #0]

  return status;
 8002788:	7dfb      	ldrb	r3, [r7, #23]
}
 800278a:	4618      	mov	r0, r3
 800278c:	3718      	adds	r7, #24
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	20000010 	.word	0x20000010
 8002798:	40022000 	.word	0x40022000

0800279c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80027a2:	2300      	movs	r3, #0
 80027a4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80027a6:	4b0b      	ldr	r3, [pc, #44]	; (80027d4 <HAL_FLASH_Unlock+0x38>)
 80027a8:	695b      	ldr	r3, [r3, #20]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	da0b      	bge.n	80027c6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80027ae:	4b09      	ldr	r3, [pc, #36]	; (80027d4 <HAL_FLASH_Unlock+0x38>)
 80027b0:	4a09      	ldr	r2, [pc, #36]	; (80027d8 <HAL_FLASH_Unlock+0x3c>)
 80027b2:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80027b4:	4b07      	ldr	r3, [pc, #28]	; (80027d4 <HAL_FLASH_Unlock+0x38>)
 80027b6:	4a09      	ldr	r2, [pc, #36]	; (80027dc <HAL_FLASH_Unlock+0x40>)
 80027b8:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80027ba:	4b06      	ldr	r3, [pc, #24]	; (80027d4 <HAL_FLASH_Unlock+0x38>)
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	da01      	bge.n	80027c6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80027c6:	79fb      	ldrb	r3, [r7, #7]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	40022000 	.word	0x40022000
 80027d8:	45670123 	.word	0x45670123
 80027dc:	cdef89ab 	.word	0xcdef89ab

080027e0 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80027e4:	4b05      	ldr	r3, [pc, #20]	; (80027fc <HAL_FLASH_Lock+0x1c>)
 80027e6:	695b      	ldr	r3, [r3, #20]
 80027e8:	4a04      	ldr	r2, [pc, #16]	; (80027fc <HAL_FLASH_Lock+0x1c>)
 80027ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80027ee:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr
 80027fc:	40022000 	.word	0x40022000

08002800 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8002808:	f7ff fe6e 	bl	80024e8 <HAL_GetTick>
 800280c:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800280e:	e00d      	b.n	800282c <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002816:	d009      	beq.n	800282c <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8002818:	f7ff fe66 	bl	80024e8 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	429a      	cmp	r2, r3
 8002826:	d801      	bhi.n	800282c <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e037      	b.n	800289c <FLASH_WaitForLastOperation+0x9c>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800282c:	4b1d      	ldr	r3, [pc, #116]	; (80028a4 <FLASH_WaitForLastOperation+0xa4>)
 800282e:	691b      	ldr	r3, [r3, #16]
 8002830:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d1eb      	bne.n	8002810 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8002838:	4b1a      	ldr	r3, [pc, #104]	; (80028a4 <FLASH_WaitForLastOperation+0xa4>)
 800283a:	691a      	ldr	r2, [r3, #16]
 800283c:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8002840:	4013      	ands	r3, r2
 8002842:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d01e      	beq.n	8002888 <FLASH_WaitForLastOperation+0x88>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 800284a:	4b17      	ldr	r3, [pc, #92]	; (80028a8 <FLASH_WaitForLastOperation+0xa8>)
 800284c:	685a      	ldr	r2, [r3, #4]
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	4313      	orrs	r3, r2
 8002852:	4a15      	ldr	r2, [pc, #84]	; (80028a8 <FLASH_WaitForLastOperation+0xa8>)
 8002854:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d007      	beq.n	8002870 <FLASH_WaitForLastOperation+0x70>
 8002860:	4b10      	ldr	r3, [pc, #64]	; (80028a4 <FLASH_WaitForLastOperation+0xa4>)
 8002862:	699a      	ldr	r2, [r3, #24]
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800286a:	490e      	ldr	r1, [pc, #56]	; (80028a4 <FLASH_WaitForLastOperation+0xa4>)
 800286c:	4313      	orrs	r3, r2
 800286e:	618b      	str	r3, [r1, #24]
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d004      	beq.n	8002884 <FLASH_WaitForLastOperation+0x84>
 800287a:	4a0a      	ldr	r2, [pc, #40]	; (80028a4 <FLASH_WaitForLastOperation+0xa4>)
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002882:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e009      	b.n	800289c <FLASH_WaitForLastOperation+0x9c>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002888:	4b06      	ldr	r3, [pc, #24]	; (80028a4 <FLASH_WaitForLastOperation+0xa4>)
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	2b00      	cmp	r3, #0
 8002892:	d002      	beq.n	800289a <FLASH_WaitForLastOperation+0x9a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002894:	4b03      	ldr	r3, [pc, #12]	; (80028a4 <FLASH_WaitForLastOperation+0xa4>)
 8002896:	2201      	movs	r2, #1
 8002898:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	3710      	adds	r7, #16
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	40022000 	.word	0x40022000
 80028a8:	20000010 	.word	0x20000010

080028ac <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80028b8:	4b0e      	ldr	r3, [pc, #56]	; (80028f4 <FLASH_Program_DoubleWord+0x48>)
 80028ba:	695b      	ldr	r3, [r3, #20]
 80028bc:	4a0d      	ldr	r2, [pc, #52]	; (80028f4 <FLASH_Program_DoubleWord+0x48>)
 80028be:	f043 0301 	orr.w	r3, r3, #1
 80028c2:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	683a      	ldr	r2, [r7, #0]
 80028c8:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80028ca:	f3bf 8f6f 	isb	sy
}
 80028ce:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 80028d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80028d4:	f04f 0200 	mov.w	r2, #0
 80028d8:	f04f 0300 	mov.w	r3, #0
 80028dc:	000a      	movs	r2, r1
 80028de:	2300      	movs	r3, #0
 80028e0:	68f9      	ldr	r1, [r7, #12]
 80028e2:	3104      	adds	r1, #4
 80028e4:	4613      	mov	r3, r2
 80028e6:	600b      	str	r3, [r1, #0]
}
 80028e8:	bf00      	nop
 80028ea:	3714      	adds	r7, #20
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr
 80028f4:	40022000 	.word	0x40022000

080028f8 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b089      	sub	sp, #36	; 0x24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8002902:	2340      	movs	r3, #64	; 0x40
 8002904:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800290e:	4b14      	ldr	r3, [pc, #80]	; (8002960 <FLASH_Program_Fast+0x68>)
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	4a13      	ldr	r2, [pc, #76]	; (8002960 <FLASH_Program_Fast+0x68>)
 8002914:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002918:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800291a:	f3ef 8310 	mrs	r3, PRIMASK
 800291e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002920:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8002922:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002924:	b672      	cpsid	i
}
 8002926:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	3304      	adds	r3, #4
 8002934:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	3304      	adds	r3, #4
 800293a:	617b      	str	r3, [r7, #20]
    row_index--;
 800293c:	7ffb      	ldrb	r3, [r7, #31]
 800293e:	3b01      	subs	r3, #1
 8002940:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8002942:	7ffb      	ldrb	r3, [r7, #31]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d1ef      	bne.n	8002928 <FLASH_Program_Fast+0x30>
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	f383 8810 	msr	PRIMASK, r3
}
 8002952:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8002954:	bf00      	nop
 8002956:	3724      	adds	r7, #36	; 0x24
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	40022000 	.word	0x40022000

08002964 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800296e:	4b49      	ldr	r3, [pc, #292]	; (8002a94 <HAL_FLASHEx_Erase+0x130>)
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d101      	bne.n	800297a <HAL_FLASHEx_Erase+0x16>
 8002976:	2302      	movs	r3, #2
 8002978:	e087      	b.n	8002a8a <HAL_FLASHEx_Erase+0x126>
 800297a:	4b46      	ldr	r3, [pc, #280]	; (8002a94 <HAL_FLASHEx_Erase+0x130>)
 800297c:	2201      	movs	r2, #1
 800297e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002980:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002984:	f7ff ff3c 	bl	8002800 <FLASH_WaitForLastOperation>
 8002988:	4603      	mov	r3, r0
 800298a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800298c:	7bfb      	ldrb	r3, [r7, #15]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d177      	bne.n	8002a82 <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002992:	4b40      	ldr	r3, [pc, #256]	; (8002a94 <HAL_FLASHEx_Erase+0x130>)
 8002994:	2200      	movs	r2, #0
 8002996:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8002998:	4b3f      	ldr	r3, [pc, #252]	; (8002a98 <HAL_FLASHEx_Erase+0x134>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d013      	beq.n	80029cc <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80029a4:	4b3c      	ldr	r3, [pc, #240]	; (8002a98 <HAL_FLASHEx_Erase+0x134>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d009      	beq.n	80029c4 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 80029b0:	4b39      	ldr	r3, [pc, #228]	; (8002a98 <HAL_FLASHEx_Erase+0x134>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a38      	ldr	r2, [pc, #224]	; (8002a98 <HAL_FLASHEx_Erase+0x134>)
 80029b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80029ba:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80029bc:	4b35      	ldr	r3, [pc, #212]	; (8002a94 <HAL_FLASHEx_Erase+0x130>)
 80029be:	2203      	movs	r2, #3
 80029c0:	771a      	strb	r2, [r3, #28]
 80029c2:	e016      	b.n	80029f2 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 80029c4:	4b33      	ldr	r3, [pc, #204]	; (8002a94 <HAL_FLASHEx_Erase+0x130>)
 80029c6:	2201      	movs	r2, #1
 80029c8:	771a      	strb	r2, [r3, #28]
 80029ca:	e012      	b.n	80029f2 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80029cc:	4b32      	ldr	r3, [pc, #200]	; (8002a98 <HAL_FLASHEx_Erase+0x134>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d009      	beq.n	80029ec <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80029d8:	4b2f      	ldr	r3, [pc, #188]	; (8002a98 <HAL_FLASHEx_Erase+0x134>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a2e      	ldr	r2, [pc, #184]	; (8002a98 <HAL_FLASHEx_Erase+0x134>)
 80029de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80029e2:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80029e4:	4b2b      	ldr	r3, [pc, #172]	; (8002a94 <HAL_FLASHEx_Erase+0x130>)
 80029e6:	2202      	movs	r2, #2
 80029e8:	771a      	strb	r2, [r3, #28]
 80029ea:	e002      	b.n	80029f2 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80029ec:	4b29      	ldr	r3, [pc, #164]	; (8002a94 <HAL_FLASHEx_Erase+0x130>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d113      	bne.n	8002a22 <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f000 f84c 	bl	8002a9c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a04:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002a08:	f7ff fefa 	bl	8002800 <FLASH_WaitForLastOperation>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8002a10:	4b21      	ldr	r3, [pc, #132]	; (8002a98 <HAL_FLASHEx_Erase+0x134>)
 8002a12:	695b      	ldr	r3, [r3, #20]
 8002a14:	4a20      	ldr	r2, [pc, #128]	; (8002a98 <HAL_FLASHEx_Erase+0x134>)
 8002a16:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002a1a:	f023 0304 	bic.w	r3, r3, #4
 8002a1e:	6153      	str	r3, [r2, #20]
 8002a20:	e02d      	b.n	8002a7e <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	f04f 32ff 	mov.w	r2, #4294967295
 8002a28:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	60bb      	str	r3, [r7, #8]
 8002a30:	e01d      	b.n	8002a6e <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	4619      	mov	r1, r3
 8002a38:	68b8      	ldr	r0, [r7, #8]
 8002a3a:	f000 f857 	bl	8002aec <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a3e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002a42:	f7ff fedd 	bl	8002800 <FLASH_WaitForLastOperation>
 8002a46:	4603      	mov	r3, r0
 8002a48:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8002a4a:	4b13      	ldr	r3, [pc, #76]	; (8002a98 <HAL_FLASHEx_Erase+0x134>)
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	4a12      	ldr	r2, [pc, #72]	; (8002a98 <HAL_FLASHEx_Erase+0x134>)
 8002a50:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002a54:	f023 0302 	bic.w	r3, r3, #2
 8002a58:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8002a5a:	7bfb      	ldrb	r3, [r7, #15]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d003      	beq.n	8002a68 <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	601a      	str	r2, [r3, #0]
          break;
 8002a66:	e00a      	b.n	8002a7e <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	60bb      	str	r3, [r7, #8]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689a      	ldr	r2, [r3, #8]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	4413      	add	r3, r2
 8002a78:	68ba      	ldr	r2, [r7, #8]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d3d9      	bcc.n	8002a32 <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002a7e:	f000 f86b 	bl	8002b58 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002a82:	4b04      	ldr	r3, [pc, #16]	; (8002a94 <HAL_FLASHEx_Erase+0x130>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	701a      	strb	r2, [r3, #0]

  return status;
 8002a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	20000010 	.word	0x20000010
 8002a98:	40022000 	.word	0x40022000

08002a9c <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d005      	beq.n	8002aba <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8002aae:	4b0e      	ldr	r3, [pc, #56]	; (8002ae8 <FLASH_MassErase+0x4c>)
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	4a0d      	ldr	r2, [pc, #52]	; (8002ae8 <FLASH_MassErase+0x4c>)
 8002ab4:	f043 0304 	orr.w	r3, r3, #4
 8002ab8:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d005      	beq.n	8002ad0 <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8002ac4:	4b08      	ldr	r3, [pc, #32]	; (8002ae8 <FLASH_MassErase+0x4c>)
 8002ac6:	695b      	ldr	r3, [r3, #20]
 8002ac8:	4a07      	ldr	r2, [pc, #28]	; (8002ae8 <FLASH_MassErase+0x4c>)
 8002aca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ace:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002ad0:	4b05      	ldr	r3, [pc, #20]	; (8002ae8 <FLASH_MassErase+0x4c>)
 8002ad2:	695b      	ldr	r3, [r3, #20]
 8002ad4:	4a04      	ldr	r2, [pc, #16]	; (8002ae8 <FLASH_MassErase+0x4c>)
 8002ad6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ada:	6153      	str	r3, [r2, #20]
}
 8002adc:	bf00      	nop
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr
 8002ae8:	40022000 	.word	0x40022000

08002aec <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	f003 0301 	and.w	r3, r3, #1
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d006      	beq.n	8002b0e <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8002b00:	4b14      	ldr	r3, [pc, #80]	; (8002b54 <FLASH_PageErase+0x68>)
 8002b02:	695b      	ldr	r3, [r3, #20]
 8002b04:	4a13      	ldr	r2, [pc, #76]	; (8002b54 <FLASH_PageErase+0x68>)
 8002b06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b0a:	6153      	str	r3, [r2, #20]
 8002b0c:	e005      	b.n	8002b1a <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8002b0e:	4b11      	ldr	r3, [pc, #68]	; (8002b54 <FLASH_PageErase+0x68>)
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	4a10      	ldr	r2, [pc, #64]	; (8002b54 <FLASH_PageErase+0x68>)
 8002b14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b18:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8002b1a:	4b0e      	ldr	r3, [pc, #56]	; (8002b54 <FLASH_PageErase+0x68>)
 8002b1c:	695b      	ldr	r3, [r3, #20]
 8002b1e:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8002b2a:	490a      	ldr	r1, [pc, #40]	; (8002b54 <FLASH_PageErase+0x68>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002b30:	4b08      	ldr	r3, [pc, #32]	; (8002b54 <FLASH_PageErase+0x68>)
 8002b32:	695b      	ldr	r3, [r3, #20]
 8002b34:	4a07      	ldr	r2, [pc, #28]	; (8002b54 <FLASH_PageErase+0x68>)
 8002b36:	f043 0302 	orr.w	r3, r3, #2
 8002b3a:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002b3c:	4b05      	ldr	r3, [pc, #20]	; (8002b54 <FLASH_PageErase+0x68>)
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	4a04      	ldr	r2, [pc, #16]	; (8002b54 <FLASH_PageErase+0x68>)
 8002b42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b46:	6153      	str	r3, [r2, #20]
}
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr
 8002b54:	40022000 	.word	0x40022000

08002b58 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8002b5e:	4b21      	ldr	r3, [pc, #132]	; (8002be4 <FLASH_FlushCaches+0x8c>)
 8002b60:	7f1b      	ldrb	r3, [r3, #28]
 8002b62:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8002b64:	79fb      	ldrb	r3, [r7, #7]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d002      	beq.n	8002b70 <FLASH_FlushCaches+0x18>
 8002b6a:	79fb      	ldrb	r3, [r7, #7]
 8002b6c:	2b03      	cmp	r3, #3
 8002b6e:	d117      	bne.n	8002ba0 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002b70:	4b1d      	ldr	r3, [pc, #116]	; (8002be8 <FLASH_FlushCaches+0x90>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a1c      	ldr	r2, [pc, #112]	; (8002be8 <FLASH_FlushCaches+0x90>)
 8002b76:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b7a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002b7c:	4b1a      	ldr	r3, [pc, #104]	; (8002be8 <FLASH_FlushCaches+0x90>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a19      	ldr	r2, [pc, #100]	; (8002be8 <FLASH_FlushCaches+0x90>)
 8002b82:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b86:	6013      	str	r3, [r2, #0]
 8002b88:	4b17      	ldr	r3, [pc, #92]	; (8002be8 <FLASH_FlushCaches+0x90>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a16      	ldr	r2, [pc, #88]	; (8002be8 <FLASH_FlushCaches+0x90>)
 8002b8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b92:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b94:	4b14      	ldr	r3, [pc, #80]	; (8002be8 <FLASH_FlushCaches+0x90>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a13      	ldr	r2, [pc, #76]	; (8002be8 <FLASH_FlushCaches+0x90>)
 8002b9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b9e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8002ba0:	79fb      	ldrb	r3, [r7, #7]
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d002      	beq.n	8002bac <FLASH_FlushCaches+0x54>
 8002ba6:	79fb      	ldrb	r3, [r7, #7]
 8002ba8:	2b03      	cmp	r3, #3
 8002baa:	d111      	bne.n	8002bd0 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002bac:	4b0e      	ldr	r3, [pc, #56]	; (8002be8 <FLASH_FlushCaches+0x90>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a0d      	ldr	r2, [pc, #52]	; (8002be8 <FLASH_FlushCaches+0x90>)
 8002bb2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002bb6:	6013      	str	r3, [r2, #0]
 8002bb8:	4b0b      	ldr	r3, [pc, #44]	; (8002be8 <FLASH_FlushCaches+0x90>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a0a      	ldr	r2, [pc, #40]	; (8002be8 <FLASH_FlushCaches+0x90>)
 8002bbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002bc2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002bc4:	4b08      	ldr	r3, [pc, #32]	; (8002be8 <FLASH_FlushCaches+0x90>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a07      	ldr	r2, [pc, #28]	; (8002be8 <FLASH_FlushCaches+0x90>)
 8002bca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bce:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002bd0:	4b04      	ldr	r3, [pc, #16]	; (8002be4 <FLASH_FlushCaches+0x8c>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	771a      	strb	r2, [r3, #28]
}
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	20000010 	.word	0x20000010
 8002be8:	40022000 	.word	0x40022000

08002bec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b087      	sub	sp, #28
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bfa:	e17f      	b.n	8002efc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	2101      	movs	r1, #1
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	fa01 f303 	lsl.w	r3, r1, r3
 8002c08:	4013      	ands	r3, r2
 8002c0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f000 8171 	beq.w	8002ef6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f003 0303 	and.w	r3, r3, #3
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d005      	beq.n	8002c2c <HAL_GPIO_Init+0x40>
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f003 0303 	and.w	r3, r3, #3
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d130      	bne.n	8002c8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	2203      	movs	r2, #3
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	693a      	ldr	r2, [r7, #16]
 8002c40:	4013      	ands	r3, r2
 8002c42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	68da      	ldr	r2, [r3, #12]
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c62:	2201      	movs	r2, #1
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6a:	43db      	mvns	r3, r3
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	091b      	lsrs	r3, r3, #4
 8002c78:	f003 0201 	and.w	r2, r3, #1
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f003 0303 	and.w	r3, r3, #3
 8002c96:	2b03      	cmp	r3, #3
 8002c98:	d118      	bne.n	8002ccc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	4013      	ands	r3, r2
 8002cae:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	08db      	lsrs	r3, r3, #3
 8002cb6:	f003 0201 	and.w	r2, r3, #1
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f003 0303 	and.w	r3, r3, #3
 8002cd4:	2b03      	cmp	r3, #3
 8002cd6:	d017      	beq.n	8002d08 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	2203      	movs	r2, #3
 8002ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce8:	43db      	mvns	r3, r3
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	4013      	ands	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	689a      	ldr	r2, [r3, #8]
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	005b      	lsls	r3, r3, #1
 8002cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f003 0303 	and.w	r3, r3, #3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d123      	bne.n	8002d5c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	08da      	lsrs	r2, r3, #3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	3208      	adds	r2, #8
 8002d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d20:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	f003 0307 	and.w	r3, r3, #7
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	220f      	movs	r2, #15
 8002d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	43db      	mvns	r3, r3
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	4013      	ands	r3, r2
 8002d36:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	691a      	ldr	r2, [r3, #16]
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	f003 0307 	and.w	r3, r3, #7
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	08da      	lsrs	r2, r3, #3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	3208      	adds	r2, #8
 8002d56:	6939      	ldr	r1, [r7, #16]
 8002d58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	2203      	movs	r2, #3
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	43db      	mvns	r3, r3
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	4013      	ands	r3, r2
 8002d72:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f003 0203 	and.w	r2, r3, #3
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	f000 80ac 	beq.w	8002ef6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d9e:	4b5f      	ldr	r3, [pc, #380]	; (8002f1c <HAL_GPIO_Init+0x330>)
 8002da0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002da2:	4a5e      	ldr	r2, [pc, #376]	; (8002f1c <HAL_GPIO_Init+0x330>)
 8002da4:	f043 0301 	orr.w	r3, r3, #1
 8002da8:	6613      	str	r3, [r2, #96]	; 0x60
 8002daa:	4b5c      	ldr	r3, [pc, #368]	; (8002f1c <HAL_GPIO_Init+0x330>)
 8002dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	60bb      	str	r3, [r7, #8]
 8002db4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002db6:	4a5a      	ldr	r2, [pc, #360]	; (8002f20 <HAL_GPIO_Init+0x334>)
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	089b      	lsrs	r3, r3, #2
 8002dbc:	3302      	adds	r3, #2
 8002dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	f003 0303 	and.w	r3, r3, #3
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	220f      	movs	r2, #15
 8002dce:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd2:	43db      	mvns	r3, r3
 8002dd4:	693a      	ldr	r2, [r7, #16]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002de0:	d025      	beq.n	8002e2e <HAL_GPIO_Init+0x242>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a4f      	ldr	r2, [pc, #316]	; (8002f24 <HAL_GPIO_Init+0x338>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d01f      	beq.n	8002e2a <HAL_GPIO_Init+0x23e>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a4e      	ldr	r2, [pc, #312]	; (8002f28 <HAL_GPIO_Init+0x33c>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d019      	beq.n	8002e26 <HAL_GPIO_Init+0x23a>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a4d      	ldr	r2, [pc, #308]	; (8002f2c <HAL_GPIO_Init+0x340>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d013      	beq.n	8002e22 <HAL_GPIO_Init+0x236>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a4c      	ldr	r2, [pc, #304]	; (8002f30 <HAL_GPIO_Init+0x344>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d00d      	beq.n	8002e1e <HAL_GPIO_Init+0x232>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a4b      	ldr	r2, [pc, #300]	; (8002f34 <HAL_GPIO_Init+0x348>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d007      	beq.n	8002e1a <HAL_GPIO_Init+0x22e>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a4a      	ldr	r2, [pc, #296]	; (8002f38 <HAL_GPIO_Init+0x34c>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d101      	bne.n	8002e16 <HAL_GPIO_Init+0x22a>
 8002e12:	2306      	movs	r3, #6
 8002e14:	e00c      	b.n	8002e30 <HAL_GPIO_Init+0x244>
 8002e16:	2307      	movs	r3, #7
 8002e18:	e00a      	b.n	8002e30 <HAL_GPIO_Init+0x244>
 8002e1a:	2305      	movs	r3, #5
 8002e1c:	e008      	b.n	8002e30 <HAL_GPIO_Init+0x244>
 8002e1e:	2304      	movs	r3, #4
 8002e20:	e006      	b.n	8002e30 <HAL_GPIO_Init+0x244>
 8002e22:	2303      	movs	r3, #3
 8002e24:	e004      	b.n	8002e30 <HAL_GPIO_Init+0x244>
 8002e26:	2302      	movs	r3, #2
 8002e28:	e002      	b.n	8002e30 <HAL_GPIO_Init+0x244>
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e000      	b.n	8002e30 <HAL_GPIO_Init+0x244>
 8002e2e:	2300      	movs	r3, #0
 8002e30:	697a      	ldr	r2, [r7, #20]
 8002e32:	f002 0203 	and.w	r2, r2, #3
 8002e36:	0092      	lsls	r2, r2, #2
 8002e38:	4093      	lsls	r3, r2
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e40:	4937      	ldr	r1, [pc, #220]	; (8002f20 <HAL_GPIO_Init+0x334>)
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	089b      	lsrs	r3, r3, #2
 8002e46:	3302      	adds	r3, #2
 8002e48:	693a      	ldr	r2, [r7, #16]
 8002e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e4e:	4b3b      	ldr	r3, [pc, #236]	; (8002f3c <HAL_GPIO_Init+0x350>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	43db      	mvns	r3, r3
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d003      	beq.n	8002e72 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002e6a:	693a      	ldr	r2, [r7, #16]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e72:	4a32      	ldr	r2, [pc, #200]	; (8002f3c <HAL_GPIO_Init+0x350>)
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e78:	4b30      	ldr	r3, [pc, #192]	; (8002f3c <HAL_GPIO_Init+0x350>)
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	43db      	mvns	r3, r3
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	4013      	ands	r3, r2
 8002e86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d003      	beq.n	8002e9c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002e94:	693a      	ldr	r2, [r7, #16]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e9c:	4a27      	ldr	r2, [pc, #156]	; (8002f3c <HAL_GPIO_Init+0x350>)
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002ea2:	4b26      	ldr	r3, [pc, #152]	; (8002f3c <HAL_GPIO_Init+0x350>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	43db      	mvns	r3, r3
 8002eac:	693a      	ldr	r2, [r7, #16]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d003      	beq.n	8002ec6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ec6:	4a1d      	ldr	r2, [pc, #116]	; (8002f3c <HAL_GPIO_Init+0x350>)
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002ecc:	4b1b      	ldr	r3, [pc, #108]	; (8002f3c <HAL_GPIO_Init+0x350>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	43db      	mvns	r3, r3
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	4013      	ands	r3, r2
 8002eda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d003      	beq.n	8002ef0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ef0:	4a12      	ldr	r2, [pc, #72]	; (8002f3c <HAL_GPIO_Init+0x350>)
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	3301      	adds	r3, #1
 8002efa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	fa22 f303 	lsr.w	r3, r2, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	f47f ae78 	bne.w	8002bfc <HAL_GPIO_Init+0x10>
  }
}
 8002f0c:	bf00      	nop
 8002f0e:	bf00      	nop
 8002f10:	371c      	adds	r7, #28
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	40010000 	.word	0x40010000
 8002f24:	48000400 	.word	0x48000400
 8002f28:	48000800 	.word	0x48000800
 8002f2c:	48000c00 	.word	0x48000c00
 8002f30:	48001000 	.word	0x48001000
 8002f34:	48001400 	.word	0x48001400
 8002f38:	48001800 	.word	0x48001800
 8002f3c:	40010400 	.word	0x40010400

08002f40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	460b      	mov	r3, r1
 8002f4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	691a      	ldr	r2, [r3, #16]
 8002f50:	887b      	ldrh	r3, [r7, #2]
 8002f52:	4013      	ands	r3, r2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d002      	beq.n	8002f5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	73fb      	strb	r3, [r7, #15]
 8002f5c:	e001      	b.n	8002f62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3714      	adds	r7, #20
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	460b      	mov	r3, r1
 8002f7a:	807b      	strh	r3, [r7, #2]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f80:	787b      	ldrb	r3, [r7, #1]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d003      	beq.n	8002f8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f86:	887a      	ldrh	r2, [r7, #2]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f8c:	e002      	b.n	8002f94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f8e:	887a      	ldrh	r2, [r7, #2]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	460b      	mov	r3, r1
 8002faa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	695b      	ldr	r3, [r3, #20]
 8002fb0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002fb2:	887a      	ldrh	r2, [r7, #2]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	041a      	lsls	r2, r3, #16
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	43d9      	mvns	r1, r3
 8002fbe:	887b      	ldrh	r3, [r7, #2]
 8002fc0:	400b      	ands	r3, r1
 8002fc2:	431a      	orrs	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	619a      	str	r2, [r3, #24]
}
 8002fc8:	bf00      	nop
 8002fca:	3714      	adds	r7, #20
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e081      	b.n	80030ea <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d106      	bne.n	8003000 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f7fe ffd2 	bl	8001fa4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2224      	movs	r2, #36	; 0x24
 8003004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f022 0201 	bic.w	r2, r2, #1
 8003016:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003024:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	689a      	ldr	r2, [r3, #8]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003034:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d107      	bne.n	800304e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	689a      	ldr	r2, [r3, #8]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800304a:	609a      	str	r2, [r3, #8]
 800304c:	e006      	b.n	800305c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	689a      	ldr	r2, [r3, #8]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800305a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	2b02      	cmp	r3, #2
 8003062:	d104      	bne.n	800306e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800306c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	6812      	ldr	r2, [r2, #0]
 8003078:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800307c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003080:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68da      	ldr	r2, [r3, #12]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003090:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	691a      	ldr	r2, [r3, #16]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	430a      	orrs	r2, r1
 80030aa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	69d9      	ldr	r1, [r3, #28]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a1a      	ldr	r2, [r3, #32]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	430a      	orrs	r2, r1
 80030ba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f042 0201 	orr.w	r2, r2, #1
 80030ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2220      	movs	r2, #32
 80030d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
	...

080030f4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b088      	sub	sp, #32
 80030f8:	af02      	add	r7, sp, #8
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	4608      	mov	r0, r1
 80030fe:	4611      	mov	r1, r2
 8003100:	461a      	mov	r2, r3
 8003102:	4603      	mov	r3, r0
 8003104:	817b      	strh	r3, [r7, #10]
 8003106:	460b      	mov	r3, r1
 8003108:	813b      	strh	r3, [r7, #8]
 800310a:	4613      	mov	r3, r2
 800310c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b20      	cmp	r3, #32
 8003118:	f040 80f9 	bne.w	800330e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800311c:	6a3b      	ldr	r3, [r7, #32]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d002      	beq.n	8003128 <HAL_I2C_Mem_Write+0x34>
 8003122:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003124:	2b00      	cmp	r3, #0
 8003126:	d105      	bne.n	8003134 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800312e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e0ed      	b.n	8003310 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800313a:	2b01      	cmp	r3, #1
 800313c:	d101      	bne.n	8003142 <HAL_I2C_Mem_Write+0x4e>
 800313e:	2302      	movs	r3, #2
 8003140:	e0e6      	b.n	8003310 <HAL_I2C_Mem_Write+0x21c>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800314a:	f7ff f9cd 	bl	80024e8 <HAL_GetTick>
 800314e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	9300      	str	r3, [sp, #0]
 8003154:	2319      	movs	r3, #25
 8003156:	2201      	movs	r2, #1
 8003158:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f000 fac3 	bl	80036e8 <I2C_WaitOnFlagUntilTimeout>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e0d1      	b.n	8003310 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2221      	movs	r2, #33	; 0x21
 8003170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2240      	movs	r2, #64	; 0x40
 8003178:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2200      	movs	r2, #0
 8003180:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6a3a      	ldr	r2, [r7, #32]
 8003186:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800318c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003194:	88f8      	ldrh	r0, [r7, #6]
 8003196:	893a      	ldrh	r2, [r7, #8]
 8003198:	8979      	ldrh	r1, [r7, #10]
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	9301      	str	r3, [sp, #4]
 800319e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a0:	9300      	str	r3, [sp, #0]
 80031a2:	4603      	mov	r3, r0
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	f000 f9d3 	bl	8003550 <I2C_RequestMemoryWrite>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d005      	beq.n	80031bc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e0a9      	b.n	8003310 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	2bff      	cmp	r3, #255	; 0xff
 80031c4:	d90e      	bls.n	80031e4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	22ff      	movs	r2, #255	; 0xff
 80031ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d0:	b2da      	uxtb	r2, r3
 80031d2:	8979      	ldrh	r1, [r7, #10]
 80031d4:	2300      	movs	r3, #0
 80031d6:	9300      	str	r3, [sp, #0]
 80031d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031dc:	68f8      	ldr	r0, [r7, #12]
 80031de:	f000 fc2b 	bl	8003a38 <I2C_TransferConfig>
 80031e2:	e00f      	b.n	8003204 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f2:	b2da      	uxtb	r2, r3
 80031f4:	8979      	ldrh	r1, [r7, #10]
 80031f6:	2300      	movs	r3, #0
 80031f8:	9300      	str	r3, [sp, #0]
 80031fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f000 fc1a 	bl	8003a38 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003204:	697a      	ldr	r2, [r7, #20]
 8003206:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003208:	68f8      	ldr	r0, [r7, #12]
 800320a:	f000 faad 	bl	8003768 <I2C_WaitOnTXISFlagUntilTimeout>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e07b      	b.n	8003310 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321c:	781a      	ldrb	r2, [r3, #0]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	1c5a      	adds	r2, r3, #1
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003232:	b29b      	uxth	r3, r3
 8003234:	3b01      	subs	r3, #1
 8003236:	b29a      	uxth	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003240:	3b01      	subs	r3, #1
 8003242:	b29a      	uxth	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800324c:	b29b      	uxth	r3, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d034      	beq.n	80032bc <HAL_I2C_Mem_Write+0x1c8>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003256:	2b00      	cmp	r3, #0
 8003258:	d130      	bne.n	80032bc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	9300      	str	r3, [sp, #0]
 800325e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003260:	2200      	movs	r2, #0
 8003262:	2180      	movs	r1, #128	; 0x80
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	f000 fa3f 	bl	80036e8 <I2C_WaitOnFlagUntilTimeout>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d001      	beq.n	8003274 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e04d      	b.n	8003310 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003278:	b29b      	uxth	r3, r3
 800327a:	2bff      	cmp	r3, #255	; 0xff
 800327c:	d90e      	bls.n	800329c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	22ff      	movs	r2, #255	; 0xff
 8003282:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003288:	b2da      	uxtb	r2, r3
 800328a:	8979      	ldrh	r1, [r7, #10]
 800328c:	2300      	movs	r3, #0
 800328e:	9300      	str	r3, [sp, #0]
 8003290:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	f000 fbcf 	bl	8003a38 <I2C_TransferConfig>
 800329a:	e00f      	b.n	80032bc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032aa:	b2da      	uxtb	r2, r3
 80032ac:	8979      	ldrh	r1, [r7, #10]
 80032ae:	2300      	movs	r3, #0
 80032b0:	9300      	str	r3, [sp, #0]
 80032b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032b6:	68f8      	ldr	r0, [r7, #12]
 80032b8:	f000 fbbe 	bl	8003a38 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d19e      	bne.n	8003204 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f000 fa8c 	bl	80037e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e01a      	b.n	8003310 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2220      	movs	r2, #32
 80032e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	6859      	ldr	r1, [r3, #4]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	4b0a      	ldr	r3, [pc, #40]	; (8003318 <HAL_I2C_Mem_Write+0x224>)
 80032ee:	400b      	ands	r3, r1
 80032f0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2220      	movs	r2, #32
 80032f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800330a:	2300      	movs	r3, #0
 800330c:	e000      	b.n	8003310 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800330e:	2302      	movs	r3, #2
  }
}
 8003310:	4618      	mov	r0, r3
 8003312:	3718      	adds	r7, #24
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	fe00e800 	.word	0xfe00e800

0800331c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b088      	sub	sp, #32
 8003320:	af02      	add	r7, sp, #8
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	4608      	mov	r0, r1
 8003326:	4611      	mov	r1, r2
 8003328:	461a      	mov	r2, r3
 800332a:	4603      	mov	r3, r0
 800332c:	817b      	strh	r3, [r7, #10]
 800332e:	460b      	mov	r3, r1
 8003330:	813b      	strh	r3, [r7, #8]
 8003332:	4613      	mov	r3, r2
 8003334:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b20      	cmp	r3, #32
 8003340:	f040 80fd 	bne.w	800353e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003344:	6a3b      	ldr	r3, [r7, #32]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d002      	beq.n	8003350 <HAL_I2C_Mem_Read+0x34>
 800334a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800334c:	2b00      	cmp	r3, #0
 800334e:	d105      	bne.n	800335c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003356:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e0f1      	b.n	8003540 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003362:	2b01      	cmp	r3, #1
 8003364:	d101      	bne.n	800336a <HAL_I2C_Mem_Read+0x4e>
 8003366:	2302      	movs	r3, #2
 8003368:	e0ea      	b.n	8003540 <HAL_I2C_Mem_Read+0x224>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003372:	f7ff f8b9 	bl	80024e8 <HAL_GetTick>
 8003376:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	9300      	str	r3, [sp, #0]
 800337c:	2319      	movs	r3, #25
 800337e:	2201      	movs	r2, #1
 8003380:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	f000 f9af 	bl	80036e8 <I2C_WaitOnFlagUntilTimeout>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e0d5      	b.n	8003540 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2222      	movs	r2, #34	; 0x22
 8003398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2240      	movs	r2, #64	; 0x40
 80033a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2200      	movs	r2, #0
 80033a8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6a3a      	ldr	r2, [r7, #32]
 80033ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80033b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80033bc:	88f8      	ldrh	r0, [r7, #6]
 80033be:	893a      	ldrh	r2, [r7, #8]
 80033c0:	8979      	ldrh	r1, [r7, #10]
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	9301      	str	r3, [sp, #4]
 80033c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c8:	9300      	str	r3, [sp, #0]
 80033ca:	4603      	mov	r3, r0
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f000 f913 	bl	80035f8 <I2C_RequestMemoryRead>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d005      	beq.n	80033e4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e0ad      	b.n	8003540 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	2bff      	cmp	r3, #255	; 0xff
 80033ec:	d90e      	bls.n	800340c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	22ff      	movs	r2, #255	; 0xff
 80033f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033f8:	b2da      	uxtb	r2, r3
 80033fa:	8979      	ldrh	r1, [r7, #10]
 80033fc:	4b52      	ldr	r3, [pc, #328]	; (8003548 <HAL_I2C_Mem_Read+0x22c>)
 80033fe:	9300      	str	r3, [sp, #0]
 8003400:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	f000 fb17 	bl	8003a38 <I2C_TransferConfig>
 800340a:	e00f      	b.n	800342c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003410:	b29a      	uxth	r2, r3
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800341a:	b2da      	uxtb	r2, r3
 800341c:	8979      	ldrh	r1, [r7, #10]
 800341e:	4b4a      	ldr	r3, [pc, #296]	; (8003548 <HAL_I2C_Mem_Read+0x22c>)
 8003420:	9300      	str	r3, [sp, #0]
 8003422:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003426:	68f8      	ldr	r0, [r7, #12]
 8003428:	f000 fb06 	bl	8003a38 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	9300      	str	r3, [sp, #0]
 8003430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003432:	2200      	movs	r2, #0
 8003434:	2104      	movs	r1, #4
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	f000 f956 	bl	80036e8 <I2C_WaitOnFlagUntilTimeout>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e07c      	b.n	8003540 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003450:	b2d2      	uxtb	r2, r2
 8003452:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003458:	1c5a      	adds	r2, r3, #1
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003462:	3b01      	subs	r3, #1
 8003464:	b29a      	uxth	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800346e:	b29b      	uxth	r3, r3
 8003470:	3b01      	subs	r3, #1
 8003472:	b29a      	uxth	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800347c:	b29b      	uxth	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d034      	beq.n	80034ec <HAL_I2C_Mem_Read+0x1d0>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003486:	2b00      	cmp	r3, #0
 8003488:	d130      	bne.n	80034ec <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	9300      	str	r3, [sp, #0]
 800348e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003490:	2200      	movs	r2, #0
 8003492:	2180      	movs	r1, #128	; 0x80
 8003494:	68f8      	ldr	r0, [r7, #12]
 8003496:	f000 f927 	bl	80036e8 <I2C_WaitOnFlagUntilTimeout>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d001      	beq.n	80034a4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e04d      	b.n	8003540 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	2bff      	cmp	r3, #255	; 0xff
 80034ac:	d90e      	bls.n	80034cc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	22ff      	movs	r2, #255	; 0xff
 80034b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b8:	b2da      	uxtb	r2, r3
 80034ba:	8979      	ldrh	r1, [r7, #10]
 80034bc:	2300      	movs	r3, #0
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034c4:	68f8      	ldr	r0, [r7, #12]
 80034c6:	f000 fab7 	bl	8003a38 <I2C_TransferConfig>
 80034ca:	e00f      	b.n	80034ec <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d0:	b29a      	uxth	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034da:	b2da      	uxtb	r2, r3
 80034dc:	8979      	ldrh	r1, [r7, #10]
 80034de:	2300      	movs	r3, #0
 80034e0:	9300      	str	r3, [sp, #0]
 80034e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f000 faa6 	bl	8003a38 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d19a      	bne.n	800342c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034fa:	68f8      	ldr	r0, [r7, #12]
 80034fc:	f000 f974 	bl	80037e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e01a      	b.n	8003540 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2220      	movs	r2, #32
 8003510:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	6859      	ldr	r1, [r3, #4]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	4b0b      	ldr	r3, [pc, #44]	; (800354c <HAL_I2C_Mem_Read+0x230>)
 800351e:	400b      	ands	r3, r1
 8003520:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2220      	movs	r2, #32
 8003526:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800353a:	2300      	movs	r3, #0
 800353c:	e000      	b.n	8003540 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800353e:	2302      	movs	r3, #2
  }
}
 8003540:	4618      	mov	r0, r3
 8003542:	3718      	adds	r7, #24
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	80002400 	.word	0x80002400
 800354c:	fe00e800 	.word	0xfe00e800

08003550 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af02      	add	r7, sp, #8
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	4608      	mov	r0, r1
 800355a:	4611      	mov	r1, r2
 800355c:	461a      	mov	r2, r3
 800355e:	4603      	mov	r3, r0
 8003560:	817b      	strh	r3, [r7, #10]
 8003562:	460b      	mov	r3, r1
 8003564:	813b      	strh	r3, [r7, #8]
 8003566:	4613      	mov	r3, r2
 8003568:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800356a:	88fb      	ldrh	r3, [r7, #6]
 800356c:	b2da      	uxtb	r2, r3
 800356e:	8979      	ldrh	r1, [r7, #10]
 8003570:	4b20      	ldr	r3, [pc, #128]	; (80035f4 <I2C_RequestMemoryWrite+0xa4>)
 8003572:	9300      	str	r3, [sp, #0]
 8003574:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003578:	68f8      	ldr	r0, [r7, #12]
 800357a:	f000 fa5d 	bl	8003a38 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800357e:	69fa      	ldr	r2, [r7, #28]
 8003580:	69b9      	ldr	r1, [r7, #24]
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	f000 f8f0 	bl	8003768 <I2C_WaitOnTXISFlagUntilTimeout>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e02c      	b.n	80035ec <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003592:	88fb      	ldrh	r3, [r7, #6]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d105      	bne.n	80035a4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003598:	893b      	ldrh	r3, [r7, #8]
 800359a:	b2da      	uxtb	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	629a      	str	r2, [r3, #40]	; 0x28
 80035a2:	e015      	b.n	80035d0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80035a4:	893b      	ldrh	r3, [r7, #8]
 80035a6:	0a1b      	lsrs	r3, r3, #8
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	b2da      	uxtb	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035b2:	69fa      	ldr	r2, [r7, #28]
 80035b4:	69b9      	ldr	r1, [r7, #24]
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	f000 f8d6 	bl	8003768 <I2C_WaitOnTXISFlagUntilTimeout>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d001      	beq.n	80035c6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e012      	b.n	80035ec <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80035c6:	893b      	ldrh	r3, [r7, #8]
 80035c8:	b2da      	uxtb	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	9300      	str	r3, [sp, #0]
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	2200      	movs	r2, #0
 80035d8:	2180      	movs	r1, #128	; 0x80
 80035da:	68f8      	ldr	r0, [r7, #12]
 80035dc:	f000 f884 	bl	80036e8 <I2C_WaitOnFlagUntilTimeout>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e000      	b.n	80035ec <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3710      	adds	r7, #16
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	80002000 	.word	0x80002000

080035f8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af02      	add	r7, sp, #8
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	4608      	mov	r0, r1
 8003602:	4611      	mov	r1, r2
 8003604:	461a      	mov	r2, r3
 8003606:	4603      	mov	r3, r0
 8003608:	817b      	strh	r3, [r7, #10]
 800360a:	460b      	mov	r3, r1
 800360c:	813b      	strh	r3, [r7, #8]
 800360e:	4613      	mov	r3, r2
 8003610:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003612:	88fb      	ldrh	r3, [r7, #6]
 8003614:	b2da      	uxtb	r2, r3
 8003616:	8979      	ldrh	r1, [r7, #10]
 8003618:	4b20      	ldr	r3, [pc, #128]	; (800369c <I2C_RequestMemoryRead+0xa4>)
 800361a:	9300      	str	r3, [sp, #0]
 800361c:	2300      	movs	r3, #0
 800361e:	68f8      	ldr	r0, [r7, #12]
 8003620:	f000 fa0a 	bl	8003a38 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003624:	69fa      	ldr	r2, [r7, #28]
 8003626:	69b9      	ldr	r1, [r7, #24]
 8003628:	68f8      	ldr	r0, [r7, #12]
 800362a:	f000 f89d 	bl	8003768 <I2C_WaitOnTXISFlagUntilTimeout>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d001      	beq.n	8003638 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e02c      	b.n	8003692 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003638:	88fb      	ldrh	r3, [r7, #6]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d105      	bne.n	800364a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800363e:	893b      	ldrh	r3, [r7, #8]
 8003640:	b2da      	uxtb	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	629a      	str	r2, [r3, #40]	; 0x28
 8003648:	e015      	b.n	8003676 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800364a:	893b      	ldrh	r3, [r7, #8]
 800364c:	0a1b      	lsrs	r3, r3, #8
 800364e:	b29b      	uxth	r3, r3
 8003650:	b2da      	uxtb	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003658:	69fa      	ldr	r2, [r7, #28]
 800365a:	69b9      	ldr	r1, [r7, #24]
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f000 f883 	bl	8003768 <I2C_WaitOnTXISFlagUntilTimeout>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d001      	beq.n	800366c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e012      	b.n	8003692 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800366c:	893b      	ldrh	r3, [r7, #8]
 800366e:	b2da      	uxtb	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	9300      	str	r3, [sp, #0]
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	2200      	movs	r2, #0
 800367e:	2140      	movs	r1, #64	; 0x40
 8003680:	68f8      	ldr	r0, [r7, #12]
 8003682:	f000 f831 	bl	80036e8 <I2C_WaitOnFlagUntilTimeout>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d001      	beq.n	8003690 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e000      	b.n	8003692 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3710      	adds	r7, #16
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	80002000 	.word	0x80002000

080036a0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d103      	bne.n	80036be <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2200      	movs	r2, #0
 80036bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	f003 0301 	and.w	r3, r3, #1
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d007      	beq.n	80036dc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	699a      	ldr	r2, [r3, #24]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f042 0201 	orr.w	r2, r2, #1
 80036da:	619a      	str	r2, [r3, #24]
  }
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	603b      	str	r3, [r7, #0]
 80036f4:	4613      	mov	r3, r2
 80036f6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036f8:	e022      	b.n	8003740 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003700:	d01e      	beq.n	8003740 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003702:	f7fe fef1 	bl	80024e8 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	683a      	ldr	r2, [r7, #0]
 800370e:	429a      	cmp	r2, r3
 8003710:	d302      	bcc.n	8003718 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d113      	bne.n	8003740 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371c:	f043 0220 	orr.w	r2, r3, #32
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2220      	movs	r2, #32
 8003728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e00f      	b.n	8003760 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	699a      	ldr	r2, [r3, #24]
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	4013      	ands	r3, r2
 800374a:	68ba      	ldr	r2, [r7, #8]
 800374c:	429a      	cmp	r2, r3
 800374e:	bf0c      	ite	eq
 8003750:	2301      	moveq	r3, #1
 8003752:	2300      	movne	r3, #0
 8003754:	b2db      	uxtb	r3, r3
 8003756:	461a      	mov	r2, r3
 8003758:	79fb      	ldrb	r3, [r7, #7]
 800375a:	429a      	cmp	r2, r3
 800375c:	d0cd      	beq.n	80036fa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3710      	adds	r7, #16
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003774:	e02c      	b.n	80037d0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	68b9      	ldr	r1, [r7, #8]
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f000 f870 	bl	8003860 <I2C_IsErrorOccurred>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d001      	beq.n	800378a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e02a      	b.n	80037e0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003790:	d01e      	beq.n	80037d0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003792:	f7fe fea9 	bl	80024e8 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	68ba      	ldr	r2, [r7, #8]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d302      	bcc.n	80037a8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d113      	bne.n	80037d0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ac:	f043 0220 	orr.w	r2, r3, #32
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2220      	movs	r2, #32
 80037b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e007      	b.n	80037e0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d1cb      	bne.n	8003776 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3710      	adds	r7, #16
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037f4:	e028      	b.n	8003848 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	68b9      	ldr	r1, [r7, #8]
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	f000 f830 	bl	8003860 <I2C_IsErrorOccurred>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e026      	b.n	8003858 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800380a:	f7fe fe6d 	bl	80024e8 <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	68ba      	ldr	r2, [r7, #8]
 8003816:	429a      	cmp	r2, r3
 8003818:	d302      	bcc.n	8003820 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d113      	bne.n	8003848 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003824:	f043 0220 	orr.w	r2, r3, #32
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2220      	movs	r2, #32
 8003830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e007      	b.n	8003858 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	f003 0320 	and.w	r3, r3, #32
 8003852:	2b20      	cmp	r3, #32
 8003854:	d1cf      	bne.n	80037f6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3710      	adds	r7, #16
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b08a      	sub	sp, #40	; 0x28
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800386c:	2300      	movs	r3, #0
 800386e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800387a:	2300      	movs	r3, #0
 800387c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	f003 0310 	and.w	r3, r3, #16
 8003888:	2b00      	cmp	r3, #0
 800388a:	d075      	beq.n	8003978 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2210      	movs	r2, #16
 8003892:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003894:	e056      	b.n	8003944 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800389c:	d052      	beq.n	8003944 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800389e:	f7fe fe23 	bl	80024e8 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	68ba      	ldr	r2, [r7, #8]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d302      	bcc.n	80038b4 <I2C_IsErrorOccurred+0x54>
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d147      	bne.n	8003944 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038be:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80038c6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038d6:	d12e      	bne.n	8003936 <I2C_IsErrorOccurred+0xd6>
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038de:	d02a      	beq.n	8003936 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80038e0:	7cfb      	ldrb	r3, [r7, #19]
 80038e2:	2b20      	cmp	r3, #32
 80038e4:	d027      	beq.n	8003936 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	685a      	ldr	r2, [r3, #4]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038f4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80038f6:	f7fe fdf7 	bl	80024e8 <HAL_GetTick>
 80038fa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038fc:	e01b      	b.n	8003936 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80038fe:	f7fe fdf3 	bl	80024e8 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	2b19      	cmp	r3, #25
 800390a:	d914      	bls.n	8003936 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003910:	f043 0220 	orr.w	r2, r3, #32
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2220      	movs	r2, #32
 800391c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	f003 0320 	and.w	r3, r3, #32
 8003940:	2b20      	cmp	r3, #32
 8003942:	d1dc      	bne.n	80038fe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	f003 0320 	and.w	r3, r3, #32
 800394e:	2b20      	cmp	r3, #32
 8003950:	d003      	beq.n	800395a <I2C_IsErrorOccurred+0xfa>
 8003952:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003956:	2b00      	cmp	r3, #0
 8003958:	d09d      	beq.n	8003896 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800395a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800395e:	2b00      	cmp	r3, #0
 8003960:	d103      	bne.n	800396a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2220      	movs	r2, #32
 8003968:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800396a:	6a3b      	ldr	r3, [r7, #32]
 800396c:	f043 0304 	orr.w	r3, r3, #4
 8003970:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00b      	beq.n	80039a2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800398a:	6a3b      	ldr	r3, [r7, #32]
 800398c:	f043 0301 	orr.w	r3, r3, #1
 8003990:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f44f 7280 	mov.w	r2, #256	; 0x100
 800399a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d00b      	beq.n	80039c4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80039ac:	6a3b      	ldr	r3, [r7, #32]
 80039ae:	f043 0308 	orr.w	r3, r3, #8
 80039b2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00b      	beq.n	80039e6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80039ce:	6a3b      	ldr	r3, [r7, #32]
 80039d0:	f043 0302 	orr.w	r3, r3, #2
 80039d4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80039e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d01c      	beq.n	8003a28 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	f7ff fe56 	bl	80036a0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	6859      	ldr	r1, [r3, #4]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	4b0d      	ldr	r3, [pc, #52]	; (8003a34 <I2C_IsErrorOccurred+0x1d4>)
 8003a00:	400b      	ands	r3, r1
 8003a02:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a08:	6a3b      	ldr	r3, [r7, #32]
 8003a0a:	431a      	orrs	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2220      	movs	r2, #32
 8003a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003a28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3728      	adds	r7, #40	; 0x28
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	fe00e800 	.word	0xfe00e800

08003a38 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b087      	sub	sp, #28
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	607b      	str	r3, [r7, #4]
 8003a42:	460b      	mov	r3, r1
 8003a44:	817b      	strh	r3, [r7, #10]
 8003a46:	4613      	mov	r3, r2
 8003a48:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a4a:	897b      	ldrh	r3, [r7, #10]
 8003a4c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a50:	7a7b      	ldrb	r3, [r7, #9]
 8003a52:	041b      	lsls	r3, r3, #16
 8003a54:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a58:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a5e:	6a3b      	ldr	r3, [r7, #32]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a66:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	685a      	ldr	r2, [r3, #4]
 8003a6e:	6a3b      	ldr	r3, [r7, #32]
 8003a70:	0d5b      	lsrs	r3, r3, #21
 8003a72:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003a76:	4b08      	ldr	r3, [pc, #32]	; (8003a98 <I2C_TransferConfig+0x60>)
 8003a78:	430b      	orrs	r3, r1
 8003a7a:	43db      	mvns	r3, r3
 8003a7c:	ea02 0103 	and.w	r1, r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003a8a:	bf00      	nop
 8003a8c:	371c      	adds	r7, #28
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	03ff63ff 	.word	0x03ff63ff

08003a9c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b20      	cmp	r3, #32
 8003ab0:	d138      	bne.n	8003b24 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d101      	bne.n	8003ac0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003abc:	2302      	movs	r3, #2
 8003abe:	e032      	b.n	8003b26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2224      	movs	r2, #36	; 0x24
 8003acc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 0201 	bic.w	r2, r2, #1
 8003ade:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003aee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	6819      	ldr	r1, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	683a      	ldr	r2, [r7, #0]
 8003afc:	430a      	orrs	r2, r1
 8003afe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f042 0201 	orr.w	r2, r2, #1
 8003b0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2220      	movs	r2, #32
 8003b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b20:	2300      	movs	r3, #0
 8003b22:	e000      	b.n	8003b26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b24:	2302      	movs	r3, #2
  }
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr

08003b32 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b32:	b480      	push	{r7}
 8003b34:	b085      	sub	sp, #20
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
 8003b3a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	2b20      	cmp	r3, #32
 8003b46:	d139      	bne.n	8003bbc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d101      	bne.n	8003b56 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003b52:	2302      	movs	r3, #2
 8003b54:	e033      	b.n	8003bbe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2224      	movs	r2, #36	; 0x24
 8003b62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f022 0201 	bic.w	r2, r2, #1
 8003b74:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003b84:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	021b      	lsls	r3, r3, #8
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68fa      	ldr	r2, [r7, #12]
 8003b96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f042 0201 	orr.w	r2, r2, #1
 8003ba6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2220      	movs	r2, #32
 8003bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	e000      	b.n	8003bbe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003bbc:	2302      	movs	r3, #2
  }
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3714      	adds	r7, #20
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
	...

08003bcc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003bd0:	4b04      	ldr	r3, [pc, #16]	; (8003be4 <HAL_PWREx_GetVoltageRange+0x18>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	40007000 	.word	0x40007000

08003be8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bf6:	d130      	bne.n	8003c5a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bf8:	4b23      	ldr	r3, [pc, #140]	; (8003c88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c04:	d038      	beq.n	8003c78 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c06:	4b20      	ldr	r3, [pc, #128]	; (8003c88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c0e:	4a1e      	ldr	r2, [pc, #120]	; (8003c88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c14:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c16:	4b1d      	ldr	r3, [pc, #116]	; (8003c8c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2232      	movs	r2, #50	; 0x32
 8003c1c:	fb02 f303 	mul.w	r3, r2, r3
 8003c20:	4a1b      	ldr	r2, [pc, #108]	; (8003c90 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003c22:	fba2 2303 	umull	r2, r3, r2, r3
 8003c26:	0c9b      	lsrs	r3, r3, #18
 8003c28:	3301      	adds	r3, #1
 8003c2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c2c:	e002      	b.n	8003c34 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	3b01      	subs	r3, #1
 8003c32:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c34:	4b14      	ldr	r3, [pc, #80]	; (8003c88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c36:	695b      	ldr	r3, [r3, #20]
 8003c38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c40:	d102      	bne.n	8003c48 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d1f2      	bne.n	8003c2e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c48:	4b0f      	ldr	r3, [pc, #60]	; (8003c88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c4a:	695b      	ldr	r3, [r3, #20]
 8003c4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c54:	d110      	bne.n	8003c78 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e00f      	b.n	8003c7a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c5a:	4b0b      	ldr	r3, [pc, #44]	; (8003c88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c66:	d007      	beq.n	8003c78 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003c68:	4b07      	ldr	r3, [pc, #28]	; (8003c88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c70:	4a05      	ldr	r2, [pc, #20]	; (8003c88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c76:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3714      	adds	r7, #20
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	40007000 	.word	0x40007000
 8003c8c:	20000004 	.word	0x20000004
 8003c90:	431bde83 	.word	0x431bde83

08003c94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b088      	sub	sp, #32
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e3ca      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ca6:	4b97      	ldr	r3, [pc, #604]	; (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f003 030c 	and.w	r3, r3, #12
 8003cae:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cb0:	4b94      	ldr	r3, [pc, #592]	; (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	f003 0303 	and.w	r3, r3, #3
 8003cb8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0310 	and.w	r3, r3, #16
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f000 80e4 	beq.w	8003e90 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d007      	beq.n	8003cde <HAL_RCC_OscConfig+0x4a>
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	2b0c      	cmp	r3, #12
 8003cd2:	f040 808b 	bne.w	8003dec <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	f040 8087 	bne.w	8003dec <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003cde:	4b89      	ldr	r3, [pc, #548]	; (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d005      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x62>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d101      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e3a2      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a1a      	ldr	r2, [r3, #32]
 8003cfa:	4b82      	ldr	r3, [pc, #520]	; (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0308 	and.w	r3, r3, #8
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d004      	beq.n	8003d10 <HAL_RCC_OscConfig+0x7c>
 8003d06:	4b7f      	ldr	r3, [pc, #508]	; (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d0e:	e005      	b.n	8003d1c <HAL_RCC_OscConfig+0x88>
 8003d10:	4b7c      	ldr	r3, [pc, #496]	; (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003d12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d16:	091b      	lsrs	r3, r3, #4
 8003d18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d223      	bcs.n	8003d68 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a1b      	ldr	r3, [r3, #32]
 8003d24:	4618      	mov	r0, r3
 8003d26:	f000 fd87 	bl	8004838 <RCC_SetFlashLatencyFromMSIRange>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d001      	beq.n	8003d34 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e383      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d34:	4b73      	ldr	r3, [pc, #460]	; (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a72      	ldr	r2, [pc, #456]	; (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003d3a:	f043 0308 	orr.w	r3, r3, #8
 8003d3e:	6013      	str	r3, [r2, #0]
 8003d40:	4b70      	ldr	r3, [pc, #448]	; (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a1b      	ldr	r3, [r3, #32]
 8003d4c:	496d      	ldr	r1, [pc, #436]	; (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d52:	4b6c      	ldr	r3, [pc, #432]	; (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	69db      	ldr	r3, [r3, #28]
 8003d5e:	021b      	lsls	r3, r3, #8
 8003d60:	4968      	ldr	r1, [pc, #416]	; (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	604b      	str	r3, [r1, #4]
 8003d66:	e025      	b.n	8003db4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d68:	4b66      	ldr	r3, [pc, #408]	; (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a65      	ldr	r2, [pc, #404]	; (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003d6e:	f043 0308 	orr.w	r3, r3, #8
 8003d72:	6013      	str	r3, [r2, #0]
 8003d74:	4b63      	ldr	r3, [pc, #396]	; (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a1b      	ldr	r3, [r3, #32]
 8003d80:	4960      	ldr	r1, [pc, #384]	; (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d86:	4b5f      	ldr	r3, [pc, #380]	; (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	69db      	ldr	r3, [r3, #28]
 8003d92:	021b      	lsls	r3, r3, #8
 8003d94:	495b      	ldr	r1, [pc, #364]	; (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d109      	bne.n	8003db4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a1b      	ldr	r3, [r3, #32]
 8003da4:	4618      	mov	r0, r3
 8003da6:	f000 fd47 	bl	8004838 <RCC_SetFlashLatencyFromMSIRange>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d001      	beq.n	8003db4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e343      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003db4:	f000 fc4a 	bl	800464c <HAL_RCC_GetSysClockFreq>
 8003db8:	4602      	mov	r2, r0
 8003dba:	4b52      	ldr	r3, [pc, #328]	; (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	091b      	lsrs	r3, r3, #4
 8003dc0:	f003 030f 	and.w	r3, r3, #15
 8003dc4:	4950      	ldr	r1, [pc, #320]	; (8003f08 <HAL_RCC_OscConfig+0x274>)
 8003dc6:	5ccb      	ldrb	r3, [r1, r3]
 8003dc8:	f003 031f 	and.w	r3, r3, #31
 8003dcc:	fa22 f303 	lsr.w	r3, r2, r3
 8003dd0:	4a4e      	ldr	r2, [pc, #312]	; (8003f0c <HAL_RCC_OscConfig+0x278>)
 8003dd2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003dd4:	4b4e      	ldr	r3, [pc, #312]	; (8003f10 <HAL_RCC_OscConfig+0x27c>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7fe f9f5 	bl	80021c8 <HAL_InitTick>
 8003dde:	4603      	mov	r3, r0
 8003de0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003de2:	7bfb      	ldrb	r3, [r7, #15]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d052      	beq.n	8003e8e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003de8:	7bfb      	ldrb	r3, [r7, #15]
 8003dea:	e327      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d032      	beq.n	8003e5a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003df4:	4b43      	ldr	r3, [pc, #268]	; (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a42      	ldr	r2, [pc, #264]	; (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003dfa:	f043 0301 	orr.w	r3, r3, #1
 8003dfe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e00:	f7fe fb72 	bl	80024e8 <HAL_GetTick>
 8003e04:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e06:	e008      	b.n	8003e1a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e08:	f7fe fb6e 	bl	80024e8 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e310      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e1a:	4b3a      	ldr	r3, [pc, #232]	; (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d0f0      	beq.n	8003e08 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e26:	4b37      	ldr	r3, [pc, #220]	; (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a36      	ldr	r2, [pc, #216]	; (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003e2c:	f043 0308 	orr.w	r3, r3, #8
 8003e30:	6013      	str	r3, [r2, #0]
 8003e32:	4b34      	ldr	r3, [pc, #208]	; (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
 8003e3e:	4931      	ldr	r1, [pc, #196]	; (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e44:	4b2f      	ldr	r3, [pc, #188]	; (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	69db      	ldr	r3, [r3, #28]
 8003e50:	021b      	lsls	r3, r3, #8
 8003e52:	492c      	ldr	r1, [pc, #176]	; (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	604b      	str	r3, [r1, #4]
 8003e58:	e01a      	b.n	8003e90 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003e5a:	4b2a      	ldr	r3, [pc, #168]	; (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a29      	ldr	r2, [pc, #164]	; (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003e60:	f023 0301 	bic.w	r3, r3, #1
 8003e64:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e66:	f7fe fb3f 	bl	80024e8 <HAL_GetTick>
 8003e6a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e6c:	e008      	b.n	8003e80 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e6e:	f7fe fb3b 	bl	80024e8 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d901      	bls.n	8003e80 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e2dd      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e80:	4b20      	ldr	r3, [pc, #128]	; (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1f0      	bne.n	8003e6e <HAL_RCC_OscConfig+0x1da>
 8003e8c:	e000      	b.n	8003e90 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e8e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d074      	beq.n	8003f86 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	2b08      	cmp	r3, #8
 8003ea0:	d005      	beq.n	8003eae <HAL_RCC_OscConfig+0x21a>
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	2b0c      	cmp	r3, #12
 8003ea6:	d10e      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	2b03      	cmp	r3, #3
 8003eac:	d10b      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eae:	4b15      	ldr	r3, [pc, #84]	; (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d064      	beq.n	8003f84 <HAL_RCC_OscConfig+0x2f0>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d160      	bne.n	8003f84 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e2ba      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ece:	d106      	bne.n	8003ede <HAL_RCC_OscConfig+0x24a>
 8003ed0:	4b0c      	ldr	r3, [pc, #48]	; (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a0b      	ldr	r2, [pc, #44]	; (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003ed6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eda:	6013      	str	r3, [r2, #0]
 8003edc:	e026      	b.n	8003f2c <HAL_RCC_OscConfig+0x298>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ee6:	d115      	bne.n	8003f14 <HAL_RCC_OscConfig+0x280>
 8003ee8:	4b06      	ldr	r3, [pc, #24]	; (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a05      	ldr	r2, [pc, #20]	; (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003eee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ef2:	6013      	str	r3, [r2, #0]
 8003ef4:	4b03      	ldr	r3, [pc, #12]	; (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a02      	ldr	r2, [pc, #8]	; (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003efa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003efe:	6013      	str	r3, [r2, #0]
 8003f00:	e014      	b.n	8003f2c <HAL_RCC_OscConfig+0x298>
 8003f02:	bf00      	nop
 8003f04:	40021000 	.word	0x40021000
 8003f08:	0800c09c 	.word	0x0800c09c
 8003f0c:	20000004 	.word	0x20000004
 8003f10:	20000008 	.word	0x20000008
 8003f14:	4ba0      	ldr	r3, [pc, #640]	; (8004198 <HAL_RCC_OscConfig+0x504>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a9f      	ldr	r2, [pc, #636]	; (8004198 <HAL_RCC_OscConfig+0x504>)
 8003f1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f1e:	6013      	str	r3, [r2, #0]
 8003f20:	4b9d      	ldr	r3, [pc, #628]	; (8004198 <HAL_RCC_OscConfig+0x504>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a9c      	ldr	r2, [pc, #624]	; (8004198 <HAL_RCC_OscConfig+0x504>)
 8003f26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d013      	beq.n	8003f5c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f34:	f7fe fad8 	bl	80024e8 <HAL_GetTick>
 8003f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f3a:	e008      	b.n	8003f4e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f3c:	f7fe fad4 	bl	80024e8 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b64      	cmp	r3, #100	; 0x64
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e276      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f4e:	4b92      	ldr	r3, [pc, #584]	; (8004198 <HAL_RCC_OscConfig+0x504>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d0f0      	beq.n	8003f3c <HAL_RCC_OscConfig+0x2a8>
 8003f5a:	e014      	b.n	8003f86 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f5c:	f7fe fac4 	bl	80024e8 <HAL_GetTick>
 8003f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f62:	e008      	b.n	8003f76 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f64:	f7fe fac0 	bl	80024e8 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b64      	cmp	r3, #100	; 0x64
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e262      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f76:	4b88      	ldr	r3, [pc, #544]	; (8004198 <HAL_RCC_OscConfig+0x504>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1f0      	bne.n	8003f64 <HAL_RCC_OscConfig+0x2d0>
 8003f82:	e000      	b.n	8003f86 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d060      	beq.n	8004054 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	2b04      	cmp	r3, #4
 8003f96:	d005      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x310>
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	2b0c      	cmp	r3, #12
 8003f9c:	d119      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d116      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fa4:	4b7c      	ldr	r3, [pc, #496]	; (8004198 <HAL_RCC_OscConfig+0x504>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d005      	beq.n	8003fbc <HAL_RCC_OscConfig+0x328>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d101      	bne.n	8003fbc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e23f      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fbc:	4b76      	ldr	r3, [pc, #472]	; (8004198 <HAL_RCC_OscConfig+0x504>)
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	061b      	lsls	r3, r3, #24
 8003fca:	4973      	ldr	r1, [pc, #460]	; (8004198 <HAL_RCC_OscConfig+0x504>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fd0:	e040      	b.n	8004054 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d023      	beq.n	8004022 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fda:	4b6f      	ldr	r3, [pc, #444]	; (8004198 <HAL_RCC_OscConfig+0x504>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a6e      	ldr	r2, [pc, #440]	; (8004198 <HAL_RCC_OscConfig+0x504>)
 8003fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fe4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe6:	f7fe fa7f 	bl	80024e8 <HAL_GetTick>
 8003fea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fec:	e008      	b.n	8004000 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fee:	f7fe fa7b 	bl	80024e8 <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d901      	bls.n	8004000 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e21d      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004000:	4b65      	ldr	r3, [pc, #404]	; (8004198 <HAL_RCC_OscConfig+0x504>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004008:	2b00      	cmp	r3, #0
 800400a:	d0f0      	beq.n	8003fee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800400c:	4b62      	ldr	r3, [pc, #392]	; (8004198 <HAL_RCC_OscConfig+0x504>)
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	061b      	lsls	r3, r3, #24
 800401a:	495f      	ldr	r1, [pc, #380]	; (8004198 <HAL_RCC_OscConfig+0x504>)
 800401c:	4313      	orrs	r3, r2
 800401e:	604b      	str	r3, [r1, #4]
 8004020:	e018      	b.n	8004054 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004022:	4b5d      	ldr	r3, [pc, #372]	; (8004198 <HAL_RCC_OscConfig+0x504>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a5c      	ldr	r2, [pc, #368]	; (8004198 <HAL_RCC_OscConfig+0x504>)
 8004028:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800402c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800402e:	f7fe fa5b 	bl	80024e8 <HAL_GetTick>
 8004032:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004034:	e008      	b.n	8004048 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004036:	f7fe fa57 	bl	80024e8 <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	2b02      	cmp	r3, #2
 8004042:	d901      	bls.n	8004048 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e1f9      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004048:	4b53      	ldr	r3, [pc, #332]	; (8004198 <HAL_RCC_OscConfig+0x504>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1f0      	bne.n	8004036 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0308 	and.w	r3, r3, #8
 800405c:	2b00      	cmp	r3, #0
 800405e:	d03c      	beq.n	80040da <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	695b      	ldr	r3, [r3, #20]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d01c      	beq.n	80040a2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004068:	4b4b      	ldr	r3, [pc, #300]	; (8004198 <HAL_RCC_OscConfig+0x504>)
 800406a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800406e:	4a4a      	ldr	r2, [pc, #296]	; (8004198 <HAL_RCC_OscConfig+0x504>)
 8004070:	f043 0301 	orr.w	r3, r3, #1
 8004074:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004078:	f7fe fa36 	bl	80024e8 <HAL_GetTick>
 800407c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800407e:	e008      	b.n	8004092 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004080:	f7fe fa32 	bl	80024e8 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	2b02      	cmp	r3, #2
 800408c:	d901      	bls.n	8004092 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e1d4      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004092:	4b41      	ldr	r3, [pc, #260]	; (8004198 <HAL_RCC_OscConfig+0x504>)
 8004094:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004098:	f003 0302 	and.w	r3, r3, #2
 800409c:	2b00      	cmp	r3, #0
 800409e:	d0ef      	beq.n	8004080 <HAL_RCC_OscConfig+0x3ec>
 80040a0:	e01b      	b.n	80040da <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040a2:	4b3d      	ldr	r3, [pc, #244]	; (8004198 <HAL_RCC_OscConfig+0x504>)
 80040a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040a8:	4a3b      	ldr	r2, [pc, #236]	; (8004198 <HAL_RCC_OscConfig+0x504>)
 80040aa:	f023 0301 	bic.w	r3, r3, #1
 80040ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040b2:	f7fe fa19 	bl	80024e8 <HAL_GetTick>
 80040b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040b8:	e008      	b.n	80040cc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040ba:	f7fe fa15 	bl	80024e8 <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d901      	bls.n	80040cc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e1b7      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040cc:	4b32      	ldr	r3, [pc, #200]	; (8004198 <HAL_RCC_OscConfig+0x504>)
 80040ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1ef      	bne.n	80040ba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0304 	and.w	r3, r3, #4
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	f000 80a6 	beq.w	8004234 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040e8:	2300      	movs	r3, #0
 80040ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80040ec:	4b2a      	ldr	r3, [pc, #168]	; (8004198 <HAL_RCC_OscConfig+0x504>)
 80040ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d10d      	bne.n	8004114 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040f8:	4b27      	ldr	r3, [pc, #156]	; (8004198 <HAL_RCC_OscConfig+0x504>)
 80040fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040fc:	4a26      	ldr	r2, [pc, #152]	; (8004198 <HAL_RCC_OscConfig+0x504>)
 80040fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004102:	6593      	str	r3, [r2, #88]	; 0x58
 8004104:	4b24      	ldr	r3, [pc, #144]	; (8004198 <HAL_RCC_OscConfig+0x504>)
 8004106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800410c:	60bb      	str	r3, [r7, #8]
 800410e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004110:	2301      	movs	r3, #1
 8004112:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004114:	4b21      	ldr	r3, [pc, #132]	; (800419c <HAL_RCC_OscConfig+0x508>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800411c:	2b00      	cmp	r3, #0
 800411e:	d118      	bne.n	8004152 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004120:	4b1e      	ldr	r3, [pc, #120]	; (800419c <HAL_RCC_OscConfig+0x508>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a1d      	ldr	r2, [pc, #116]	; (800419c <HAL_RCC_OscConfig+0x508>)
 8004126:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800412a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800412c:	f7fe f9dc 	bl	80024e8 <HAL_GetTick>
 8004130:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004132:	e008      	b.n	8004146 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004134:	f7fe f9d8 	bl	80024e8 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b02      	cmp	r3, #2
 8004140:	d901      	bls.n	8004146 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e17a      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004146:	4b15      	ldr	r3, [pc, #84]	; (800419c <HAL_RCC_OscConfig+0x508>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800414e:	2b00      	cmp	r3, #0
 8004150:	d0f0      	beq.n	8004134 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d108      	bne.n	800416c <HAL_RCC_OscConfig+0x4d8>
 800415a:	4b0f      	ldr	r3, [pc, #60]	; (8004198 <HAL_RCC_OscConfig+0x504>)
 800415c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004160:	4a0d      	ldr	r2, [pc, #52]	; (8004198 <HAL_RCC_OscConfig+0x504>)
 8004162:	f043 0301 	orr.w	r3, r3, #1
 8004166:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800416a:	e029      	b.n	80041c0 <HAL_RCC_OscConfig+0x52c>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	2b05      	cmp	r3, #5
 8004172:	d115      	bne.n	80041a0 <HAL_RCC_OscConfig+0x50c>
 8004174:	4b08      	ldr	r3, [pc, #32]	; (8004198 <HAL_RCC_OscConfig+0x504>)
 8004176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800417a:	4a07      	ldr	r2, [pc, #28]	; (8004198 <HAL_RCC_OscConfig+0x504>)
 800417c:	f043 0304 	orr.w	r3, r3, #4
 8004180:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004184:	4b04      	ldr	r3, [pc, #16]	; (8004198 <HAL_RCC_OscConfig+0x504>)
 8004186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800418a:	4a03      	ldr	r2, [pc, #12]	; (8004198 <HAL_RCC_OscConfig+0x504>)
 800418c:	f043 0301 	orr.w	r3, r3, #1
 8004190:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004194:	e014      	b.n	80041c0 <HAL_RCC_OscConfig+0x52c>
 8004196:	bf00      	nop
 8004198:	40021000 	.word	0x40021000
 800419c:	40007000 	.word	0x40007000
 80041a0:	4b9c      	ldr	r3, [pc, #624]	; (8004414 <HAL_RCC_OscConfig+0x780>)
 80041a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a6:	4a9b      	ldr	r2, [pc, #620]	; (8004414 <HAL_RCC_OscConfig+0x780>)
 80041a8:	f023 0301 	bic.w	r3, r3, #1
 80041ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041b0:	4b98      	ldr	r3, [pc, #608]	; (8004414 <HAL_RCC_OscConfig+0x780>)
 80041b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041b6:	4a97      	ldr	r2, [pc, #604]	; (8004414 <HAL_RCC_OscConfig+0x780>)
 80041b8:	f023 0304 	bic.w	r3, r3, #4
 80041bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d016      	beq.n	80041f6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c8:	f7fe f98e 	bl	80024e8 <HAL_GetTick>
 80041cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041ce:	e00a      	b.n	80041e6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041d0:	f7fe f98a 	bl	80024e8 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	f241 3288 	movw	r2, #5000	; 0x1388
 80041de:	4293      	cmp	r3, r2
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e12a      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041e6:	4b8b      	ldr	r3, [pc, #556]	; (8004414 <HAL_RCC_OscConfig+0x780>)
 80041e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ec:	f003 0302 	and.w	r3, r3, #2
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d0ed      	beq.n	80041d0 <HAL_RCC_OscConfig+0x53c>
 80041f4:	e015      	b.n	8004222 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f6:	f7fe f977 	bl	80024e8 <HAL_GetTick>
 80041fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041fc:	e00a      	b.n	8004214 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041fe:	f7fe f973 	bl	80024e8 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	f241 3288 	movw	r2, #5000	; 0x1388
 800420c:	4293      	cmp	r3, r2
 800420e:	d901      	bls.n	8004214 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e113      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004214:	4b7f      	ldr	r3, [pc, #508]	; (8004414 <HAL_RCC_OscConfig+0x780>)
 8004216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800421a:	f003 0302 	and.w	r3, r3, #2
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1ed      	bne.n	80041fe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004222:	7ffb      	ldrb	r3, [r7, #31]
 8004224:	2b01      	cmp	r3, #1
 8004226:	d105      	bne.n	8004234 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004228:	4b7a      	ldr	r3, [pc, #488]	; (8004414 <HAL_RCC_OscConfig+0x780>)
 800422a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800422c:	4a79      	ldr	r2, [pc, #484]	; (8004414 <HAL_RCC_OscConfig+0x780>)
 800422e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004232:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004238:	2b00      	cmp	r3, #0
 800423a:	f000 80fe 	beq.w	800443a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004242:	2b02      	cmp	r3, #2
 8004244:	f040 80d0 	bne.w	80043e8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004248:	4b72      	ldr	r3, [pc, #456]	; (8004414 <HAL_RCC_OscConfig+0x780>)
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f003 0203 	and.w	r2, r3, #3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004258:	429a      	cmp	r2, r3
 800425a:	d130      	bne.n	80042be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004266:	3b01      	subs	r3, #1
 8004268:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800426a:	429a      	cmp	r2, r3
 800426c:	d127      	bne.n	80042be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004278:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800427a:	429a      	cmp	r2, r3
 800427c:	d11f      	bne.n	80042be <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004288:	2a07      	cmp	r2, #7
 800428a:	bf14      	ite	ne
 800428c:	2201      	movne	r2, #1
 800428e:	2200      	moveq	r2, #0
 8004290:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004292:	4293      	cmp	r3, r2
 8004294:	d113      	bne.n	80042be <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a0:	085b      	lsrs	r3, r3, #1
 80042a2:	3b01      	subs	r3, #1
 80042a4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d109      	bne.n	80042be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b4:	085b      	lsrs	r3, r3, #1
 80042b6:	3b01      	subs	r3, #1
 80042b8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d06e      	beq.n	800439c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	2b0c      	cmp	r3, #12
 80042c2:	d069      	beq.n	8004398 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80042c4:	4b53      	ldr	r3, [pc, #332]	; (8004414 <HAL_RCC_OscConfig+0x780>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d105      	bne.n	80042dc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80042d0:	4b50      	ldr	r3, [pc, #320]	; (8004414 <HAL_RCC_OscConfig+0x780>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d001      	beq.n	80042e0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e0ad      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80042e0:	4b4c      	ldr	r3, [pc, #304]	; (8004414 <HAL_RCC_OscConfig+0x780>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a4b      	ldr	r2, [pc, #300]	; (8004414 <HAL_RCC_OscConfig+0x780>)
 80042e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042ea:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80042ec:	f7fe f8fc 	bl	80024e8 <HAL_GetTick>
 80042f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042f2:	e008      	b.n	8004306 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042f4:	f7fe f8f8 	bl	80024e8 <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d901      	bls.n	8004306 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e09a      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004306:	4b43      	ldr	r3, [pc, #268]	; (8004414 <HAL_RCC_OscConfig+0x780>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1f0      	bne.n	80042f4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004312:	4b40      	ldr	r3, [pc, #256]	; (8004414 <HAL_RCC_OscConfig+0x780>)
 8004314:	68da      	ldr	r2, [r3, #12]
 8004316:	4b40      	ldr	r3, [pc, #256]	; (8004418 <HAL_RCC_OscConfig+0x784>)
 8004318:	4013      	ands	r3, r2
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004322:	3a01      	subs	r2, #1
 8004324:	0112      	lsls	r2, r2, #4
 8004326:	4311      	orrs	r1, r2
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800432c:	0212      	lsls	r2, r2, #8
 800432e:	4311      	orrs	r1, r2
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004334:	0852      	lsrs	r2, r2, #1
 8004336:	3a01      	subs	r2, #1
 8004338:	0552      	lsls	r2, r2, #21
 800433a:	4311      	orrs	r1, r2
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004340:	0852      	lsrs	r2, r2, #1
 8004342:	3a01      	subs	r2, #1
 8004344:	0652      	lsls	r2, r2, #25
 8004346:	4311      	orrs	r1, r2
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800434c:	0912      	lsrs	r2, r2, #4
 800434e:	0452      	lsls	r2, r2, #17
 8004350:	430a      	orrs	r2, r1
 8004352:	4930      	ldr	r1, [pc, #192]	; (8004414 <HAL_RCC_OscConfig+0x780>)
 8004354:	4313      	orrs	r3, r2
 8004356:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004358:	4b2e      	ldr	r3, [pc, #184]	; (8004414 <HAL_RCC_OscConfig+0x780>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a2d      	ldr	r2, [pc, #180]	; (8004414 <HAL_RCC_OscConfig+0x780>)
 800435e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004362:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004364:	4b2b      	ldr	r3, [pc, #172]	; (8004414 <HAL_RCC_OscConfig+0x780>)
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	4a2a      	ldr	r2, [pc, #168]	; (8004414 <HAL_RCC_OscConfig+0x780>)
 800436a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800436e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004370:	f7fe f8ba 	bl	80024e8 <HAL_GetTick>
 8004374:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004376:	e008      	b.n	800438a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004378:	f7fe f8b6 	bl	80024e8 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	2b02      	cmp	r3, #2
 8004384:	d901      	bls.n	800438a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e058      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800438a:	4b22      	ldr	r3, [pc, #136]	; (8004414 <HAL_RCC_OscConfig+0x780>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d0f0      	beq.n	8004378 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004396:	e050      	b.n	800443a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e04f      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800439c:	4b1d      	ldr	r3, [pc, #116]	; (8004414 <HAL_RCC_OscConfig+0x780>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d148      	bne.n	800443a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80043a8:	4b1a      	ldr	r3, [pc, #104]	; (8004414 <HAL_RCC_OscConfig+0x780>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a19      	ldr	r2, [pc, #100]	; (8004414 <HAL_RCC_OscConfig+0x780>)
 80043ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043b2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80043b4:	4b17      	ldr	r3, [pc, #92]	; (8004414 <HAL_RCC_OscConfig+0x780>)
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	4a16      	ldr	r2, [pc, #88]	; (8004414 <HAL_RCC_OscConfig+0x780>)
 80043ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043be:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80043c0:	f7fe f892 	bl	80024e8 <HAL_GetTick>
 80043c4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043c6:	e008      	b.n	80043da <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043c8:	f7fe f88e 	bl	80024e8 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d901      	bls.n	80043da <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e030      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043da:	4b0e      	ldr	r3, [pc, #56]	; (8004414 <HAL_RCC_OscConfig+0x780>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d0f0      	beq.n	80043c8 <HAL_RCC_OscConfig+0x734>
 80043e6:	e028      	b.n	800443a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	2b0c      	cmp	r3, #12
 80043ec:	d023      	beq.n	8004436 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ee:	4b09      	ldr	r3, [pc, #36]	; (8004414 <HAL_RCC_OscConfig+0x780>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a08      	ldr	r2, [pc, #32]	; (8004414 <HAL_RCC_OscConfig+0x780>)
 80043f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043fa:	f7fe f875 	bl	80024e8 <HAL_GetTick>
 80043fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004400:	e00c      	b.n	800441c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004402:	f7fe f871 	bl	80024e8 <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	2b02      	cmp	r3, #2
 800440e:	d905      	bls.n	800441c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e013      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
 8004414:	40021000 	.word	0x40021000
 8004418:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800441c:	4b09      	ldr	r3, [pc, #36]	; (8004444 <HAL_RCC_OscConfig+0x7b0>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1ec      	bne.n	8004402 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004428:	4b06      	ldr	r3, [pc, #24]	; (8004444 <HAL_RCC_OscConfig+0x7b0>)
 800442a:	68da      	ldr	r2, [r3, #12]
 800442c:	4905      	ldr	r1, [pc, #20]	; (8004444 <HAL_RCC_OscConfig+0x7b0>)
 800442e:	4b06      	ldr	r3, [pc, #24]	; (8004448 <HAL_RCC_OscConfig+0x7b4>)
 8004430:	4013      	ands	r3, r2
 8004432:	60cb      	str	r3, [r1, #12]
 8004434:	e001      	b.n	800443a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e000      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3720      	adds	r7, #32
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}
 8004444:	40021000 	.word	0x40021000
 8004448:	feeefffc 	.word	0xfeeefffc

0800444c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d101      	bne.n	8004460 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e0e7      	b.n	8004630 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004460:	4b75      	ldr	r3, [pc, #468]	; (8004638 <HAL_RCC_ClockConfig+0x1ec>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0307 	and.w	r3, r3, #7
 8004468:	683a      	ldr	r2, [r7, #0]
 800446a:	429a      	cmp	r2, r3
 800446c:	d910      	bls.n	8004490 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800446e:	4b72      	ldr	r3, [pc, #456]	; (8004638 <HAL_RCC_ClockConfig+0x1ec>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f023 0207 	bic.w	r2, r3, #7
 8004476:	4970      	ldr	r1, [pc, #448]	; (8004638 <HAL_RCC_ClockConfig+0x1ec>)
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	4313      	orrs	r3, r2
 800447c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800447e:	4b6e      	ldr	r3, [pc, #440]	; (8004638 <HAL_RCC_ClockConfig+0x1ec>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0307 	and.w	r3, r3, #7
 8004486:	683a      	ldr	r2, [r7, #0]
 8004488:	429a      	cmp	r2, r3
 800448a:	d001      	beq.n	8004490 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e0cf      	b.n	8004630 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0302 	and.w	r3, r3, #2
 8004498:	2b00      	cmp	r3, #0
 800449a:	d010      	beq.n	80044be <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	689a      	ldr	r2, [r3, #8]
 80044a0:	4b66      	ldr	r3, [pc, #408]	; (800463c <HAL_RCC_ClockConfig+0x1f0>)
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d908      	bls.n	80044be <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044ac:	4b63      	ldr	r3, [pc, #396]	; (800463c <HAL_RCC_ClockConfig+0x1f0>)
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	4960      	ldr	r1, [pc, #384]	; (800463c <HAL_RCC_ClockConfig+0x1f0>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d04c      	beq.n	8004564 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	2b03      	cmp	r3, #3
 80044d0:	d107      	bne.n	80044e2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044d2:	4b5a      	ldr	r3, [pc, #360]	; (800463c <HAL_RCC_ClockConfig+0x1f0>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d121      	bne.n	8004522 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e0a6      	b.n	8004630 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d107      	bne.n	80044fa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044ea:	4b54      	ldr	r3, [pc, #336]	; (800463c <HAL_RCC_ClockConfig+0x1f0>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d115      	bne.n	8004522 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e09a      	b.n	8004630 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d107      	bne.n	8004512 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004502:	4b4e      	ldr	r3, [pc, #312]	; (800463c <HAL_RCC_ClockConfig+0x1f0>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d109      	bne.n	8004522 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e08e      	b.n	8004630 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004512:	4b4a      	ldr	r3, [pc, #296]	; (800463c <HAL_RCC_ClockConfig+0x1f0>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e086      	b.n	8004630 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004522:	4b46      	ldr	r3, [pc, #280]	; (800463c <HAL_RCC_ClockConfig+0x1f0>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f023 0203 	bic.w	r2, r3, #3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	4943      	ldr	r1, [pc, #268]	; (800463c <HAL_RCC_ClockConfig+0x1f0>)
 8004530:	4313      	orrs	r3, r2
 8004532:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004534:	f7fd ffd8 	bl	80024e8 <HAL_GetTick>
 8004538:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800453a:	e00a      	b.n	8004552 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800453c:	f7fd ffd4 	bl	80024e8 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	f241 3288 	movw	r2, #5000	; 0x1388
 800454a:	4293      	cmp	r3, r2
 800454c:	d901      	bls.n	8004552 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e06e      	b.n	8004630 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004552:	4b3a      	ldr	r3, [pc, #232]	; (800463c <HAL_RCC_ClockConfig+0x1f0>)
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f003 020c 	and.w	r2, r3, #12
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	429a      	cmp	r2, r3
 8004562:	d1eb      	bne.n	800453c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0302 	and.w	r3, r3, #2
 800456c:	2b00      	cmp	r3, #0
 800456e:	d010      	beq.n	8004592 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	689a      	ldr	r2, [r3, #8]
 8004574:	4b31      	ldr	r3, [pc, #196]	; (800463c <HAL_RCC_ClockConfig+0x1f0>)
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800457c:	429a      	cmp	r2, r3
 800457e:	d208      	bcs.n	8004592 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004580:	4b2e      	ldr	r3, [pc, #184]	; (800463c <HAL_RCC_ClockConfig+0x1f0>)
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	492b      	ldr	r1, [pc, #172]	; (800463c <HAL_RCC_ClockConfig+0x1f0>)
 800458e:	4313      	orrs	r3, r2
 8004590:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004592:	4b29      	ldr	r3, [pc, #164]	; (8004638 <HAL_RCC_ClockConfig+0x1ec>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0307 	and.w	r3, r3, #7
 800459a:	683a      	ldr	r2, [r7, #0]
 800459c:	429a      	cmp	r2, r3
 800459e:	d210      	bcs.n	80045c2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045a0:	4b25      	ldr	r3, [pc, #148]	; (8004638 <HAL_RCC_ClockConfig+0x1ec>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f023 0207 	bic.w	r2, r3, #7
 80045a8:	4923      	ldr	r1, [pc, #140]	; (8004638 <HAL_RCC_ClockConfig+0x1ec>)
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045b0:	4b21      	ldr	r3, [pc, #132]	; (8004638 <HAL_RCC_ClockConfig+0x1ec>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0307 	and.w	r3, r3, #7
 80045b8:	683a      	ldr	r2, [r7, #0]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d001      	beq.n	80045c2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e036      	b.n	8004630 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0304 	and.w	r3, r3, #4
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d008      	beq.n	80045e0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045ce:	4b1b      	ldr	r3, [pc, #108]	; (800463c <HAL_RCC_ClockConfig+0x1f0>)
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	4918      	ldr	r1, [pc, #96]	; (800463c <HAL_RCC_ClockConfig+0x1f0>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0308 	and.w	r3, r3, #8
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d009      	beq.n	8004600 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045ec:	4b13      	ldr	r3, [pc, #76]	; (800463c <HAL_RCC_ClockConfig+0x1f0>)
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	00db      	lsls	r3, r3, #3
 80045fa:	4910      	ldr	r1, [pc, #64]	; (800463c <HAL_RCC_ClockConfig+0x1f0>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004600:	f000 f824 	bl	800464c <HAL_RCC_GetSysClockFreq>
 8004604:	4602      	mov	r2, r0
 8004606:	4b0d      	ldr	r3, [pc, #52]	; (800463c <HAL_RCC_ClockConfig+0x1f0>)
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	091b      	lsrs	r3, r3, #4
 800460c:	f003 030f 	and.w	r3, r3, #15
 8004610:	490b      	ldr	r1, [pc, #44]	; (8004640 <HAL_RCC_ClockConfig+0x1f4>)
 8004612:	5ccb      	ldrb	r3, [r1, r3]
 8004614:	f003 031f 	and.w	r3, r3, #31
 8004618:	fa22 f303 	lsr.w	r3, r2, r3
 800461c:	4a09      	ldr	r2, [pc, #36]	; (8004644 <HAL_RCC_ClockConfig+0x1f8>)
 800461e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004620:	4b09      	ldr	r3, [pc, #36]	; (8004648 <HAL_RCC_ClockConfig+0x1fc>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4618      	mov	r0, r3
 8004626:	f7fd fdcf 	bl	80021c8 <HAL_InitTick>
 800462a:	4603      	mov	r3, r0
 800462c:	72fb      	strb	r3, [r7, #11]

  return status;
 800462e:	7afb      	ldrb	r3, [r7, #11]
}
 8004630:	4618      	mov	r0, r3
 8004632:	3710      	adds	r7, #16
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	40022000 	.word	0x40022000
 800463c:	40021000 	.word	0x40021000
 8004640:	0800c09c 	.word	0x0800c09c
 8004644:	20000004 	.word	0x20000004
 8004648:	20000008 	.word	0x20000008

0800464c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800464c:	b480      	push	{r7}
 800464e:	b089      	sub	sp, #36	; 0x24
 8004650:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004652:	2300      	movs	r3, #0
 8004654:	61fb      	str	r3, [r7, #28]
 8004656:	2300      	movs	r3, #0
 8004658:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800465a:	4b3e      	ldr	r3, [pc, #248]	; (8004754 <HAL_RCC_GetSysClockFreq+0x108>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f003 030c 	and.w	r3, r3, #12
 8004662:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004664:	4b3b      	ldr	r3, [pc, #236]	; (8004754 <HAL_RCC_GetSysClockFreq+0x108>)
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	f003 0303 	and.w	r3, r3, #3
 800466c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d005      	beq.n	8004680 <HAL_RCC_GetSysClockFreq+0x34>
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	2b0c      	cmp	r3, #12
 8004678:	d121      	bne.n	80046be <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d11e      	bne.n	80046be <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004680:	4b34      	ldr	r3, [pc, #208]	; (8004754 <HAL_RCC_GetSysClockFreq+0x108>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0308 	and.w	r3, r3, #8
 8004688:	2b00      	cmp	r3, #0
 800468a:	d107      	bne.n	800469c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800468c:	4b31      	ldr	r3, [pc, #196]	; (8004754 <HAL_RCC_GetSysClockFreq+0x108>)
 800468e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004692:	0a1b      	lsrs	r3, r3, #8
 8004694:	f003 030f 	and.w	r3, r3, #15
 8004698:	61fb      	str	r3, [r7, #28]
 800469a:	e005      	b.n	80046a8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800469c:	4b2d      	ldr	r3, [pc, #180]	; (8004754 <HAL_RCC_GetSysClockFreq+0x108>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	091b      	lsrs	r3, r3, #4
 80046a2:	f003 030f 	and.w	r3, r3, #15
 80046a6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80046a8:	4a2b      	ldr	r2, [pc, #172]	; (8004758 <HAL_RCC_GetSysClockFreq+0x10c>)
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046b0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d10d      	bne.n	80046d4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046bc:	e00a      	b.n	80046d4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	2b04      	cmp	r3, #4
 80046c2:	d102      	bne.n	80046ca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80046c4:	4b25      	ldr	r3, [pc, #148]	; (800475c <HAL_RCC_GetSysClockFreq+0x110>)
 80046c6:	61bb      	str	r3, [r7, #24]
 80046c8:	e004      	b.n	80046d4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	2b08      	cmp	r3, #8
 80046ce:	d101      	bne.n	80046d4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80046d0:	4b23      	ldr	r3, [pc, #140]	; (8004760 <HAL_RCC_GetSysClockFreq+0x114>)
 80046d2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	2b0c      	cmp	r3, #12
 80046d8:	d134      	bne.n	8004744 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046da:	4b1e      	ldr	r3, [pc, #120]	; (8004754 <HAL_RCC_GetSysClockFreq+0x108>)
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	f003 0303 	and.w	r3, r3, #3
 80046e2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d003      	beq.n	80046f2 <HAL_RCC_GetSysClockFreq+0xa6>
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	2b03      	cmp	r3, #3
 80046ee:	d003      	beq.n	80046f8 <HAL_RCC_GetSysClockFreq+0xac>
 80046f0:	e005      	b.n	80046fe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80046f2:	4b1a      	ldr	r3, [pc, #104]	; (800475c <HAL_RCC_GetSysClockFreq+0x110>)
 80046f4:	617b      	str	r3, [r7, #20]
      break;
 80046f6:	e005      	b.n	8004704 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80046f8:	4b19      	ldr	r3, [pc, #100]	; (8004760 <HAL_RCC_GetSysClockFreq+0x114>)
 80046fa:	617b      	str	r3, [r7, #20]
      break;
 80046fc:	e002      	b.n	8004704 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	617b      	str	r3, [r7, #20]
      break;
 8004702:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004704:	4b13      	ldr	r3, [pc, #76]	; (8004754 <HAL_RCC_GetSysClockFreq+0x108>)
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	091b      	lsrs	r3, r3, #4
 800470a:	f003 0307 	and.w	r3, r3, #7
 800470e:	3301      	adds	r3, #1
 8004710:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004712:	4b10      	ldr	r3, [pc, #64]	; (8004754 <HAL_RCC_GetSysClockFreq+0x108>)
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	0a1b      	lsrs	r3, r3, #8
 8004718:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800471c:	697a      	ldr	r2, [r7, #20]
 800471e:	fb03 f202 	mul.w	r2, r3, r2
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	fbb2 f3f3 	udiv	r3, r2, r3
 8004728:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800472a:	4b0a      	ldr	r3, [pc, #40]	; (8004754 <HAL_RCC_GetSysClockFreq+0x108>)
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	0e5b      	lsrs	r3, r3, #25
 8004730:	f003 0303 	and.w	r3, r3, #3
 8004734:	3301      	adds	r3, #1
 8004736:	005b      	lsls	r3, r3, #1
 8004738:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800473a:	697a      	ldr	r2, [r7, #20]
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004742:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004744:	69bb      	ldr	r3, [r7, #24]
}
 8004746:	4618      	mov	r0, r3
 8004748:	3724      	adds	r7, #36	; 0x24
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	40021000 	.word	0x40021000
 8004758:	0800c0b4 	.word	0x0800c0b4
 800475c:	00f42400 	.word	0x00f42400
 8004760:	007a1200 	.word	0x007a1200

08004764 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004764:	b480      	push	{r7}
 8004766:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004768:	4b03      	ldr	r3, [pc, #12]	; (8004778 <HAL_RCC_GetHCLKFreq+0x14>)
 800476a:	681b      	ldr	r3, [r3, #0]
}
 800476c:	4618      	mov	r0, r3
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	20000004 	.word	0x20000004

0800477c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004780:	f7ff fff0 	bl	8004764 <HAL_RCC_GetHCLKFreq>
 8004784:	4602      	mov	r2, r0
 8004786:	4b06      	ldr	r3, [pc, #24]	; (80047a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	0a1b      	lsrs	r3, r3, #8
 800478c:	f003 0307 	and.w	r3, r3, #7
 8004790:	4904      	ldr	r1, [pc, #16]	; (80047a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004792:	5ccb      	ldrb	r3, [r1, r3]
 8004794:	f003 031f 	and.w	r3, r3, #31
 8004798:	fa22 f303 	lsr.w	r3, r2, r3
}
 800479c:	4618      	mov	r0, r3
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	40021000 	.word	0x40021000
 80047a4:	0800c0ac 	.word	0x0800c0ac

080047a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80047ac:	f7ff ffda 	bl	8004764 <HAL_RCC_GetHCLKFreq>
 80047b0:	4602      	mov	r2, r0
 80047b2:	4b06      	ldr	r3, [pc, #24]	; (80047cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	0adb      	lsrs	r3, r3, #11
 80047b8:	f003 0307 	and.w	r3, r3, #7
 80047bc:	4904      	ldr	r1, [pc, #16]	; (80047d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80047be:	5ccb      	ldrb	r3, [r1, r3]
 80047c0:	f003 031f 	and.w	r3, r3, #31
 80047c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	40021000 	.word	0x40021000
 80047d0:	0800c0ac 	.word	0x0800c0ac

080047d4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	220f      	movs	r2, #15
 80047e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80047e4:	4b12      	ldr	r3, [pc, #72]	; (8004830 <HAL_RCC_GetClockConfig+0x5c>)
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f003 0203 	and.w	r2, r3, #3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80047f0:	4b0f      	ldr	r3, [pc, #60]	; (8004830 <HAL_RCC_GetClockConfig+0x5c>)
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80047fc:	4b0c      	ldr	r3, [pc, #48]	; (8004830 <HAL_RCC_GetClockConfig+0x5c>)
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004808:	4b09      	ldr	r3, [pc, #36]	; (8004830 <HAL_RCC_GetClockConfig+0x5c>)
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	08db      	lsrs	r3, r3, #3
 800480e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004816:	4b07      	ldr	r3, [pc, #28]	; (8004834 <HAL_RCC_GetClockConfig+0x60>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0207 	and.w	r2, r3, #7
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	601a      	str	r2, [r3, #0]
}
 8004822:	bf00      	nop
 8004824:	370c      	adds	r7, #12
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	40021000 	.word	0x40021000
 8004834:	40022000 	.word	0x40022000

08004838 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004840:	2300      	movs	r3, #0
 8004842:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004844:	4b2a      	ldr	r3, [pc, #168]	; (80048f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d003      	beq.n	8004858 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004850:	f7ff f9bc 	bl	8003bcc <HAL_PWREx_GetVoltageRange>
 8004854:	6178      	str	r0, [r7, #20]
 8004856:	e014      	b.n	8004882 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004858:	4b25      	ldr	r3, [pc, #148]	; (80048f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800485a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800485c:	4a24      	ldr	r2, [pc, #144]	; (80048f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800485e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004862:	6593      	str	r3, [r2, #88]	; 0x58
 8004864:	4b22      	ldr	r3, [pc, #136]	; (80048f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004868:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800486c:	60fb      	str	r3, [r7, #12]
 800486e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004870:	f7ff f9ac 	bl	8003bcc <HAL_PWREx_GetVoltageRange>
 8004874:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004876:	4b1e      	ldr	r3, [pc, #120]	; (80048f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800487a:	4a1d      	ldr	r2, [pc, #116]	; (80048f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800487c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004880:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004888:	d10b      	bne.n	80048a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2b80      	cmp	r3, #128	; 0x80
 800488e:	d919      	bls.n	80048c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2ba0      	cmp	r3, #160	; 0xa0
 8004894:	d902      	bls.n	800489c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004896:	2302      	movs	r3, #2
 8004898:	613b      	str	r3, [r7, #16]
 800489a:	e013      	b.n	80048c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800489c:	2301      	movs	r3, #1
 800489e:	613b      	str	r3, [r7, #16]
 80048a0:	e010      	b.n	80048c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2b80      	cmp	r3, #128	; 0x80
 80048a6:	d902      	bls.n	80048ae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80048a8:	2303      	movs	r3, #3
 80048aa:	613b      	str	r3, [r7, #16]
 80048ac:	e00a      	b.n	80048c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2b80      	cmp	r3, #128	; 0x80
 80048b2:	d102      	bne.n	80048ba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80048b4:	2302      	movs	r3, #2
 80048b6:	613b      	str	r3, [r7, #16]
 80048b8:	e004      	b.n	80048c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2b70      	cmp	r3, #112	; 0x70
 80048be:	d101      	bne.n	80048c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80048c0:	2301      	movs	r3, #1
 80048c2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80048c4:	4b0b      	ldr	r3, [pc, #44]	; (80048f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f023 0207 	bic.w	r2, r3, #7
 80048cc:	4909      	ldr	r1, [pc, #36]	; (80048f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80048d4:	4b07      	ldr	r3, [pc, #28]	; (80048f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0307 	and.w	r3, r3, #7
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d001      	beq.n	80048e6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e000      	b.n	80048e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3718      	adds	r7, #24
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	40021000 	.word	0x40021000
 80048f4:	40022000 	.word	0x40022000

080048f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b086      	sub	sp, #24
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004900:	2300      	movs	r3, #0
 8004902:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004904:	2300      	movs	r3, #0
 8004906:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004910:	2b00      	cmp	r3, #0
 8004912:	d041      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004918:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800491c:	d02a      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800491e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004922:	d824      	bhi.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004924:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004928:	d008      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800492a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800492e:	d81e      	bhi.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00a      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004934:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004938:	d010      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800493a:	e018      	b.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800493c:	4b86      	ldr	r3, [pc, #536]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	4a85      	ldr	r2, [pc, #532]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004942:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004946:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004948:	e015      	b.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	3304      	adds	r3, #4
 800494e:	2100      	movs	r1, #0
 8004950:	4618      	mov	r0, r3
 8004952:	f000 fabb 	bl	8004ecc <RCCEx_PLLSAI1_Config>
 8004956:	4603      	mov	r3, r0
 8004958:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800495a:	e00c      	b.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	3320      	adds	r3, #32
 8004960:	2100      	movs	r1, #0
 8004962:	4618      	mov	r0, r3
 8004964:	f000 fba6 	bl	80050b4 <RCCEx_PLLSAI2_Config>
 8004968:	4603      	mov	r3, r0
 800496a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800496c:	e003      	b.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	74fb      	strb	r3, [r7, #19]
      break;
 8004972:	e000      	b.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004974:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004976:	7cfb      	ldrb	r3, [r7, #19]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d10b      	bne.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800497c:	4b76      	ldr	r3, [pc, #472]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800497e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004982:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800498a:	4973      	ldr	r1, [pc, #460]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800498c:	4313      	orrs	r3, r2
 800498e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004992:	e001      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004994:	7cfb      	ldrb	r3, [r7, #19]
 8004996:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d041      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049a8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80049ac:	d02a      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80049ae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80049b2:	d824      	bhi.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 80049b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049b8:	d008      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80049ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049be:	d81e      	bhi.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d00a      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80049c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80049c8:	d010      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80049ca:	e018      	b.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80049cc:	4b62      	ldr	r3, [pc, #392]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	4a61      	ldr	r2, [pc, #388]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049d6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80049d8:	e015      	b.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	3304      	adds	r3, #4
 80049de:	2100      	movs	r1, #0
 80049e0:	4618      	mov	r0, r3
 80049e2:	f000 fa73 	bl	8004ecc <RCCEx_PLLSAI1_Config>
 80049e6:	4603      	mov	r3, r0
 80049e8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80049ea:	e00c      	b.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	3320      	adds	r3, #32
 80049f0:	2100      	movs	r1, #0
 80049f2:	4618      	mov	r0, r3
 80049f4:	f000 fb5e 	bl	80050b4 <RCCEx_PLLSAI2_Config>
 80049f8:	4603      	mov	r3, r0
 80049fa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80049fc:	e003      	b.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	74fb      	strb	r3, [r7, #19]
      break;
 8004a02:	e000      	b.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004a04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a06:	7cfb      	ldrb	r3, [r7, #19]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d10b      	bne.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004a0c:	4b52      	ldr	r3, [pc, #328]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a12:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a1a:	494f      	ldr	r1, [pc, #316]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004a22:	e001      	b.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a24:	7cfb      	ldrb	r3, [r7, #19]
 8004a26:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	f000 80a0 	beq.w	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a36:	2300      	movs	r3, #0
 8004a38:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004a3a:	4b47      	ldr	r3, [pc, #284]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d101      	bne.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004a46:	2301      	movs	r3, #1
 8004a48:	e000      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00d      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a50:	4b41      	ldr	r3, [pc, #260]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a54:	4a40      	ldr	r2, [pc, #256]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a5a:	6593      	str	r3, [r2, #88]	; 0x58
 8004a5c:	4b3e      	ldr	r3, [pc, #248]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a64:	60bb      	str	r3, [r7, #8]
 8004a66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a6c:	4b3b      	ldr	r3, [pc, #236]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a3a      	ldr	r2, [pc, #232]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004a72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a76:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a78:	f7fd fd36 	bl	80024e8 <HAL_GetTick>
 8004a7c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004a7e:	e009      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a80:	f7fd fd32 	bl	80024e8 <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d902      	bls.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	74fb      	strb	r3, [r7, #19]
        break;
 8004a92:	e005      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004a94:	4b31      	ldr	r3, [pc, #196]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d0ef      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004aa0:	7cfb      	ldrb	r3, [r7, #19]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d15c      	bne.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004aa6:	4b2c      	ldr	r3, [pc, #176]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ab0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d01f      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004abe:	697a      	ldr	r2, [r7, #20]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d019      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ac4:	4b24      	ldr	r3, [pc, #144]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ace:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ad0:	4b21      	ldr	r3, [pc, #132]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad6:	4a20      	ldr	r2, [pc, #128]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004adc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ae0:	4b1d      	ldr	r3, [pc, #116]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ae6:	4a1c      	ldr	r2, [pc, #112]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ae8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004af0:	4a19      	ldr	r2, [pc, #100]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	f003 0301 	and.w	r3, r3, #1
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d016      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b02:	f7fd fcf1 	bl	80024e8 <HAL_GetTick>
 8004b06:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b08:	e00b      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b0a:	f7fd fced 	bl	80024e8 <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d902      	bls.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	74fb      	strb	r3, [r7, #19]
            break;
 8004b20:	e006      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b22:	4b0d      	ldr	r3, [pc, #52]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b28:	f003 0302 	and.w	r3, r3, #2
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d0ec      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004b30:	7cfb      	ldrb	r3, [r7, #19]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d10c      	bne.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b36:	4b08      	ldr	r3, [pc, #32]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b46:	4904      	ldr	r1, [pc, #16]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004b4e:	e009      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004b50:	7cfb      	ldrb	r3, [r7, #19]
 8004b52:	74bb      	strb	r3, [r7, #18]
 8004b54:	e006      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004b56:	bf00      	nop
 8004b58:	40021000 	.word	0x40021000
 8004b5c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b60:	7cfb      	ldrb	r3, [r7, #19]
 8004b62:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b64:	7c7b      	ldrb	r3, [r7, #17]
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d105      	bne.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b6a:	4b9e      	ldr	r3, [pc, #632]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b6e:	4a9d      	ldr	r2, [pc, #628]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b74:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0301 	and.w	r3, r3, #1
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d00a      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b82:	4b98      	ldr	r3, [pc, #608]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b88:	f023 0203 	bic.w	r2, r3, #3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b90:	4994      	ldr	r1, [pc, #592]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0302 	and.w	r3, r3, #2
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d00a      	beq.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ba4:	4b8f      	ldr	r3, [pc, #572]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004baa:	f023 020c 	bic.w	r2, r3, #12
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bb2:	498c      	ldr	r1, [pc, #560]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0304 	and.w	r3, r3, #4
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d00a      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004bc6:	4b87      	ldr	r3, [pc, #540]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bcc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd4:	4983      	ldr	r1, [pc, #524]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0308 	and.w	r3, r3, #8
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d00a      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004be8:	4b7e      	ldr	r3, [pc, #504]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bf6:	497b      	ldr	r1, [pc, #492]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0310 	and.w	r3, r3, #16
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00a      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c0a:	4b76      	ldr	r3, [pc, #472]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c18:	4972      	ldr	r1, [pc, #456]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0320 	and.w	r3, r3, #32
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d00a      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c2c:	4b6d      	ldr	r3, [pc, #436]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c32:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c3a:	496a      	ldr	r1, [pc, #424]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d00a      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c4e:	4b65      	ldr	r3, [pc, #404]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c54:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c5c:	4961      	ldr	r1, [pc, #388]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d00a      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004c70:	4b5c      	ldr	r3, [pc, #368]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c76:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c7e:	4959      	ldr	r1, [pc, #356]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c80:	4313      	orrs	r3, r2
 8004c82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00a      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c92:	4b54      	ldr	r3, [pc, #336]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c98:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ca0:	4950      	ldr	r1, [pc, #320]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d00a      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004cb4:	4b4b      	ldr	r3, [pc, #300]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cc2:	4948      	ldr	r1, [pc, #288]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00a      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004cd6:	4b43      	ldr	r3, [pc, #268]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cdc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ce4:	493f      	ldr	r1, [pc, #252]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d028      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004cf8:	4b3a      	ldr	r3, [pc, #232]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cfe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d06:	4937      	ldr	r1, [pc, #220]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d16:	d106      	bne.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d18:	4b32      	ldr	r3, [pc, #200]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	4a31      	ldr	r2, [pc, #196]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d22:	60d3      	str	r3, [r2, #12]
 8004d24:	e011      	b.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d2a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d2e:	d10c      	bne.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	3304      	adds	r3, #4
 8004d34:	2101      	movs	r1, #1
 8004d36:	4618      	mov	r0, r3
 8004d38:	f000 f8c8 	bl	8004ecc <RCCEx_PLLSAI1_Config>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004d40:	7cfb      	ldrb	r3, [r7, #19]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d001      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004d46:	7cfb      	ldrb	r3, [r7, #19]
 8004d48:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d028      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004d56:	4b23      	ldr	r3, [pc, #140]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d5c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d64:	491f      	ldr	r1, [pc, #124]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d74:	d106      	bne.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d76:	4b1b      	ldr	r3, [pc, #108]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	4a1a      	ldr	r2, [pc, #104]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d80:	60d3      	str	r3, [r2, #12]
 8004d82:	e011      	b.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d8c:	d10c      	bne.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	3304      	adds	r3, #4
 8004d92:	2101      	movs	r1, #1
 8004d94:	4618      	mov	r0, r3
 8004d96:	f000 f899 	bl	8004ecc <RCCEx_PLLSAI1_Config>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d9e:	7cfb      	ldrb	r3, [r7, #19]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d001      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004da4:	7cfb      	ldrb	r3, [r7, #19]
 8004da6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d02b      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004db4:	4b0b      	ldr	r3, [pc, #44]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dc2:	4908      	ldr	r1, [pc, #32]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dd2:	d109      	bne.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dd4:	4b03      	ldr	r3, [pc, #12]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	4a02      	ldr	r2, [pc, #8]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004dde:	60d3      	str	r3, [r2, #12]
 8004de0:	e014      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004de2:	bf00      	nop
 8004de4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004df0:	d10c      	bne.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	3304      	adds	r3, #4
 8004df6:	2101      	movs	r1, #1
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f000 f867 	bl	8004ecc <RCCEx_PLLSAI1_Config>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e02:	7cfb      	ldrb	r3, [r7, #19]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d001      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004e08:	7cfb      	ldrb	r3, [r7, #19]
 8004e0a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d02f      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e18:	4b2b      	ldr	r3, [pc, #172]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e1e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e26:	4928      	ldr	r1, [pc, #160]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e36:	d10d      	bne.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	3304      	adds	r3, #4
 8004e3c:	2102      	movs	r1, #2
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f000 f844 	bl	8004ecc <RCCEx_PLLSAI1_Config>
 8004e44:	4603      	mov	r3, r0
 8004e46:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e48:	7cfb      	ldrb	r3, [r7, #19]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d014      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004e4e:	7cfb      	ldrb	r3, [r7, #19]
 8004e50:	74bb      	strb	r3, [r7, #18]
 8004e52:	e011      	b.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e5c:	d10c      	bne.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	3320      	adds	r3, #32
 8004e62:	2102      	movs	r1, #2
 8004e64:	4618      	mov	r0, r3
 8004e66:	f000 f925 	bl	80050b4 <RCCEx_PLLSAI2_Config>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e6e:	7cfb      	ldrb	r3, [r7, #19]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d001      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004e74:	7cfb      	ldrb	r3, [r7, #19]
 8004e76:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d00a      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004e84:	4b10      	ldr	r3, [pc, #64]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e8a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e92:	490d      	ldr	r1, [pc, #52]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e94:	4313      	orrs	r3, r2
 8004e96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d00b      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004ea6:	4b08      	ldr	r3, [pc, #32]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004eb6:	4904      	ldr	r1, [pc, #16]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004ebe:	7cbb      	ldrb	r3, [r7, #18]
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3718      	adds	r7, #24
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	40021000 	.word	0x40021000

08004ecc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004eda:	4b75      	ldr	r3, [pc, #468]	; (80050b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	f003 0303 	and.w	r3, r3, #3
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d018      	beq.n	8004f18 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004ee6:	4b72      	ldr	r3, [pc, #456]	; (80050b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	f003 0203 	and.w	r2, r3, #3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d10d      	bne.n	8004f12 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
       ||
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d009      	beq.n	8004f12 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004efe:	4b6c      	ldr	r3, [pc, #432]	; (80050b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	091b      	lsrs	r3, r3, #4
 8004f04:	f003 0307 	and.w	r3, r3, #7
 8004f08:	1c5a      	adds	r2, r3, #1
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	685b      	ldr	r3, [r3, #4]
       ||
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d047      	beq.n	8004fa2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	73fb      	strb	r3, [r7, #15]
 8004f16:	e044      	b.n	8004fa2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2b03      	cmp	r3, #3
 8004f1e:	d018      	beq.n	8004f52 <RCCEx_PLLSAI1_Config+0x86>
 8004f20:	2b03      	cmp	r3, #3
 8004f22:	d825      	bhi.n	8004f70 <RCCEx_PLLSAI1_Config+0xa4>
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d002      	beq.n	8004f2e <RCCEx_PLLSAI1_Config+0x62>
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	d009      	beq.n	8004f40 <RCCEx_PLLSAI1_Config+0x74>
 8004f2c:	e020      	b.n	8004f70 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004f2e:	4b60      	ldr	r3, [pc, #384]	; (80050b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0302 	and.w	r3, r3, #2
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d11d      	bne.n	8004f76 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f3e:	e01a      	b.n	8004f76 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004f40:	4b5b      	ldr	r3, [pc, #364]	; (80050b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d116      	bne.n	8004f7a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f50:	e013      	b.n	8004f7a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004f52:	4b57      	ldr	r3, [pc, #348]	; (80050b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d10f      	bne.n	8004f7e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004f5e:	4b54      	ldr	r3, [pc, #336]	; (80050b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d109      	bne.n	8004f7e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004f6e:	e006      	b.n	8004f7e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	73fb      	strb	r3, [r7, #15]
      break;
 8004f74:	e004      	b.n	8004f80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f76:	bf00      	nop
 8004f78:	e002      	b.n	8004f80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f7a:	bf00      	nop
 8004f7c:	e000      	b.n	8004f80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f7e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004f80:	7bfb      	ldrb	r3, [r7, #15]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d10d      	bne.n	8004fa2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004f86:	4b4a      	ldr	r3, [pc, #296]	; (80050b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6819      	ldr	r1, [r3, #0]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	3b01      	subs	r3, #1
 8004f98:	011b      	lsls	r3, r3, #4
 8004f9a:	430b      	orrs	r3, r1
 8004f9c:	4944      	ldr	r1, [pc, #272]	; (80050b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004fa2:	7bfb      	ldrb	r3, [r7, #15]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d17d      	bne.n	80050a4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004fa8:	4b41      	ldr	r3, [pc, #260]	; (80050b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a40      	ldr	r2, [pc, #256]	; (80050b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004fb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fb4:	f7fd fa98 	bl	80024e8 <HAL_GetTick>
 8004fb8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004fba:	e009      	b.n	8004fd0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004fbc:	f7fd fa94 	bl	80024e8 <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	d902      	bls.n	8004fd0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	73fb      	strb	r3, [r7, #15]
        break;
 8004fce:	e005      	b.n	8004fdc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004fd0:	4b37      	ldr	r3, [pc, #220]	; (80050b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d1ef      	bne.n	8004fbc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004fdc:	7bfb      	ldrb	r3, [r7, #15]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d160      	bne.n	80050a4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d111      	bne.n	800500c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004fe8:	4b31      	ldr	r3, [pc, #196]	; (80050b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004ff0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	6892      	ldr	r2, [r2, #8]
 8004ff8:	0211      	lsls	r1, r2, #8
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	68d2      	ldr	r2, [r2, #12]
 8004ffe:	0912      	lsrs	r2, r2, #4
 8005000:	0452      	lsls	r2, r2, #17
 8005002:	430a      	orrs	r2, r1
 8005004:	492a      	ldr	r1, [pc, #168]	; (80050b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005006:	4313      	orrs	r3, r2
 8005008:	610b      	str	r3, [r1, #16]
 800500a:	e027      	b.n	800505c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	2b01      	cmp	r3, #1
 8005010:	d112      	bne.n	8005038 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005012:	4b27      	ldr	r3, [pc, #156]	; (80050b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800501a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	6892      	ldr	r2, [r2, #8]
 8005022:	0211      	lsls	r1, r2, #8
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	6912      	ldr	r2, [r2, #16]
 8005028:	0852      	lsrs	r2, r2, #1
 800502a:	3a01      	subs	r2, #1
 800502c:	0552      	lsls	r2, r2, #21
 800502e:	430a      	orrs	r2, r1
 8005030:	491f      	ldr	r1, [pc, #124]	; (80050b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005032:	4313      	orrs	r3, r2
 8005034:	610b      	str	r3, [r1, #16]
 8005036:	e011      	b.n	800505c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005038:	4b1d      	ldr	r3, [pc, #116]	; (80050b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005040:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	6892      	ldr	r2, [r2, #8]
 8005048:	0211      	lsls	r1, r2, #8
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	6952      	ldr	r2, [r2, #20]
 800504e:	0852      	lsrs	r2, r2, #1
 8005050:	3a01      	subs	r2, #1
 8005052:	0652      	lsls	r2, r2, #25
 8005054:	430a      	orrs	r2, r1
 8005056:	4916      	ldr	r1, [pc, #88]	; (80050b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005058:	4313      	orrs	r3, r2
 800505a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800505c:	4b14      	ldr	r3, [pc, #80]	; (80050b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a13      	ldr	r2, [pc, #76]	; (80050b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005062:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005066:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005068:	f7fd fa3e 	bl	80024e8 <HAL_GetTick>
 800506c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800506e:	e009      	b.n	8005084 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005070:	f7fd fa3a 	bl	80024e8 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	2b02      	cmp	r3, #2
 800507c:	d902      	bls.n	8005084 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	73fb      	strb	r3, [r7, #15]
          break;
 8005082:	e005      	b.n	8005090 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005084:	4b0a      	ldr	r3, [pc, #40]	; (80050b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d0ef      	beq.n	8005070 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005090:	7bfb      	ldrb	r3, [r7, #15]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d106      	bne.n	80050a4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005096:	4b06      	ldr	r3, [pc, #24]	; (80050b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005098:	691a      	ldr	r2, [r3, #16]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	699b      	ldr	r3, [r3, #24]
 800509e:	4904      	ldr	r1, [pc, #16]	; (80050b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050a0:	4313      	orrs	r3, r2
 80050a2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80050a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3710      	adds	r7, #16
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	40021000 	.word	0x40021000

080050b4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050be:	2300      	movs	r3, #0
 80050c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80050c2:	4b6a      	ldr	r3, [pc, #424]	; (800526c <RCCEx_PLLSAI2_Config+0x1b8>)
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	f003 0303 	and.w	r3, r3, #3
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d018      	beq.n	8005100 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80050ce:	4b67      	ldr	r3, [pc, #412]	; (800526c <RCCEx_PLLSAI2_Config+0x1b8>)
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	f003 0203 	and.w	r2, r3, #3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	429a      	cmp	r2, r3
 80050dc:	d10d      	bne.n	80050fa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
       ||
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d009      	beq.n	80050fa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80050e6:	4b61      	ldr	r3, [pc, #388]	; (800526c <RCCEx_PLLSAI2_Config+0x1b8>)
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	091b      	lsrs	r3, r3, #4
 80050ec:	f003 0307 	and.w	r3, r3, #7
 80050f0:	1c5a      	adds	r2, r3, #1
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685b      	ldr	r3, [r3, #4]
       ||
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d047      	beq.n	800518a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	73fb      	strb	r3, [r7, #15]
 80050fe:	e044      	b.n	800518a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2b03      	cmp	r3, #3
 8005106:	d018      	beq.n	800513a <RCCEx_PLLSAI2_Config+0x86>
 8005108:	2b03      	cmp	r3, #3
 800510a:	d825      	bhi.n	8005158 <RCCEx_PLLSAI2_Config+0xa4>
 800510c:	2b01      	cmp	r3, #1
 800510e:	d002      	beq.n	8005116 <RCCEx_PLLSAI2_Config+0x62>
 8005110:	2b02      	cmp	r3, #2
 8005112:	d009      	beq.n	8005128 <RCCEx_PLLSAI2_Config+0x74>
 8005114:	e020      	b.n	8005158 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005116:	4b55      	ldr	r3, [pc, #340]	; (800526c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0302 	and.w	r3, r3, #2
 800511e:	2b00      	cmp	r3, #0
 8005120:	d11d      	bne.n	800515e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005126:	e01a      	b.n	800515e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005128:	4b50      	ldr	r3, [pc, #320]	; (800526c <RCCEx_PLLSAI2_Config+0x1b8>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005130:	2b00      	cmp	r3, #0
 8005132:	d116      	bne.n	8005162 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005138:	e013      	b.n	8005162 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800513a:	4b4c      	ldr	r3, [pc, #304]	; (800526c <RCCEx_PLLSAI2_Config+0x1b8>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d10f      	bne.n	8005166 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005146:	4b49      	ldr	r3, [pc, #292]	; (800526c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d109      	bne.n	8005166 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005156:	e006      	b.n	8005166 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	73fb      	strb	r3, [r7, #15]
      break;
 800515c:	e004      	b.n	8005168 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800515e:	bf00      	nop
 8005160:	e002      	b.n	8005168 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005162:	bf00      	nop
 8005164:	e000      	b.n	8005168 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005166:	bf00      	nop
    }

    if(status == HAL_OK)
 8005168:	7bfb      	ldrb	r3, [r7, #15]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d10d      	bne.n	800518a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800516e:	4b3f      	ldr	r3, [pc, #252]	; (800526c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6819      	ldr	r1, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	3b01      	subs	r3, #1
 8005180:	011b      	lsls	r3, r3, #4
 8005182:	430b      	orrs	r3, r1
 8005184:	4939      	ldr	r1, [pc, #228]	; (800526c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005186:	4313      	orrs	r3, r2
 8005188:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800518a:	7bfb      	ldrb	r3, [r7, #15]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d167      	bne.n	8005260 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005190:	4b36      	ldr	r3, [pc, #216]	; (800526c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a35      	ldr	r2, [pc, #212]	; (800526c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005196:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800519a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800519c:	f7fd f9a4 	bl	80024e8 <HAL_GetTick>
 80051a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80051a2:	e009      	b.n	80051b8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80051a4:	f7fd f9a0 	bl	80024e8 <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	d902      	bls.n	80051b8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	73fb      	strb	r3, [r7, #15]
        break;
 80051b6:	e005      	b.n	80051c4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80051b8:	4b2c      	ldr	r3, [pc, #176]	; (800526c <RCCEx_PLLSAI2_Config+0x1b8>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d1ef      	bne.n	80051a4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80051c4:	7bfb      	ldrb	r3, [r7, #15]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d14a      	bne.n	8005260 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d111      	bne.n	80051f4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80051d0:	4b26      	ldr	r3, [pc, #152]	; (800526c <RCCEx_PLLSAI2_Config+0x1b8>)
 80051d2:	695b      	ldr	r3, [r3, #20]
 80051d4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80051d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	6892      	ldr	r2, [r2, #8]
 80051e0:	0211      	lsls	r1, r2, #8
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	68d2      	ldr	r2, [r2, #12]
 80051e6:	0912      	lsrs	r2, r2, #4
 80051e8:	0452      	lsls	r2, r2, #17
 80051ea:	430a      	orrs	r2, r1
 80051ec:	491f      	ldr	r1, [pc, #124]	; (800526c <RCCEx_PLLSAI2_Config+0x1b8>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	614b      	str	r3, [r1, #20]
 80051f2:	e011      	b.n	8005218 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80051f4:	4b1d      	ldr	r3, [pc, #116]	; (800526c <RCCEx_PLLSAI2_Config+0x1b8>)
 80051f6:	695b      	ldr	r3, [r3, #20]
 80051f8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80051fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	6892      	ldr	r2, [r2, #8]
 8005204:	0211      	lsls	r1, r2, #8
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	6912      	ldr	r2, [r2, #16]
 800520a:	0852      	lsrs	r2, r2, #1
 800520c:	3a01      	subs	r2, #1
 800520e:	0652      	lsls	r2, r2, #25
 8005210:	430a      	orrs	r2, r1
 8005212:	4916      	ldr	r1, [pc, #88]	; (800526c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005214:	4313      	orrs	r3, r2
 8005216:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005218:	4b14      	ldr	r3, [pc, #80]	; (800526c <RCCEx_PLLSAI2_Config+0x1b8>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a13      	ldr	r2, [pc, #76]	; (800526c <RCCEx_PLLSAI2_Config+0x1b8>)
 800521e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005222:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005224:	f7fd f960 	bl	80024e8 <HAL_GetTick>
 8005228:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800522a:	e009      	b.n	8005240 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800522c:	f7fd f95c 	bl	80024e8 <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	2b02      	cmp	r3, #2
 8005238:	d902      	bls.n	8005240 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	73fb      	strb	r3, [r7, #15]
          break;
 800523e:	e005      	b.n	800524c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005240:	4b0a      	ldr	r3, [pc, #40]	; (800526c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d0ef      	beq.n	800522c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800524c:	7bfb      	ldrb	r3, [r7, #15]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d106      	bne.n	8005260 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005252:	4b06      	ldr	r3, [pc, #24]	; (800526c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005254:	695a      	ldr	r2, [r3, #20]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	695b      	ldr	r3, [r3, #20]
 800525a:	4904      	ldr	r1, [pc, #16]	; (800526c <RCCEx_PLLSAI2_Config+0x1b8>)
 800525c:	4313      	orrs	r3, r2
 800525e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005260:	7bfb      	ldrb	r3, [r7, #15]
}
 8005262:	4618      	mov	r0, r3
 8005264:	3710      	adds	r7, #16
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	40021000 	.word	0x40021000

08005270 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d101      	bne.n	8005282 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e049      	b.n	8005316 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005288:	b2db      	uxtb	r3, r3
 800528a:	2b00      	cmp	r3, #0
 800528c:	d106      	bne.n	800529c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 f841 	bl	800531e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2202      	movs	r2, #2
 80052a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	3304      	adds	r3, #4
 80052ac:	4619      	mov	r1, r3
 80052ae:	4610      	mov	r0, r2
 80052b0:	f000 fd00 	bl	8005cb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3708      	adds	r7, #8
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800531e:	b480      	push	{r7}
 8005320:	b083      	sub	sp, #12
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005326:	bf00      	nop
 8005328:	370c      	adds	r7, #12
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr
	...

08005334 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005342:	b2db      	uxtb	r3, r3
 8005344:	2b01      	cmp	r3, #1
 8005346:	d001      	beq.n	800534c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e04f      	b.n	80053ec <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2202      	movs	r2, #2
 8005350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68da      	ldr	r2, [r3, #12]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f042 0201 	orr.w	r2, r2, #1
 8005362:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a23      	ldr	r2, [pc, #140]	; (80053f8 <HAL_TIM_Base_Start_IT+0xc4>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d01d      	beq.n	80053aa <HAL_TIM_Base_Start_IT+0x76>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005376:	d018      	beq.n	80053aa <HAL_TIM_Base_Start_IT+0x76>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a1f      	ldr	r2, [pc, #124]	; (80053fc <HAL_TIM_Base_Start_IT+0xc8>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d013      	beq.n	80053aa <HAL_TIM_Base_Start_IT+0x76>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a1e      	ldr	r2, [pc, #120]	; (8005400 <HAL_TIM_Base_Start_IT+0xcc>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d00e      	beq.n	80053aa <HAL_TIM_Base_Start_IT+0x76>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a1c      	ldr	r2, [pc, #112]	; (8005404 <HAL_TIM_Base_Start_IT+0xd0>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d009      	beq.n	80053aa <HAL_TIM_Base_Start_IT+0x76>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a1b      	ldr	r2, [pc, #108]	; (8005408 <HAL_TIM_Base_Start_IT+0xd4>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d004      	beq.n	80053aa <HAL_TIM_Base_Start_IT+0x76>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a19      	ldr	r2, [pc, #100]	; (800540c <HAL_TIM_Base_Start_IT+0xd8>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d115      	bne.n	80053d6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	689a      	ldr	r2, [r3, #8]
 80053b0:	4b17      	ldr	r3, [pc, #92]	; (8005410 <HAL_TIM_Base_Start_IT+0xdc>)
 80053b2:	4013      	ands	r3, r2
 80053b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2b06      	cmp	r3, #6
 80053ba:	d015      	beq.n	80053e8 <HAL_TIM_Base_Start_IT+0xb4>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053c2:	d011      	beq.n	80053e8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f042 0201 	orr.w	r2, r2, #1
 80053d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053d4:	e008      	b.n	80053e8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f042 0201 	orr.w	r2, r2, #1
 80053e4:	601a      	str	r2, [r3, #0]
 80053e6:	e000      	b.n	80053ea <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053e8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3714      	adds	r7, #20
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr
 80053f8:	40012c00 	.word	0x40012c00
 80053fc:	40000400 	.word	0x40000400
 8005400:	40000800 	.word	0x40000800
 8005404:	40000c00 	.word	0x40000c00
 8005408:	40013400 	.word	0x40013400
 800540c:	40014000 	.word	0x40014000
 8005410:	00010007 	.word	0x00010007

08005414 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d101      	bne.n	8005426 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e049      	b.n	80054ba <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800542c:	b2db      	uxtb	r3, r3
 800542e:	2b00      	cmp	r3, #0
 8005430:	d106      	bne.n	8005440 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f7fc fe10 	bl	8002060 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2202      	movs	r2, #2
 8005444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	3304      	adds	r3, #4
 8005450:	4619      	mov	r1, r3
 8005452:	4610      	mov	r0, r2
 8005454:	f000 fc2e 	bl	8005cb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3708      	adds	r7, #8
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
	...

080054c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d109      	bne.n	80054e8 <HAL_TIM_PWM_Start+0x24>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	2b01      	cmp	r3, #1
 80054de:	bf14      	ite	ne
 80054e0:	2301      	movne	r3, #1
 80054e2:	2300      	moveq	r3, #0
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	e03c      	b.n	8005562 <HAL_TIM_PWM_Start+0x9e>
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	2b04      	cmp	r3, #4
 80054ec:	d109      	bne.n	8005502 <HAL_TIM_PWM_Start+0x3e>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	bf14      	ite	ne
 80054fa:	2301      	movne	r3, #1
 80054fc:	2300      	moveq	r3, #0
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	e02f      	b.n	8005562 <HAL_TIM_PWM_Start+0x9e>
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	2b08      	cmp	r3, #8
 8005506:	d109      	bne.n	800551c <HAL_TIM_PWM_Start+0x58>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800550e:	b2db      	uxtb	r3, r3
 8005510:	2b01      	cmp	r3, #1
 8005512:	bf14      	ite	ne
 8005514:	2301      	movne	r3, #1
 8005516:	2300      	moveq	r3, #0
 8005518:	b2db      	uxtb	r3, r3
 800551a:	e022      	b.n	8005562 <HAL_TIM_PWM_Start+0x9e>
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	2b0c      	cmp	r3, #12
 8005520:	d109      	bne.n	8005536 <HAL_TIM_PWM_Start+0x72>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005528:	b2db      	uxtb	r3, r3
 800552a:	2b01      	cmp	r3, #1
 800552c:	bf14      	ite	ne
 800552e:	2301      	movne	r3, #1
 8005530:	2300      	moveq	r3, #0
 8005532:	b2db      	uxtb	r3, r3
 8005534:	e015      	b.n	8005562 <HAL_TIM_PWM_Start+0x9e>
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	2b10      	cmp	r3, #16
 800553a:	d109      	bne.n	8005550 <HAL_TIM_PWM_Start+0x8c>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005542:	b2db      	uxtb	r3, r3
 8005544:	2b01      	cmp	r3, #1
 8005546:	bf14      	ite	ne
 8005548:	2301      	movne	r3, #1
 800554a:	2300      	moveq	r3, #0
 800554c:	b2db      	uxtb	r3, r3
 800554e:	e008      	b.n	8005562 <HAL_TIM_PWM_Start+0x9e>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005556:	b2db      	uxtb	r3, r3
 8005558:	2b01      	cmp	r3, #1
 800555a:	bf14      	ite	ne
 800555c:	2301      	movne	r3, #1
 800555e:	2300      	moveq	r3, #0
 8005560:	b2db      	uxtb	r3, r3
 8005562:	2b00      	cmp	r3, #0
 8005564:	d001      	beq.n	800556a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e09c      	b.n	80056a4 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d104      	bne.n	800557a <HAL_TIM_PWM_Start+0xb6>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2202      	movs	r2, #2
 8005574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005578:	e023      	b.n	80055c2 <HAL_TIM_PWM_Start+0xfe>
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	2b04      	cmp	r3, #4
 800557e:	d104      	bne.n	800558a <HAL_TIM_PWM_Start+0xc6>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2202      	movs	r2, #2
 8005584:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005588:	e01b      	b.n	80055c2 <HAL_TIM_PWM_Start+0xfe>
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	2b08      	cmp	r3, #8
 800558e:	d104      	bne.n	800559a <HAL_TIM_PWM_Start+0xd6>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2202      	movs	r2, #2
 8005594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005598:	e013      	b.n	80055c2 <HAL_TIM_PWM_Start+0xfe>
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	2b0c      	cmp	r3, #12
 800559e:	d104      	bne.n	80055aa <HAL_TIM_PWM_Start+0xe6>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2202      	movs	r2, #2
 80055a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80055a8:	e00b      	b.n	80055c2 <HAL_TIM_PWM_Start+0xfe>
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	2b10      	cmp	r3, #16
 80055ae:	d104      	bne.n	80055ba <HAL_TIM_PWM_Start+0xf6>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2202      	movs	r2, #2
 80055b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055b8:	e003      	b.n	80055c2 <HAL_TIM_PWM_Start+0xfe>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2202      	movs	r2, #2
 80055be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	2201      	movs	r2, #1
 80055c8:	6839      	ldr	r1, [r7, #0]
 80055ca:	4618      	mov	r0, r3
 80055cc:	f000 fee2 	bl	8006394 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a35      	ldr	r2, [pc, #212]	; (80056ac <HAL_TIM_PWM_Start+0x1e8>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d013      	beq.n	8005602 <HAL_TIM_PWM_Start+0x13e>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a34      	ldr	r2, [pc, #208]	; (80056b0 <HAL_TIM_PWM_Start+0x1ec>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d00e      	beq.n	8005602 <HAL_TIM_PWM_Start+0x13e>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a32      	ldr	r2, [pc, #200]	; (80056b4 <HAL_TIM_PWM_Start+0x1f0>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d009      	beq.n	8005602 <HAL_TIM_PWM_Start+0x13e>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a31      	ldr	r2, [pc, #196]	; (80056b8 <HAL_TIM_PWM_Start+0x1f4>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d004      	beq.n	8005602 <HAL_TIM_PWM_Start+0x13e>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a2f      	ldr	r2, [pc, #188]	; (80056bc <HAL_TIM_PWM_Start+0x1f8>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d101      	bne.n	8005606 <HAL_TIM_PWM_Start+0x142>
 8005602:	2301      	movs	r3, #1
 8005604:	e000      	b.n	8005608 <HAL_TIM_PWM_Start+0x144>
 8005606:	2300      	movs	r3, #0
 8005608:	2b00      	cmp	r3, #0
 800560a:	d007      	beq.n	800561c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800561a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a22      	ldr	r2, [pc, #136]	; (80056ac <HAL_TIM_PWM_Start+0x1e8>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d01d      	beq.n	8005662 <HAL_TIM_PWM_Start+0x19e>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800562e:	d018      	beq.n	8005662 <HAL_TIM_PWM_Start+0x19e>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a22      	ldr	r2, [pc, #136]	; (80056c0 <HAL_TIM_PWM_Start+0x1fc>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d013      	beq.n	8005662 <HAL_TIM_PWM_Start+0x19e>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a21      	ldr	r2, [pc, #132]	; (80056c4 <HAL_TIM_PWM_Start+0x200>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d00e      	beq.n	8005662 <HAL_TIM_PWM_Start+0x19e>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a1f      	ldr	r2, [pc, #124]	; (80056c8 <HAL_TIM_PWM_Start+0x204>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d009      	beq.n	8005662 <HAL_TIM_PWM_Start+0x19e>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a17      	ldr	r2, [pc, #92]	; (80056b0 <HAL_TIM_PWM_Start+0x1ec>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d004      	beq.n	8005662 <HAL_TIM_PWM_Start+0x19e>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a15      	ldr	r2, [pc, #84]	; (80056b4 <HAL_TIM_PWM_Start+0x1f0>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d115      	bne.n	800568e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	689a      	ldr	r2, [r3, #8]
 8005668:	4b18      	ldr	r3, [pc, #96]	; (80056cc <HAL_TIM_PWM_Start+0x208>)
 800566a:	4013      	ands	r3, r2
 800566c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2b06      	cmp	r3, #6
 8005672:	d015      	beq.n	80056a0 <HAL_TIM_PWM_Start+0x1dc>
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800567a:	d011      	beq.n	80056a0 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f042 0201 	orr.w	r2, r2, #1
 800568a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800568c:	e008      	b.n	80056a0 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f042 0201 	orr.w	r2, r2, #1
 800569c:	601a      	str	r2, [r3, #0]
 800569e:	e000      	b.n	80056a2 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3710      	adds	r7, #16
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	40012c00 	.word	0x40012c00
 80056b0:	40013400 	.word	0x40013400
 80056b4:	40014000 	.word	0x40014000
 80056b8:	40014400 	.word	0x40014400
 80056bc:	40014800 	.word	0x40014800
 80056c0:	40000400 	.word	0x40000400
 80056c4:	40000800 	.word	0x40000800
 80056c8:	40000c00 	.word	0x40000c00
 80056cc:	00010007 	.word	0x00010007

080056d0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b082      	sub	sp, #8
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2200      	movs	r2, #0
 80056e0:	6839      	ldr	r1, [r7, #0]
 80056e2:	4618      	mov	r0, r3
 80056e4:	f000 fe56 	bl	8006394 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a3e      	ldr	r2, [pc, #248]	; (80057e8 <HAL_TIM_PWM_Stop+0x118>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d013      	beq.n	800571a <HAL_TIM_PWM_Stop+0x4a>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a3d      	ldr	r2, [pc, #244]	; (80057ec <HAL_TIM_PWM_Stop+0x11c>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d00e      	beq.n	800571a <HAL_TIM_PWM_Stop+0x4a>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a3b      	ldr	r2, [pc, #236]	; (80057f0 <HAL_TIM_PWM_Stop+0x120>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d009      	beq.n	800571a <HAL_TIM_PWM_Stop+0x4a>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a3a      	ldr	r2, [pc, #232]	; (80057f4 <HAL_TIM_PWM_Stop+0x124>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d004      	beq.n	800571a <HAL_TIM_PWM_Stop+0x4a>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a38      	ldr	r2, [pc, #224]	; (80057f8 <HAL_TIM_PWM_Stop+0x128>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d101      	bne.n	800571e <HAL_TIM_PWM_Stop+0x4e>
 800571a:	2301      	movs	r3, #1
 800571c:	e000      	b.n	8005720 <HAL_TIM_PWM_Stop+0x50>
 800571e:	2300      	movs	r3, #0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d017      	beq.n	8005754 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	6a1a      	ldr	r2, [r3, #32]
 800572a:	f241 1311 	movw	r3, #4369	; 0x1111
 800572e:	4013      	ands	r3, r2
 8005730:	2b00      	cmp	r3, #0
 8005732:	d10f      	bne.n	8005754 <HAL_TIM_PWM_Stop+0x84>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	6a1a      	ldr	r2, [r3, #32]
 800573a:	f240 4344 	movw	r3, #1092	; 0x444
 800573e:	4013      	ands	r3, r2
 8005740:	2b00      	cmp	r3, #0
 8005742:	d107      	bne.n	8005754 <HAL_TIM_PWM_Stop+0x84>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005752:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	6a1a      	ldr	r2, [r3, #32]
 800575a:	f241 1311 	movw	r3, #4369	; 0x1111
 800575e:	4013      	ands	r3, r2
 8005760:	2b00      	cmp	r3, #0
 8005762:	d10f      	bne.n	8005784 <HAL_TIM_PWM_Stop+0xb4>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	6a1a      	ldr	r2, [r3, #32]
 800576a:	f240 4344 	movw	r3, #1092	; 0x444
 800576e:	4013      	ands	r3, r2
 8005770:	2b00      	cmp	r3, #0
 8005772:	d107      	bne.n	8005784 <HAL_TIM_PWM_Stop+0xb4>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f022 0201 	bic.w	r2, r2, #1
 8005782:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d104      	bne.n	8005794 <HAL_TIM_PWM_Stop+0xc4>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2201      	movs	r2, #1
 800578e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005792:	e023      	b.n	80057dc <HAL_TIM_PWM_Stop+0x10c>
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	2b04      	cmp	r3, #4
 8005798:	d104      	bne.n	80057a4 <HAL_TIM_PWM_Stop+0xd4>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2201      	movs	r2, #1
 800579e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057a2:	e01b      	b.n	80057dc <HAL_TIM_PWM_Stop+0x10c>
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	2b08      	cmp	r3, #8
 80057a8:	d104      	bne.n	80057b4 <HAL_TIM_PWM_Stop+0xe4>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2201      	movs	r2, #1
 80057ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057b2:	e013      	b.n	80057dc <HAL_TIM_PWM_Stop+0x10c>
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	2b0c      	cmp	r3, #12
 80057b8:	d104      	bne.n	80057c4 <HAL_TIM_PWM_Stop+0xf4>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2201      	movs	r2, #1
 80057be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057c2:	e00b      	b.n	80057dc <HAL_TIM_PWM_Stop+0x10c>
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	2b10      	cmp	r3, #16
 80057c8:	d104      	bne.n	80057d4 <HAL_TIM_PWM_Stop+0x104>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2201      	movs	r2, #1
 80057ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057d2:	e003      	b.n	80057dc <HAL_TIM_PWM_Stop+0x10c>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3708      	adds	r7, #8
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	40012c00 	.word	0x40012c00
 80057ec:	40013400 	.word	0x40013400
 80057f0:	40014000 	.word	0x40014000
 80057f4:	40014400 	.word	0x40014400
 80057f8:	40014800 	.word	0x40014800

080057fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	f003 0302 	and.w	r3, r3, #2
 800580e:	2b02      	cmp	r3, #2
 8005810:	d122      	bne.n	8005858 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	f003 0302 	and.w	r3, r3, #2
 800581c:	2b02      	cmp	r3, #2
 800581e:	d11b      	bne.n	8005858 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f06f 0202 	mvn.w	r2, #2
 8005828:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2201      	movs	r2, #1
 800582e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	699b      	ldr	r3, [r3, #24]
 8005836:	f003 0303 	and.w	r3, r3, #3
 800583a:	2b00      	cmp	r3, #0
 800583c:	d003      	beq.n	8005846 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 fa1a 	bl	8005c78 <HAL_TIM_IC_CaptureCallback>
 8005844:	e005      	b.n	8005852 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 fa0c 	bl	8005c64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 fa1d 	bl	8005c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	f003 0304 	and.w	r3, r3, #4
 8005862:	2b04      	cmp	r3, #4
 8005864:	d122      	bne.n	80058ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	f003 0304 	and.w	r3, r3, #4
 8005870:	2b04      	cmp	r3, #4
 8005872:	d11b      	bne.n	80058ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f06f 0204 	mvn.w	r2, #4
 800587c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2202      	movs	r2, #2
 8005882:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800588e:	2b00      	cmp	r3, #0
 8005890:	d003      	beq.n	800589a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 f9f0 	bl	8005c78 <HAL_TIM_IC_CaptureCallback>
 8005898:	e005      	b.n	80058a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 f9e2 	bl	8005c64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 f9f3 	bl	8005c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	691b      	ldr	r3, [r3, #16]
 80058b2:	f003 0308 	and.w	r3, r3, #8
 80058b6:	2b08      	cmp	r3, #8
 80058b8:	d122      	bne.n	8005900 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	f003 0308 	and.w	r3, r3, #8
 80058c4:	2b08      	cmp	r3, #8
 80058c6:	d11b      	bne.n	8005900 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f06f 0208 	mvn.w	r2, #8
 80058d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2204      	movs	r2, #4
 80058d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	69db      	ldr	r3, [r3, #28]
 80058de:	f003 0303 	and.w	r3, r3, #3
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d003      	beq.n	80058ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 f9c6 	bl	8005c78 <HAL_TIM_IC_CaptureCallback>
 80058ec:	e005      	b.n	80058fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 f9b8 	bl	8005c64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f000 f9c9 	bl	8005c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	f003 0310 	and.w	r3, r3, #16
 800590a:	2b10      	cmp	r3, #16
 800590c:	d122      	bne.n	8005954 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	f003 0310 	and.w	r3, r3, #16
 8005918:	2b10      	cmp	r3, #16
 800591a:	d11b      	bne.n	8005954 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f06f 0210 	mvn.w	r2, #16
 8005924:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2208      	movs	r2, #8
 800592a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	69db      	ldr	r3, [r3, #28]
 8005932:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005936:	2b00      	cmp	r3, #0
 8005938:	d003      	beq.n	8005942 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 f99c 	bl	8005c78 <HAL_TIM_IC_CaptureCallback>
 8005940:	e005      	b.n	800594e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 f98e 	bl	8005c64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 f99f 	bl	8005c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	f003 0301 	and.w	r3, r3, #1
 800595e:	2b01      	cmp	r3, #1
 8005960:	d10e      	bne.n	8005980 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	f003 0301 	and.w	r3, r3, #1
 800596c:	2b01      	cmp	r3, #1
 800596e:	d107      	bne.n	8005980 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f06f 0201 	mvn.w	r2, #1
 8005978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f7fc fad2 	bl	8001f24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800598a:	2b80      	cmp	r3, #128	; 0x80
 800598c:	d10e      	bne.n	80059ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005998:	2b80      	cmp	r3, #128	; 0x80
 800599a:	d107      	bne.n	80059ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80059a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f000 fdac 	bl	8006504 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059ba:	d10e      	bne.n	80059da <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059c6:	2b80      	cmp	r3, #128	; 0x80
 80059c8:	d107      	bne.n	80059da <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80059d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f000 fd9f 	bl	8006518 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059e4:	2b40      	cmp	r3, #64	; 0x40
 80059e6:	d10e      	bne.n	8005a06 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f2:	2b40      	cmp	r3, #64	; 0x40
 80059f4:	d107      	bne.n	8005a06 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80059fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f000 f94d 	bl	8005ca0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	f003 0320 	and.w	r3, r3, #32
 8005a10:	2b20      	cmp	r3, #32
 8005a12:	d10e      	bne.n	8005a32 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	f003 0320 	and.w	r3, r3, #32
 8005a1e:	2b20      	cmp	r3, #32
 8005a20:	d107      	bne.n	8005a32 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f06f 0220 	mvn.w	r2, #32
 8005a2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 fd5f 	bl	80064f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a32:	bf00      	nop
 8005a34:	3708      	adds	r7, #8
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
	...

08005a3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b086      	sub	sp, #24
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d101      	bne.n	8005a5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005a56:	2302      	movs	r3, #2
 8005a58:	e0ff      	b.n	8005c5a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2b14      	cmp	r3, #20
 8005a66:	f200 80f0 	bhi.w	8005c4a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005a6a:	a201      	add	r2, pc, #4	; (adr r2, 8005a70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a70:	08005ac5 	.word	0x08005ac5
 8005a74:	08005c4b 	.word	0x08005c4b
 8005a78:	08005c4b 	.word	0x08005c4b
 8005a7c:	08005c4b 	.word	0x08005c4b
 8005a80:	08005b05 	.word	0x08005b05
 8005a84:	08005c4b 	.word	0x08005c4b
 8005a88:	08005c4b 	.word	0x08005c4b
 8005a8c:	08005c4b 	.word	0x08005c4b
 8005a90:	08005b47 	.word	0x08005b47
 8005a94:	08005c4b 	.word	0x08005c4b
 8005a98:	08005c4b 	.word	0x08005c4b
 8005a9c:	08005c4b 	.word	0x08005c4b
 8005aa0:	08005b87 	.word	0x08005b87
 8005aa4:	08005c4b 	.word	0x08005c4b
 8005aa8:	08005c4b 	.word	0x08005c4b
 8005aac:	08005c4b 	.word	0x08005c4b
 8005ab0:	08005bc9 	.word	0x08005bc9
 8005ab4:	08005c4b 	.word	0x08005c4b
 8005ab8:	08005c4b 	.word	0x08005c4b
 8005abc:	08005c4b 	.word	0x08005c4b
 8005ac0:	08005c09 	.word	0x08005c09
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	68b9      	ldr	r1, [r7, #8]
 8005aca:	4618      	mov	r0, r3
 8005acc:	f000 f98c 	bl	8005de8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	699a      	ldr	r2, [r3, #24]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f042 0208 	orr.w	r2, r2, #8
 8005ade:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	699a      	ldr	r2, [r3, #24]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f022 0204 	bic.w	r2, r2, #4
 8005aee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	6999      	ldr	r1, [r3, #24]
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	691a      	ldr	r2, [r3, #16]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	430a      	orrs	r2, r1
 8005b00:	619a      	str	r2, [r3, #24]
      break;
 8005b02:	e0a5      	b.n	8005c50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68b9      	ldr	r1, [r7, #8]
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f000 f9fc 	bl	8005f08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	699a      	ldr	r2, [r3, #24]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	699a      	ldr	r2, [r3, #24]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	6999      	ldr	r1, [r3, #24]
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	021a      	lsls	r2, r3, #8
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	430a      	orrs	r2, r1
 8005b42:	619a      	str	r2, [r3, #24]
      break;
 8005b44:	e084      	b.n	8005c50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68b9      	ldr	r1, [r7, #8]
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f000 fa65 	bl	800601c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	69da      	ldr	r2, [r3, #28]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f042 0208 	orr.w	r2, r2, #8
 8005b60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	69da      	ldr	r2, [r3, #28]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f022 0204 	bic.w	r2, r2, #4
 8005b70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	69d9      	ldr	r1, [r3, #28]
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	691a      	ldr	r2, [r3, #16]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	430a      	orrs	r2, r1
 8005b82:	61da      	str	r2, [r3, #28]
      break;
 8005b84:	e064      	b.n	8005c50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68b9      	ldr	r1, [r7, #8]
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f000 facd 	bl	800612c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	69da      	ldr	r2, [r3, #28]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ba0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	69da      	ldr	r2, [r3, #28]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	69d9      	ldr	r1, [r3, #28]
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	021a      	lsls	r2, r3, #8
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	430a      	orrs	r2, r1
 8005bc4:	61da      	str	r2, [r3, #28]
      break;
 8005bc6:	e043      	b.n	8005c50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	68b9      	ldr	r1, [r7, #8]
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f000 fb16 	bl	8006200 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f042 0208 	orr.w	r2, r2, #8
 8005be2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f022 0204 	bic.w	r2, r2, #4
 8005bf2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	691a      	ldr	r2, [r3, #16]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	430a      	orrs	r2, r1
 8005c04:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005c06:	e023      	b.n	8005c50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68b9      	ldr	r1, [r7, #8]
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f000 fb5a 	bl	80062c8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c22:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c32:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	021a      	lsls	r2, r3, #8
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	430a      	orrs	r2, r1
 8005c46:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005c48:	e002      	b.n	8005c50 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	75fb      	strb	r3, [r7, #23]
      break;
 8005c4e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c58:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3718      	adds	r7, #24
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop

08005c64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c6c:	bf00      	nop
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c80:	bf00      	nop
 8005c82:	370c      	adds	r7, #12
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c94:	bf00      	nop
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ca8:	bf00      	nop
 8005caa:	370c      	adds	r7, #12
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b085      	sub	sp, #20
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a40      	ldr	r2, [pc, #256]	; (8005dc8 <TIM_Base_SetConfig+0x114>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d013      	beq.n	8005cf4 <TIM_Base_SetConfig+0x40>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cd2:	d00f      	beq.n	8005cf4 <TIM_Base_SetConfig+0x40>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a3d      	ldr	r2, [pc, #244]	; (8005dcc <TIM_Base_SetConfig+0x118>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d00b      	beq.n	8005cf4 <TIM_Base_SetConfig+0x40>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a3c      	ldr	r2, [pc, #240]	; (8005dd0 <TIM_Base_SetConfig+0x11c>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d007      	beq.n	8005cf4 <TIM_Base_SetConfig+0x40>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4a3b      	ldr	r2, [pc, #236]	; (8005dd4 <TIM_Base_SetConfig+0x120>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d003      	beq.n	8005cf4 <TIM_Base_SetConfig+0x40>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a3a      	ldr	r2, [pc, #232]	; (8005dd8 <TIM_Base_SetConfig+0x124>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d108      	bne.n	8005d06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	68fa      	ldr	r2, [r7, #12]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a2f      	ldr	r2, [pc, #188]	; (8005dc8 <TIM_Base_SetConfig+0x114>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d01f      	beq.n	8005d4e <TIM_Base_SetConfig+0x9a>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d14:	d01b      	beq.n	8005d4e <TIM_Base_SetConfig+0x9a>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a2c      	ldr	r2, [pc, #176]	; (8005dcc <TIM_Base_SetConfig+0x118>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d017      	beq.n	8005d4e <TIM_Base_SetConfig+0x9a>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a2b      	ldr	r2, [pc, #172]	; (8005dd0 <TIM_Base_SetConfig+0x11c>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d013      	beq.n	8005d4e <TIM_Base_SetConfig+0x9a>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a2a      	ldr	r2, [pc, #168]	; (8005dd4 <TIM_Base_SetConfig+0x120>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d00f      	beq.n	8005d4e <TIM_Base_SetConfig+0x9a>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a29      	ldr	r2, [pc, #164]	; (8005dd8 <TIM_Base_SetConfig+0x124>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d00b      	beq.n	8005d4e <TIM_Base_SetConfig+0x9a>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a28      	ldr	r2, [pc, #160]	; (8005ddc <TIM_Base_SetConfig+0x128>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d007      	beq.n	8005d4e <TIM_Base_SetConfig+0x9a>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a27      	ldr	r2, [pc, #156]	; (8005de0 <TIM_Base_SetConfig+0x12c>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d003      	beq.n	8005d4e <TIM_Base_SetConfig+0x9a>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a26      	ldr	r2, [pc, #152]	; (8005de4 <TIM_Base_SetConfig+0x130>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d108      	bne.n	8005d60 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	68fa      	ldr	r2, [r7, #12]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	695b      	ldr	r3, [r3, #20]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	689a      	ldr	r2, [r3, #8]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a10      	ldr	r2, [pc, #64]	; (8005dc8 <TIM_Base_SetConfig+0x114>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d00f      	beq.n	8005dac <TIM_Base_SetConfig+0xf8>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4a12      	ldr	r2, [pc, #72]	; (8005dd8 <TIM_Base_SetConfig+0x124>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d00b      	beq.n	8005dac <TIM_Base_SetConfig+0xf8>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a11      	ldr	r2, [pc, #68]	; (8005ddc <TIM_Base_SetConfig+0x128>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d007      	beq.n	8005dac <TIM_Base_SetConfig+0xf8>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a10      	ldr	r2, [pc, #64]	; (8005de0 <TIM_Base_SetConfig+0x12c>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d003      	beq.n	8005dac <TIM_Base_SetConfig+0xf8>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a0f      	ldr	r2, [pc, #60]	; (8005de4 <TIM_Base_SetConfig+0x130>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d103      	bne.n	8005db4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	691a      	ldr	r2, [r3, #16]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	615a      	str	r2, [r3, #20]
}
 8005dba:	bf00      	nop
 8005dbc:	3714      	adds	r7, #20
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr
 8005dc6:	bf00      	nop
 8005dc8:	40012c00 	.word	0x40012c00
 8005dcc:	40000400 	.word	0x40000400
 8005dd0:	40000800 	.word	0x40000800
 8005dd4:	40000c00 	.word	0x40000c00
 8005dd8:	40013400 	.word	0x40013400
 8005ddc:	40014000 	.word	0x40014000
 8005de0:	40014400 	.word	0x40014400
 8005de4:	40014800 	.word	0x40014800

08005de8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b087      	sub	sp, #28
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a1b      	ldr	r3, [r3, #32]
 8005df6:	f023 0201 	bic.w	r2, r3, #1
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a1b      	ldr	r3, [r3, #32]
 8005e02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	699b      	ldr	r3, [r3, #24]
 8005e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f023 0303 	bic.w	r3, r3, #3
 8005e22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	f023 0302 	bic.w	r3, r3, #2
 8005e34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4a2c      	ldr	r2, [pc, #176]	; (8005ef4 <TIM_OC1_SetConfig+0x10c>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d00f      	beq.n	8005e68 <TIM_OC1_SetConfig+0x80>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4a2b      	ldr	r2, [pc, #172]	; (8005ef8 <TIM_OC1_SetConfig+0x110>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d00b      	beq.n	8005e68 <TIM_OC1_SetConfig+0x80>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4a2a      	ldr	r2, [pc, #168]	; (8005efc <TIM_OC1_SetConfig+0x114>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d007      	beq.n	8005e68 <TIM_OC1_SetConfig+0x80>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4a29      	ldr	r2, [pc, #164]	; (8005f00 <TIM_OC1_SetConfig+0x118>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d003      	beq.n	8005e68 <TIM_OC1_SetConfig+0x80>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a28      	ldr	r2, [pc, #160]	; (8005f04 <TIM_OC1_SetConfig+0x11c>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d10c      	bne.n	8005e82 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	f023 0308 	bic.w	r3, r3, #8
 8005e6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	697a      	ldr	r2, [r7, #20]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	f023 0304 	bic.w	r3, r3, #4
 8005e80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a1b      	ldr	r2, [pc, #108]	; (8005ef4 <TIM_OC1_SetConfig+0x10c>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d00f      	beq.n	8005eaa <TIM_OC1_SetConfig+0xc2>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a1a      	ldr	r2, [pc, #104]	; (8005ef8 <TIM_OC1_SetConfig+0x110>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d00b      	beq.n	8005eaa <TIM_OC1_SetConfig+0xc2>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a19      	ldr	r2, [pc, #100]	; (8005efc <TIM_OC1_SetConfig+0x114>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d007      	beq.n	8005eaa <TIM_OC1_SetConfig+0xc2>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a18      	ldr	r2, [pc, #96]	; (8005f00 <TIM_OC1_SetConfig+0x118>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d003      	beq.n	8005eaa <TIM_OC1_SetConfig+0xc2>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4a17      	ldr	r2, [pc, #92]	; (8005f04 <TIM_OC1_SetConfig+0x11c>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d111      	bne.n	8005ece <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005eb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005eb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	695b      	ldr	r3, [r3, #20]
 8005ebe:	693a      	ldr	r2, [r7, #16]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	699b      	ldr	r3, [r3, #24]
 8005ec8:	693a      	ldr	r2, [r7, #16]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	693a      	ldr	r2, [r7, #16]
 8005ed2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	685a      	ldr	r2, [r3, #4]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	697a      	ldr	r2, [r7, #20]
 8005ee6:	621a      	str	r2, [r3, #32]
}
 8005ee8:	bf00      	nop
 8005eea:	371c      	adds	r7, #28
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr
 8005ef4:	40012c00 	.word	0x40012c00
 8005ef8:	40013400 	.word	0x40013400
 8005efc:	40014000 	.word	0x40014000
 8005f00:	40014400 	.word	0x40014400
 8005f04:	40014800 	.word	0x40014800

08005f08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b087      	sub	sp, #28
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a1b      	ldr	r3, [r3, #32]
 8005f16:	f023 0210 	bic.w	r2, r3, #16
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a1b      	ldr	r3, [r3, #32]
 8005f22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	021b      	lsls	r3, r3, #8
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	f023 0320 	bic.w	r3, r3, #32
 8005f56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	011b      	lsls	r3, r3, #4
 8005f5e:	697a      	ldr	r2, [r7, #20]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4a28      	ldr	r2, [pc, #160]	; (8006008 <TIM_OC2_SetConfig+0x100>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d003      	beq.n	8005f74 <TIM_OC2_SetConfig+0x6c>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	4a27      	ldr	r2, [pc, #156]	; (800600c <TIM_OC2_SetConfig+0x104>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d10d      	bne.n	8005f90 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	011b      	lsls	r3, r3, #4
 8005f82:	697a      	ldr	r2, [r7, #20]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4a1d      	ldr	r2, [pc, #116]	; (8006008 <TIM_OC2_SetConfig+0x100>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d00f      	beq.n	8005fb8 <TIM_OC2_SetConfig+0xb0>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4a1c      	ldr	r2, [pc, #112]	; (800600c <TIM_OC2_SetConfig+0x104>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d00b      	beq.n	8005fb8 <TIM_OC2_SetConfig+0xb0>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4a1b      	ldr	r2, [pc, #108]	; (8006010 <TIM_OC2_SetConfig+0x108>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d007      	beq.n	8005fb8 <TIM_OC2_SetConfig+0xb0>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4a1a      	ldr	r2, [pc, #104]	; (8006014 <TIM_OC2_SetConfig+0x10c>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d003      	beq.n	8005fb8 <TIM_OC2_SetConfig+0xb0>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	4a19      	ldr	r2, [pc, #100]	; (8006018 <TIM_OC2_SetConfig+0x110>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d113      	bne.n	8005fe0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fbe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fc6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	695b      	ldr	r3, [r3, #20]
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	693a      	ldr	r2, [r7, #16]
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	699b      	ldr	r3, [r3, #24]
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	693a      	ldr	r2, [r7, #16]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	693a      	ldr	r2, [r7, #16]
 8005fe4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	685a      	ldr	r2, [r3, #4]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	697a      	ldr	r2, [r7, #20]
 8005ff8:	621a      	str	r2, [r3, #32]
}
 8005ffa:	bf00      	nop
 8005ffc:	371c      	adds	r7, #28
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop
 8006008:	40012c00 	.word	0x40012c00
 800600c:	40013400 	.word	0x40013400
 8006010:	40014000 	.word	0x40014000
 8006014:	40014400 	.word	0x40014400
 8006018:	40014800 	.word	0x40014800

0800601c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800601c:	b480      	push	{r7}
 800601e:	b087      	sub	sp, #28
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	69db      	ldr	r3, [r3, #28]
 8006042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800604a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800604e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f023 0303 	bic.w	r3, r3, #3
 8006056:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	68fa      	ldr	r2, [r7, #12]
 800605e:	4313      	orrs	r3, r2
 8006060:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006068:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	021b      	lsls	r3, r3, #8
 8006070:	697a      	ldr	r2, [r7, #20]
 8006072:	4313      	orrs	r3, r2
 8006074:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4a27      	ldr	r2, [pc, #156]	; (8006118 <TIM_OC3_SetConfig+0xfc>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d003      	beq.n	8006086 <TIM_OC3_SetConfig+0x6a>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a26      	ldr	r2, [pc, #152]	; (800611c <TIM_OC3_SetConfig+0x100>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d10d      	bne.n	80060a2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800608c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	021b      	lsls	r3, r3, #8
 8006094:	697a      	ldr	r2, [r7, #20]
 8006096:	4313      	orrs	r3, r2
 8006098:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4a1c      	ldr	r2, [pc, #112]	; (8006118 <TIM_OC3_SetConfig+0xfc>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d00f      	beq.n	80060ca <TIM_OC3_SetConfig+0xae>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4a1b      	ldr	r2, [pc, #108]	; (800611c <TIM_OC3_SetConfig+0x100>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d00b      	beq.n	80060ca <TIM_OC3_SetConfig+0xae>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4a1a      	ldr	r2, [pc, #104]	; (8006120 <TIM_OC3_SetConfig+0x104>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d007      	beq.n	80060ca <TIM_OC3_SetConfig+0xae>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4a19      	ldr	r2, [pc, #100]	; (8006124 <TIM_OC3_SetConfig+0x108>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d003      	beq.n	80060ca <TIM_OC3_SetConfig+0xae>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4a18      	ldr	r2, [pc, #96]	; (8006128 <TIM_OC3_SetConfig+0x10c>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d113      	bne.n	80060f2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	695b      	ldr	r3, [r3, #20]
 80060de:	011b      	lsls	r3, r3, #4
 80060e0:	693a      	ldr	r2, [r7, #16]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	699b      	ldr	r3, [r3, #24]
 80060ea:	011b      	lsls	r3, r3, #4
 80060ec:	693a      	ldr	r2, [r7, #16]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	693a      	ldr	r2, [r7, #16]
 80060f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	68fa      	ldr	r2, [r7, #12]
 80060fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	685a      	ldr	r2, [r3, #4]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	697a      	ldr	r2, [r7, #20]
 800610a:	621a      	str	r2, [r3, #32]
}
 800610c:	bf00      	nop
 800610e:	371c      	adds	r7, #28
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr
 8006118:	40012c00 	.word	0x40012c00
 800611c:	40013400 	.word	0x40013400
 8006120:	40014000 	.word	0x40014000
 8006124:	40014400 	.word	0x40014400
 8006128:	40014800 	.word	0x40014800

0800612c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800612c:	b480      	push	{r7}
 800612e:	b087      	sub	sp, #28
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a1b      	ldr	r3, [r3, #32]
 800613a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a1b      	ldr	r3, [r3, #32]
 8006146:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	69db      	ldr	r3, [r3, #28]
 8006152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800615a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800615e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006166:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	021b      	lsls	r3, r3, #8
 800616e:	68fa      	ldr	r2, [r7, #12]
 8006170:	4313      	orrs	r3, r2
 8006172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800617a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	031b      	lsls	r3, r3, #12
 8006182:	693a      	ldr	r2, [r7, #16]
 8006184:	4313      	orrs	r3, r2
 8006186:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a18      	ldr	r2, [pc, #96]	; (80061ec <TIM_OC4_SetConfig+0xc0>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d00f      	beq.n	80061b0 <TIM_OC4_SetConfig+0x84>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a17      	ldr	r2, [pc, #92]	; (80061f0 <TIM_OC4_SetConfig+0xc4>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d00b      	beq.n	80061b0 <TIM_OC4_SetConfig+0x84>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4a16      	ldr	r2, [pc, #88]	; (80061f4 <TIM_OC4_SetConfig+0xc8>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d007      	beq.n	80061b0 <TIM_OC4_SetConfig+0x84>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4a15      	ldr	r2, [pc, #84]	; (80061f8 <TIM_OC4_SetConfig+0xcc>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d003      	beq.n	80061b0 <TIM_OC4_SetConfig+0x84>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a14      	ldr	r2, [pc, #80]	; (80061fc <TIM_OC4_SetConfig+0xd0>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d109      	bne.n	80061c4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	695b      	ldr	r3, [r3, #20]
 80061bc:	019b      	lsls	r3, r3, #6
 80061be:	697a      	ldr	r2, [r7, #20]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	697a      	ldr	r2, [r7, #20]
 80061c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	685a      	ldr	r2, [r3, #4]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	693a      	ldr	r2, [r7, #16]
 80061dc:	621a      	str	r2, [r3, #32]
}
 80061de:	bf00      	nop
 80061e0:	371c      	adds	r7, #28
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	40012c00 	.word	0x40012c00
 80061f0:	40013400 	.word	0x40013400
 80061f4:	40014000 	.word	0x40014000
 80061f8:	40014400 	.word	0x40014400
 80061fc:	40014800 	.word	0x40014800

08006200 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006200:	b480      	push	{r7}
 8006202:	b087      	sub	sp, #28
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a1b      	ldr	r3, [r3, #32]
 800620e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a1b      	ldr	r3, [r3, #32]
 800621a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800622e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006232:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	68fa      	ldr	r2, [r7, #12]
 800623a:	4313      	orrs	r3, r2
 800623c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006244:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	041b      	lsls	r3, r3, #16
 800624c:	693a      	ldr	r2, [r7, #16]
 800624e:	4313      	orrs	r3, r2
 8006250:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a17      	ldr	r2, [pc, #92]	; (80062b4 <TIM_OC5_SetConfig+0xb4>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d00f      	beq.n	800627a <TIM_OC5_SetConfig+0x7a>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a16      	ldr	r2, [pc, #88]	; (80062b8 <TIM_OC5_SetConfig+0xb8>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d00b      	beq.n	800627a <TIM_OC5_SetConfig+0x7a>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a15      	ldr	r2, [pc, #84]	; (80062bc <TIM_OC5_SetConfig+0xbc>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d007      	beq.n	800627a <TIM_OC5_SetConfig+0x7a>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a14      	ldr	r2, [pc, #80]	; (80062c0 <TIM_OC5_SetConfig+0xc0>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d003      	beq.n	800627a <TIM_OC5_SetConfig+0x7a>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a13      	ldr	r2, [pc, #76]	; (80062c4 <TIM_OC5_SetConfig+0xc4>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d109      	bne.n	800628e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006280:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	695b      	ldr	r3, [r3, #20]
 8006286:	021b      	lsls	r3, r3, #8
 8006288:	697a      	ldr	r2, [r7, #20]
 800628a:	4313      	orrs	r3, r2
 800628c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	697a      	ldr	r2, [r7, #20]
 8006292:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	685a      	ldr	r2, [r3, #4]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	693a      	ldr	r2, [r7, #16]
 80062a6:	621a      	str	r2, [r3, #32]
}
 80062a8:	bf00      	nop
 80062aa:	371c      	adds	r7, #28
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr
 80062b4:	40012c00 	.word	0x40012c00
 80062b8:	40013400 	.word	0x40013400
 80062bc:	40014000 	.word	0x40014000
 80062c0:	40014400 	.word	0x40014400
 80062c4:	40014800 	.word	0x40014800

080062c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b087      	sub	sp, #28
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a1b      	ldr	r3, [r3, #32]
 80062d6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a1b      	ldr	r3, [r3, #32]
 80062e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80062f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	021b      	lsls	r3, r3, #8
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	4313      	orrs	r3, r2
 8006306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800630e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	051b      	lsls	r3, r3, #20
 8006316:	693a      	ldr	r2, [r7, #16]
 8006318:	4313      	orrs	r3, r2
 800631a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4a18      	ldr	r2, [pc, #96]	; (8006380 <TIM_OC6_SetConfig+0xb8>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d00f      	beq.n	8006344 <TIM_OC6_SetConfig+0x7c>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	4a17      	ldr	r2, [pc, #92]	; (8006384 <TIM_OC6_SetConfig+0xbc>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d00b      	beq.n	8006344 <TIM_OC6_SetConfig+0x7c>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	4a16      	ldr	r2, [pc, #88]	; (8006388 <TIM_OC6_SetConfig+0xc0>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d007      	beq.n	8006344 <TIM_OC6_SetConfig+0x7c>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4a15      	ldr	r2, [pc, #84]	; (800638c <TIM_OC6_SetConfig+0xc4>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d003      	beq.n	8006344 <TIM_OC6_SetConfig+0x7c>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a14      	ldr	r2, [pc, #80]	; (8006390 <TIM_OC6_SetConfig+0xc8>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d109      	bne.n	8006358 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800634a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	695b      	ldr	r3, [r3, #20]
 8006350:	029b      	lsls	r3, r3, #10
 8006352:	697a      	ldr	r2, [r7, #20]
 8006354:	4313      	orrs	r3, r2
 8006356:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	697a      	ldr	r2, [r7, #20]
 800635c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	685a      	ldr	r2, [r3, #4]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	693a      	ldr	r2, [r7, #16]
 8006370:	621a      	str	r2, [r3, #32]
}
 8006372:	bf00      	nop
 8006374:	371c      	adds	r7, #28
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop
 8006380:	40012c00 	.word	0x40012c00
 8006384:	40013400 	.word	0x40013400
 8006388:	40014000 	.word	0x40014000
 800638c:	40014400 	.word	0x40014400
 8006390:	40014800 	.word	0x40014800

08006394 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006394:	b480      	push	{r7}
 8006396:	b087      	sub	sp, #28
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	f003 031f 	and.w	r3, r3, #31
 80063a6:	2201      	movs	r2, #1
 80063a8:	fa02 f303 	lsl.w	r3, r2, r3
 80063ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	6a1a      	ldr	r2, [r3, #32]
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	43db      	mvns	r3, r3
 80063b6:	401a      	ands	r2, r3
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6a1a      	ldr	r2, [r3, #32]
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	f003 031f 	and.w	r3, r3, #31
 80063c6:	6879      	ldr	r1, [r7, #4]
 80063c8:	fa01 f303 	lsl.w	r3, r1, r3
 80063cc:	431a      	orrs	r2, r3
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	621a      	str	r2, [r3, #32]
}
 80063d2:	bf00      	nop
 80063d4:	371c      	adds	r7, #28
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr
	...

080063e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b085      	sub	sp, #20
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d101      	bne.n	80063f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063f4:	2302      	movs	r3, #2
 80063f6:	e068      	b.n	80064ca <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2202      	movs	r2, #2
 8006404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a2e      	ldr	r2, [pc, #184]	; (80064d8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d004      	beq.n	800642c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a2d      	ldr	r2, [pc, #180]	; (80064dc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d108      	bne.n	800643e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006432:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	4313      	orrs	r3, r2
 800643c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006444:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	68fa      	ldr	r2, [r7, #12]
 800644c:	4313      	orrs	r3, r2
 800644e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a1e      	ldr	r2, [pc, #120]	; (80064d8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d01d      	beq.n	800649e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800646a:	d018      	beq.n	800649e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a1b      	ldr	r2, [pc, #108]	; (80064e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d013      	beq.n	800649e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a1a      	ldr	r2, [pc, #104]	; (80064e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d00e      	beq.n	800649e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a18      	ldr	r2, [pc, #96]	; (80064e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d009      	beq.n	800649e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a13      	ldr	r2, [pc, #76]	; (80064dc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d004      	beq.n	800649e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a14      	ldr	r2, [pc, #80]	; (80064ec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d10c      	bne.n	80064b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	68ba      	ldr	r2, [r7, #8]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68ba      	ldr	r2, [r7, #8]
 80064b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3714      	adds	r7, #20
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr
 80064d6:	bf00      	nop
 80064d8:	40012c00 	.word	0x40012c00
 80064dc:	40013400 	.word	0x40013400
 80064e0:	40000400 	.word	0x40000400
 80064e4:	40000800 	.word	0x40000800
 80064e8:	40000c00 	.word	0x40000c00
 80064ec:	40014000 	.word	0x40014000

080064f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064f8:	bf00      	nop
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800650c:	bf00      	nop
 800650e:	370c      	adds	r7, #12
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006518:	b480      	push	{r7}
 800651a:	b083      	sub	sp, #12
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006520:	bf00      	nop
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b082      	sub	sp, #8
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d101      	bne.n	800653e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	e040      	b.n	80065c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006542:	2b00      	cmp	r3, #0
 8006544:	d106      	bne.n	8006554 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f7fb fdde 	bl	8002110 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2224      	movs	r2, #36	; 0x24
 8006558:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f022 0201 	bic.w	r2, r2, #1
 8006568:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 f992 	bl	8006894 <UART_SetConfig>
 8006570:	4603      	mov	r3, r0
 8006572:	2b01      	cmp	r3, #1
 8006574:	d101      	bne.n	800657a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e022      	b.n	80065c0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657e:	2b00      	cmp	r3, #0
 8006580:	d002      	beq.n	8006588 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 fc3e 	bl	8006e04 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	685a      	ldr	r2, [r3, #4]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006596:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	689a      	ldr	r2, [r3, #8]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f042 0201 	orr.w	r2, r2, #1
 80065b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 fcc5 	bl	8006f48 <UART_CheckIdleState>
 80065be:	4603      	mov	r3, r0
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3708      	adds	r7, #8
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}

080065c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b08a      	sub	sp, #40	; 0x28
 80065cc:	af02      	add	r7, sp, #8
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	603b      	str	r3, [r7, #0]
 80065d4:	4613      	mov	r3, r2
 80065d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065dc:	2b20      	cmp	r3, #32
 80065de:	f040 8082 	bne.w	80066e6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d002      	beq.n	80065ee <HAL_UART_Transmit+0x26>
 80065e8:	88fb      	ldrh	r3, [r7, #6]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d101      	bne.n	80065f2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	e07a      	b.n	80066e8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d101      	bne.n	8006600 <HAL_UART_Transmit+0x38>
 80065fc:	2302      	movs	r3, #2
 80065fe:	e073      	b.n	80066e8 <HAL_UART_Transmit+0x120>
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2200      	movs	r2, #0
 800660c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2221      	movs	r2, #33	; 0x21
 8006614:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006616:	f7fb ff67 	bl	80024e8 <HAL_GetTick>
 800661a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	88fa      	ldrh	r2, [r7, #6]
 8006620:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	88fa      	ldrh	r2, [r7, #6]
 8006628:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006634:	d108      	bne.n	8006648 <HAL_UART_Transmit+0x80>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d104      	bne.n	8006648 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800663e:	2300      	movs	r3, #0
 8006640:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	61bb      	str	r3, [r7, #24]
 8006646:	e003      	b.n	8006650 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800664c:	2300      	movs	r3, #0
 800664e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2200      	movs	r2, #0
 8006654:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006658:	e02d      	b.n	80066b6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	9300      	str	r3, [sp, #0]
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	2200      	movs	r2, #0
 8006662:	2180      	movs	r1, #128	; 0x80
 8006664:	68f8      	ldr	r0, [r7, #12]
 8006666:	f000 fcb8 	bl	8006fda <UART_WaitOnFlagUntilTimeout>
 800666a:	4603      	mov	r3, r0
 800666c:	2b00      	cmp	r3, #0
 800666e:	d001      	beq.n	8006674 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006670:	2303      	movs	r3, #3
 8006672:	e039      	b.n	80066e8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006674:	69fb      	ldr	r3, [r7, #28]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d10b      	bne.n	8006692 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800667a:	69bb      	ldr	r3, [r7, #24]
 800667c:	881a      	ldrh	r2, [r3, #0]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006686:	b292      	uxth	r2, r2
 8006688:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	3302      	adds	r3, #2
 800668e:	61bb      	str	r3, [r7, #24]
 8006690:	e008      	b.n	80066a4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	781a      	ldrb	r2, [r3, #0]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	b292      	uxth	r2, r2
 800669c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	3301      	adds	r3, #1
 80066a2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	3b01      	subs	r3, #1
 80066ae:	b29a      	uxth	r2, r3
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80066bc:	b29b      	uxth	r3, r3
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d1cb      	bne.n	800665a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	9300      	str	r3, [sp, #0]
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	2200      	movs	r2, #0
 80066ca:	2140      	movs	r1, #64	; 0x40
 80066cc:	68f8      	ldr	r0, [r7, #12]
 80066ce:	f000 fc84 	bl	8006fda <UART_WaitOnFlagUntilTimeout>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d001      	beq.n	80066dc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80066d8:	2303      	movs	r3, #3
 80066da:	e005      	b.n	80066e8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2220      	movs	r2, #32
 80066e0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80066e2:	2300      	movs	r3, #0
 80066e4:	e000      	b.n	80066e8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80066e6:	2302      	movs	r3, #2
  }
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3720      	adds	r7, #32
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b08a      	sub	sp, #40	; 0x28
 80066f4:	af02      	add	r7, sp, #8
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	60b9      	str	r1, [r7, #8]
 80066fa:	603b      	str	r3, [r7, #0]
 80066fc:	4613      	mov	r3, r2
 80066fe:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006704:	2b20      	cmp	r3, #32
 8006706:	f040 80bf 	bne.w	8006888 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d002      	beq.n	8006716 <HAL_UART_Receive+0x26>
 8006710:	88fb      	ldrh	r3, [r7, #6]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d101      	bne.n	800671a <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	e0b7      	b.n	800688a <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006720:	2b01      	cmp	r3, #1
 8006722:	d101      	bne.n	8006728 <HAL_UART_Receive+0x38>
 8006724:	2302      	movs	r3, #2
 8006726:	e0b0      	b.n	800688a <HAL_UART_Receive+0x19a>
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2200      	movs	r2, #0
 8006734:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2222      	movs	r2, #34	; 0x22
 800673c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2200      	movs	r2, #0
 8006742:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006744:	f7fb fed0 	bl	80024e8 <HAL_GetTick>
 8006748:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	88fa      	ldrh	r2, [r7, #6]
 800674e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	88fa      	ldrh	r2, [r7, #6]
 8006756:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006762:	d10e      	bne.n	8006782 <HAL_UART_Receive+0x92>
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	691b      	ldr	r3, [r3, #16]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d105      	bne.n	8006778 <HAL_UART_Receive+0x88>
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006772:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006776:	e02d      	b.n	80067d4 <HAL_UART_Receive+0xe4>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	22ff      	movs	r2, #255	; 0xff
 800677c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006780:	e028      	b.n	80067d4 <HAL_UART_Receive+0xe4>
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d10d      	bne.n	80067a6 <HAL_UART_Receive+0xb6>
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d104      	bne.n	800679c <HAL_UART_Receive+0xac>
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	22ff      	movs	r2, #255	; 0xff
 8006796:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800679a:	e01b      	b.n	80067d4 <HAL_UART_Receive+0xe4>
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	227f      	movs	r2, #127	; 0x7f
 80067a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80067a4:	e016      	b.n	80067d4 <HAL_UART_Receive+0xe4>
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067ae:	d10d      	bne.n	80067cc <HAL_UART_Receive+0xdc>
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	691b      	ldr	r3, [r3, #16]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d104      	bne.n	80067c2 <HAL_UART_Receive+0xd2>
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	227f      	movs	r2, #127	; 0x7f
 80067bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80067c0:	e008      	b.n	80067d4 <HAL_UART_Receive+0xe4>
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	223f      	movs	r2, #63	; 0x3f
 80067c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80067ca:	e003      	b.n	80067d4 <HAL_UART_Receive+0xe4>
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2200      	movs	r2, #0
 80067d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80067da:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067e4:	d108      	bne.n	80067f8 <HAL_UART_Receive+0x108>
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d104      	bne.n	80067f8 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80067ee:	2300      	movs	r3, #0
 80067f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	61bb      	str	r3, [r7, #24]
 80067f6:	e003      	b.n	8006800 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80067fc:	2300      	movs	r3, #0
 80067fe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2200      	movs	r2, #0
 8006804:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006808:	e033      	b.n	8006872 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	9300      	str	r3, [sp, #0]
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	2200      	movs	r2, #0
 8006812:	2120      	movs	r1, #32
 8006814:	68f8      	ldr	r0, [r7, #12]
 8006816:	f000 fbe0 	bl	8006fda <UART_WaitOnFlagUntilTimeout>
 800681a:	4603      	mov	r3, r0
 800681c:	2b00      	cmp	r3, #0
 800681e:	d001      	beq.n	8006824 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8006820:	2303      	movs	r3, #3
 8006822:	e032      	b.n	800688a <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d10c      	bne.n	8006844 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006830:	b29a      	uxth	r2, r3
 8006832:	8a7b      	ldrh	r3, [r7, #18]
 8006834:	4013      	ands	r3, r2
 8006836:	b29a      	uxth	r2, r3
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	3302      	adds	r3, #2
 8006840:	61bb      	str	r3, [r7, #24]
 8006842:	e00d      	b.n	8006860 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800684a:	b29b      	uxth	r3, r3
 800684c:	b2da      	uxtb	r2, r3
 800684e:	8a7b      	ldrh	r3, [r7, #18]
 8006850:	b2db      	uxtb	r3, r3
 8006852:	4013      	ands	r3, r2
 8006854:	b2da      	uxtb	r2, r3
 8006856:	69fb      	ldr	r3, [r7, #28]
 8006858:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	3301      	adds	r3, #1
 800685e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006866:	b29b      	uxth	r3, r3
 8006868:	3b01      	subs	r3, #1
 800686a:	b29a      	uxth	r2, r3
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006878:	b29b      	uxth	r3, r3
 800687a:	2b00      	cmp	r3, #0
 800687c:	d1c5      	bne.n	800680a <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2220      	movs	r2, #32
 8006882:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006884:	2300      	movs	r3, #0
 8006886:	e000      	b.n	800688a <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8006888:	2302      	movs	r3, #2
  }
}
 800688a:	4618      	mov	r0, r3
 800688c:	3720      	adds	r7, #32
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
	...

08006894 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006894:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006898:	b08a      	sub	sp, #40	; 0x28
 800689a:	af00      	add	r7, sp, #0
 800689c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800689e:	2300      	movs	r3, #0
 80068a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	689a      	ldr	r2, [r3, #8]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	691b      	ldr	r3, [r3, #16]
 80068ac:	431a      	orrs	r2, r3
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	695b      	ldr	r3, [r3, #20]
 80068b2:	431a      	orrs	r2, r3
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	69db      	ldr	r3, [r3, #28]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	4ba4      	ldr	r3, [pc, #656]	; (8006b54 <UART_SetConfig+0x2c0>)
 80068c4:	4013      	ands	r3, r2
 80068c6:	68fa      	ldr	r2, [r7, #12]
 80068c8:	6812      	ldr	r2, [r2, #0]
 80068ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80068cc:	430b      	orrs	r3, r1
 80068ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	68da      	ldr	r2, [r3, #12]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	430a      	orrs	r2, r1
 80068e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	699b      	ldr	r3, [r3, #24]
 80068ea:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a99      	ldr	r2, [pc, #612]	; (8006b58 <UART_SetConfig+0x2c4>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d004      	beq.n	8006900 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	6a1b      	ldr	r3, [r3, #32]
 80068fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068fc:	4313      	orrs	r3, r2
 80068fe:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006910:	430a      	orrs	r2, r1
 8006912:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a90      	ldr	r2, [pc, #576]	; (8006b5c <UART_SetConfig+0x2c8>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d126      	bne.n	800696c <UART_SetConfig+0xd8>
 800691e:	4b90      	ldr	r3, [pc, #576]	; (8006b60 <UART_SetConfig+0x2cc>)
 8006920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006924:	f003 0303 	and.w	r3, r3, #3
 8006928:	2b03      	cmp	r3, #3
 800692a:	d81b      	bhi.n	8006964 <UART_SetConfig+0xd0>
 800692c:	a201      	add	r2, pc, #4	; (adr r2, 8006934 <UART_SetConfig+0xa0>)
 800692e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006932:	bf00      	nop
 8006934:	08006945 	.word	0x08006945
 8006938:	08006955 	.word	0x08006955
 800693c:	0800694d 	.word	0x0800694d
 8006940:	0800695d 	.word	0x0800695d
 8006944:	2301      	movs	r3, #1
 8006946:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800694a:	e116      	b.n	8006b7a <UART_SetConfig+0x2e6>
 800694c:	2302      	movs	r3, #2
 800694e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006952:	e112      	b.n	8006b7a <UART_SetConfig+0x2e6>
 8006954:	2304      	movs	r3, #4
 8006956:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800695a:	e10e      	b.n	8006b7a <UART_SetConfig+0x2e6>
 800695c:	2308      	movs	r3, #8
 800695e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006962:	e10a      	b.n	8006b7a <UART_SetConfig+0x2e6>
 8006964:	2310      	movs	r3, #16
 8006966:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800696a:	e106      	b.n	8006b7a <UART_SetConfig+0x2e6>
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a7c      	ldr	r2, [pc, #496]	; (8006b64 <UART_SetConfig+0x2d0>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d138      	bne.n	80069e8 <UART_SetConfig+0x154>
 8006976:	4b7a      	ldr	r3, [pc, #488]	; (8006b60 <UART_SetConfig+0x2cc>)
 8006978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800697c:	f003 030c 	and.w	r3, r3, #12
 8006980:	2b0c      	cmp	r3, #12
 8006982:	d82d      	bhi.n	80069e0 <UART_SetConfig+0x14c>
 8006984:	a201      	add	r2, pc, #4	; (adr r2, 800698c <UART_SetConfig+0xf8>)
 8006986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800698a:	bf00      	nop
 800698c:	080069c1 	.word	0x080069c1
 8006990:	080069e1 	.word	0x080069e1
 8006994:	080069e1 	.word	0x080069e1
 8006998:	080069e1 	.word	0x080069e1
 800699c:	080069d1 	.word	0x080069d1
 80069a0:	080069e1 	.word	0x080069e1
 80069a4:	080069e1 	.word	0x080069e1
 80069a8:	080069e1 	.word	0x080069e1
 80069ac:	080069c9 	.word	0x080069c9
 80069b0:	080069e1 	.word	0x080069e1
 80069b4:	080069e1 	.word	0x080069e1
 80069b8:	080069e1 	.word	0x080069e1
 80069bc:	080069d9 	.word	0x080069d9
 80069c0:	2300      	movs	r3, #0
 80069c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069c6:	e0d8      	b.n	8006b7a <UART_SetConfig+0x2e6>
 80069c8:	2302      	movs	r3, #2
 80069ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069ce:	e0d4      	b.n	8006b7a <UART_SetConfig+0x2e6>
 80069d0:	2304      	movs	r3, #4
 80069d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069d6:	e0d0      	b.n	8006b7a <UART_SetConfig+0x2e6>
 80069d8:	2308      	movs	r3, #8
 80069da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069de:	e0cc      	b.n	8006b7a <UART_SetConfig+0x2e6>
 80069e0:	2310      	movs	r3, #16
 80069e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069e6:	e0c8      	b.n	8006b7a <UART_SetConfig+0x2e6>
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a5e      	ldr	r2, [pc, #376]	; (8006b68 <UART_SetConfig+0x2d4>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d125      	bne.n	8006a3e <UART_SetConfig+0x1aa>
 80069f2:	4b5b      	ldr	r3, [pc, #364]	; (8006b60 <UART_SetConfig+0x2cc>)
 80069f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069f8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80069fc:	2b30      	cmp	r3, #48	; 0x30
 80069fe:	d016      	beq.n	8006a2e <UART_SetConfig+0x19a>
 8006a00:	2b30      	cmp	r3, #48	; 0x30
 8006a02:	d818      	bhi.n	8006a36 <UART_SetConfig+0x1a2>
 8006a04:	2b20      	cmp	r3, #32
 8006a06:	d00a      	beq.n	8006a1e <UART_SetConfig+0x18a>
 8006a08:	2b20      	cmp	r3, #32
 8006a0a:	d814      	bhi.n	8006a36 <UART_SetConfig+0x1a2>
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d002      	beq.n	8006a16 <UART_SetConfig+0x182>
 8006a10:	2b10      	cmp	r3, #16
 8006a12:	d008      	beq.n	8006a26 <UART_SetConfig+0x192>
 8006a14:	e00f      	b.n	8006a36 <UART_SetConfig+0x1a2>
 8006a16:	2300      	movs	r3, #0
 8006a18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a1c:	e0ad      	b.n	8006b7a <UART_SetConfig+0x2e6>
 8006a1e:	2302      	movs	r3, #2
 8006a20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a24:	e0a9      	b.n	8006b7a <UART_SetConfig+0x2e6>
 8006a26:	2304      	movs	r3, #4
 8006a28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a2c:	e0a5      	b.n	8006b7a <UART_SetConfig+0x2e6>
 8006a2e:	2308      	movs	r3, #8
 8006a30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a34:	e0a1      	b.n	8006b7a <UART_SetConfig+0x2e6>
 8006a36:	2310      	movs	r3, #16
 8006a38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a3c:	e09d      	b.n	8006b7a <UART_SetConfig+0x2e6>
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a4a      	ldr	r2, [pc, #296]	; (8006b6c <UART_SetConfig+0x2d8>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d125      	bne.n	8006a94 <UART_SetConfig+0x200>
 8006a48:	4b45      	ldr	r3, [pc, #276]	; (8006b60 <UART_SetConfig+0x2cc>)
 8006a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a4e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006a52:	2bc0      	cmp	r3, #192	; 0xc0
 8006a54:	d016      	beq.n	8006a84 <UART_SetConfig+0x1f0>
 8006a56:	2bc0      	cmp	r3, #192	; 0xc0
 8006a58:	d818      	bhi.n	8006a8c <UART_SetConfig+0x1f8>
 8006a5a:	2b80      	cmp	r3, #128	; 0x80
 8006a5c:	d00a      	beq.n	8006a74 <UART_SetConfig+0x1e0>
 8006a5e:	2b80      	cmp	r3, #128	; 0x80
 8006a60:	d814      	bhi.n	8006a8c <UART_SetConfig+0x1f8>
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d002      	beq.n	8006a6c <UART_SetConfig+0x1d8>
 8006a66:	2b40      	cmp	r3, #64	; 0x40
 8006a68:	d008      	beq.n	8006a7c <UART_SetConfig+0x1e8>
 8006a6a:	e00f      	b.n	8006a8c <UART_SetConfig+0x1f8>
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a72:	e082      	b.n	8006b7a <UART_SetConfig+0x2e6>
 8006a74:	2302      	movs	r3, #2
 8006a76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a7a:	e07e      	b.n	8006b7a <UART_SetConfig+0x2e6>
 8006a7c:	2304      	movs	r3, #4
 8006a7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a82:	e07a      	b.n	8006b7a <UART_SetConfig+0x2e6>
 8006a84:	2308      	movs	r3, #8
 8006a86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a8a:	e076      	b.n	8006b7a <UART_SetConfig+0x2e6>
 8006a8c:	2310      	movs	r3, #16
 8006a8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a92:	e072      	b.n	8006b7a <UART_SetConfig+0x2e6>
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a35      	ldr	r2, [pc, #212]	; (8006b70 <UART_SetConfig+0x2dc>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d12a      	bne.n	8006af4 <UART_SetConfig+0x260>
 8006a9e:	4b30      	ldr	r3, [pc, #192]	; (8006b60 <UART_SetConfig+0x2cc>)
 8006aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aa4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006aa8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006aac:	d01a      	beq.n	8006ae4 <UART_SetConfig+0x250>
 8006aae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ab2:	d81b      	bhi.n	8006aec <UART_SetConfig+0x258>
 8006ab4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ab8:	d00c      	beq.n	8006ad4 <UART_SetConfig+0x240>
 8006aba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006abe:	d815      	bhi.n	8006aec <UART_SetConfig+0x258>
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d003      	beq.n	8006acc <UART_SetConfig+0x238>
 8006ac4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ac8:	d008      	beq.n	8006adc <UART_SetConfig+0x248>
 8006aca:	e00f      	b.n	8006aec <UART_SetConfig+0x258>
 8006acc:	2300      	movs	r3, #0
 8006ace:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ad2:	e052      	b.n	8006b7a <UART_SetConfig+0x2e6>
 8006ad4:	2302      	movs	r3, #2
 8006ad6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ada:	e04e      	b.n	8006b7a <UART_SetConfig+0x2e6>
 8006adc:	2304      	movs	r3, #4
 8006ade:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ae2:	e04a      	b.n	8006b7a <UART_SetConfig+0x2e6>
 8006ae4:	2308      	movs	r3, #8
 8006ae6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006aea:	e046      	b.n	8006b7a <UART_SetConfig+0x2e6>
 8006aec:	2310      	movs	r3, #16
 8006aee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006af2:	e042      	b.n	8006b7a <UART_SetConfig+0x2e6>
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a17      	ldr	r2, [pc, #92]	; (8006b58 <UART_SetConfig+0x2c4>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d13a      	bne.n	8006b74 <UART_SetConfig+0x2e0>
 8006afe:	4b18      	ldr	r3, [pc, #96]	; (8006b60 <UART_SetConfig+0x2cc>)
 8006b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b04:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006b08:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b0c:	d01a      	beq.n	8006b44 <UART_SetConfig+0x2b0>
 8006b0e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b12:	d81b      	bhi.n	8006b4c <UART_SetConfig+0x2b8>
 8006b14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b18:	d00c      	beq.n	8006b34 <UART_SetConfig+0x2a0>
 8006b1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b1e:	d815      	bhi.n	8006b4c <UART_SetConfig+0x2b8>
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d003      	beq.n	8006b2c <UART_SetConfig+0x298>
 8006b24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b28:	d008      	beq.n	8006b3c <UART_SetConfig+0x2a8>
 8006b2a:	e00f      	b.n	8006b4c <UART_SetConfig+0x2b8>
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b32:	e022      	b.n	8006b7a <UART_SetConfig+0x2e6>
 8006b34:	2302      	movs	r3, #2
 8006b36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b3a:	e01e      	b.n	8006b7a <UART_SetConfig+0x2e6>
 8006b3c:	2304      	movs	r3, #4
 8006b3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b42:	e01a      	b.n	8006b7a <UART_SetConfig+0x2e6>
 8006b44:	2308      	movs	r3, #8
 8006b46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b4a:	e016      	b.n	8006b7a <UART_SetConfig+0x2e6>
 8006b4c:	2310      	movs	r3, #16
 8006b4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b52:	e012      	b.n	8006b7a <UART_SetConfig+0x2e6>
 8006b54:	efff69f3 	.word	0xefff69f3
 8006b58:	40008000 	.word	0x40008000
 8006b5c:	40013800 	.word	0x40013800
 8006b60:	40021000 	.word	0x40021000
 8006b64:	40004400 	.word	0x40004400
 8006b68:	40004800 	.word	0x40004800
 8006b6c:	40004c00 	.word	0x40004c00
 8006b70:	40005000 	.word	0x40005000
 8006b74:	2310      	movs	r3, #16
 8006b76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a9f      	ldr	r2, [pc, #636]	; (8006dfc <UART_SetConfig+0x568>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d17a      	bne.n	8006c7a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006b84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b88:	2b08      	cmp	r3, #8
 8006b8a:	d824      	bhi.n	8006bd6 <UART_SetConfig+0x342>
 8006b8c:	a201      	add	r2, pc, #4	; (adr r2, 8006b94 <UART_SetConfig+0x300>)
 8006b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b92:	bf00      	nop
 8006b94:	08006bb9 	.word	0x08006bb9
 8006b98:	08006bd7 	.word	0x08006bd7
 8006b9c:	08006bc1 	.word	0x08006bc1
 8006ba0:	08006bd7 	.word	0x08006bd7
 8006ba4:	08006bc7 	.word	0x08006bc7
 8006ba8:	08006bd7 	.word	0x08006bd7
 8006bac:	08006bd7 	.word	0x08006bd7
 8006bb0:	08006bd7 	.word	0x08006bd7
 8006bb4:	08006bcf 	.word	0x08006bcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bb8:	f7fd fde0 	bl	800477c <HAL_RCC_GetPCLK1Freq>
 8006bbc:	61f8      	str	r0, [r7, #28]
        break;
 8006bbe:	e010      	b.n	8006be2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bc0:	4b8f      	ldr	r3, [pc, #572]	; (8006e00 <UART_SetConfig+0x56c>)
 8006bc2:	61fb      	str	r3, [r7, #28]
        break;
 8006bc4:	e00d      	b.n	8006be2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bc6:	f7fd fd41 	bl	800464c <HAL_RCC_GetSysClockFreq>
 8006bca:	61f8      	str	r0, [r7, #28]
        break;
 8006bcc:	e009      	b.n	8006be2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bd2:	61fb      	str	r3, [r7, #28]
        break;
 8006bd4:	e005      	b.n	8006be2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006be0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	f000 80fb 	beq.w	8006de0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	685a      	ldr	r2, [r3, #4]
 8006bee:	4613      	mov	r3, r2
 8006bf0:	005b      	lsls	r3, r3, #1
 8006bf2:	4413      	add	r3, r2
 8006bf4:	69fa      	ldr	r2, [r7, #28]
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d305      	bcc.n	8006c06 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006c00:	69fa      	ldr	r2, [r7, #28]
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d903      	bls.n	8006c0e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006c0c:	e0e8      	b.n	8006de0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006c0e:	69fb      	ldr	r3, [r7, #28]
 8006c10:	2200      	movs	r2, #0
 8006c12:	461c      	mov	r4, r3
 8006c14:	4615      	mov	r5, r2
 8006c16:	f04f 0200 	mov.w	r2, #0
 8006c1a:	f04f 0300 	mov.w	r3, #0
 8006c1e:	022b      	lsls	r3, r5, #8
 8006c20:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006c24:	0222      	lsls	r2, r4, #8
 8006c26:	68f9      	ldr	r1, [r7, #12]
 8006c28:	6849      	ldr	r1, [r1, #4]
 8006c2a:	0849      	lsrs	r1, r1, #1
 8006c2c:	2000      	movs	r0, #0
 8006c2e:	4688      	mov	r8, r1
 8006c30:	4681      	mov	r9, r0
 8006c32:	eb12 0a08 	adds.w	sl, r2, r8
 8006c36:	eb43 0b09 	adc.w	fp, r3, r9
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	603b      	str	r3, [r7, #0]
 8006c42:	607a      	str	r2, [r7, #4]
 8006c44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c48:	4650      	mov	r0, sl
 8006c4a:	4659      	mov	r1, fp
 8006c4c:	f7f9 fb28 	bl	80002a0 <__aeabi_uldivmod>
 8006c50:	4602      	mov	r2, r0
 8006c52:	460b      	mov	r3, r1
 8006c54:	4613      	mov	r3, r2
 8006c56:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006c58:	69bb      	ldr	r3, [r7, #24]
 8006c5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c5e:	d308      	bcc.n	8006c72 <UART_SetConfig+0x3de>
 8006c60:	69bb      	ldr	r3, [r7, #24]
 8006c62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c66:	d204      	bcs.n	8006c72 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	69ba      	ldr	r2, [r7, #24]
 8006c6e:	60da      	str	r2, [r3, #12]
 8006c70:	e0b6      	b.n	8006de0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006c78:	e0b2      	b.n	8006de0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	69db      	ldr	r3, [r3, #28]
 8006c7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c82:	d15e      	bne.n	8006d42 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006c84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c88:	2b08      	cmp	r3, #8
 8006c8a:	d828      	bhi.n	8006cde <UART_SetConfig+0x44a>
 8006c8c:	a201      	add	r2, pc, #4	; (adr r2, 8006c94 <UART_SetConfig+0x400>)
 8006c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c92:	bf00      	nop
 8006c94:	08006cb9 	.word	0x08006cb9
 8006c98:	08006cc1 	.word	0x08006cc1
 8006c9c:	08006cc9 	.word	0x08006cc9
 8006ca0:	08006cdf 	.word	0x08006cdf
 8006ca4:	08006ccf 	.word	0x08006ccf
 8006ca8:	08006cdf 	.word	0x08006cdf
 8006cac:	08006cdf 	.word	0x08006cdf
 8006cb0:	08006cdf 	.word	0x08006cdf
 8006cb4:	08006cd7 	.word	0x08006cd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cb8:	f7fd fd60 	bl	800477c <HAL_RCC_GetPCLK1Freq>
 8006cbc:	61f8      	str	r0, [r7, #28]
        break;
 8006cbe:	e014      	b.n	8006cea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cc0:	f7fd fd72 	bl	80047a8 <HAL_RCC_GetPCLK2Freq>
 8006cc4:	61f8      	str	r0, [r7, #28]
        break;
 8006cc6:	e010      	b.n	8006cea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cc8:	4b4d      	ldr	r3, [pc, #308]	; (8006e00 <UART_SetConfig+0x56c>)
 8006cca:	61fb      	str	r3, [r7, #28]
        break;
 8006ccc:	e00d      	b.n	8006cea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cce:	f7fd fcbd 	bl	800464c <HAL_RCC_GetSysClockFreq>
 8006cd2:	61f8      	str	r0, [r7, #28]
        break;
 8006cd4:	e009      	b.n	8006cea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cda:	61fb      	str	r3, [r7, #28]
        break;
 8006cdc:	e005      	b.n	8006cea <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006ce8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d077      	beq.n	8006de0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006cf0:	69fb      	ldr	r3, [r7, #28]
 8006cf2:	005a      	lsls	r2, r3, #1
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	085b      	lsrs	r3, r3, #1
 8006cfa:	441a      	add	r2, r3
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d04:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d06:	69bb      	ldr	r3, [r7, #24]
 8006d08:	2b0f      	cmp	r3, #15
 8006d0a:	d916      	bls.n	8006d3a <UART_SetConfig+0x4a6>
 8006d0c:	69bb      	ldr	r3, [r7, #24]
 8006d0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d12:	d212      	bcs.n	8006d3a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d14:	69bb      	ldr	r3, [r7, #24]
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	f023 030f 	bic.w	r3, r3, #15
 8006d1c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	085b      	lsrs	r3, r3, #1
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	f003 0307 	and.w	r3, r3, #7
 8006d28:	b29a      	uxth	r2, r3
 8006d2a:	8afb      	ldrh	r3, [r7, #22]
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	8afa      	ldrh	r2, [r7, #22]
 8006d36:	60da      	str	r2, [r3, #12]
 8006d38:	e052      	b.n	8006de0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006d40:	e04e      	b.n	8006de0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d46:	2b08      	cmp	r3, #8
 8006d48:	d827      	bhi.n	8006d9a <UART_SetConfig+0x506>
 8006d4a:	a201      	add	r2, pc, #4	; (adr r2, 8006d50 <UART_SetConfig+0x4bc>)
 8006d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d50:	08006d75 	.word	0x08006d75
 8006d54:	08006d7d 	.word	0x08006d7d
 8006d58:	08006d85 	.word	0x08006d85
 8006d5c:	08006d9b 	.word	0x08006d9b
 8006d60:	08006d8b 	.word	0x08006d8b
 8006d64:	08006d9b 	.word	0x08006d9b
 8006d68:	08006d9b 	.word	0x08006d9b
 8006d6c:	08006d9b 	.word	0x08006d9b
 8006d70:	08006d93 	.word	0x08006d93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d74:	f7fd fd02 	bl	800477c <HAL_RCC_GetPCLK1Freq>
 8006d78:	61f8      	str	r0, [r7, #28]
        break;
 8006d7a:	e014      	b.n	8006da6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d7c:	f7fd fd14 	bl	80047a8 <HAL_RCC_GetPCLK2Freq>
 8006d80:	61f8      	str	r0, [r7, #28]
        break;
 8006d82:	e010      	b.n	8006da6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d84:	4b1e      	ldr	r3, [pc, #120]	; (8006e00 <UART_SetConfig+0x56c>)
 8006d86:	61fb      	str	r3, [r7, #28]
        break;
 8006d88:	e00d      	b.n	8006da6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d8a:	f7fd fc5f 	bl	800464c <HAL_RCC_GetSysClockFreq>
 8006d8e:	61f8      	str	r0, [r7, #28]
        break;
 8006d90:	e009      	b.n	8006da6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d96:	61fb      	str	r3, [r7, #28]
        break;
 8006d98:	e005      	b.n	8006da6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006da4:	bf00      	nop
    }

    if (pclk != 0U)
 8006da6:	69fb      	ldr	r3, [r7, #28]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d019      	beq.n	8006de0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	085a      	lsrs	r2, r3, #1
 8006db2:	69fb      	ldr	r3, [r7, #28]
 8006db4:	441a      	add	r2, r3
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dbe:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006dc0:	69bb      	ldr	r3, [r7, #24]
 8006dc2:	2b0f      	cmp	r3, #15
 8006dc4:	d909      	bls.n	8006dda <UART_SetConfig+0x546>
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dcc:	d205      	bcs.n	8006dda <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006dce:	69bb      	ldr	r3, [r7, #24]
 8006dd0:	b29a      	uxth	r2, r3
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	60da      	str	r2, [r3, #12]
 8006dd8:	e002      	b.n	8006de0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2200      	movs	r2, #0
 8006de4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2200      	movs	r2, #0
 8006dea:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006dec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3728      	adds	r7, #40	; 0x28
 8006df4:	46bd      	mov	sp, r7
 8006df6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006dfa:	bf00      	nop
 8006dfc:	40008000 	.word	0x40008000
 8006e00:	00f42400 	.word	0x00f42400

08006e04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e10:	f003 0301 	and.w	r3, r3, #1
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d00a      	beq.n	8006e2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	430a      	orrs	r2, r1
 8006e2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e32:	f003 0302 	and.w	r3, r3, #2
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d00a      	beq.n	8006e50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	430a      	orrs	r2, r1
 8006e4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e54:	f003 0304 	and.w	r3, r3, #4
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d00a      	beq.n	8006e72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	430a      	orrs	r2, r1
 8006e70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e76:	f003 0308 	and.w	r3, r3, #8
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d00a      	beq.n	8006e94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	430a      	orrs	r2, r1
 8006e92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e98:	f003 0310 	and.w	r3, r3, #16
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d00a      	beq.n	8006eb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	430a      	orrs	r2, r1
 8006eb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eba:	f003 0320 	and.w	r3, r3, #32
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d00a      	beq.n	8006ed8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	430a      	orrs	r2, r1
 8006ed6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d01a      	beq.n	8006f1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	430a      	orrs	r2, r1
 8006ef8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006efe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f02:	d10a      	bne.n	8006f1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	430a      	orrs	r2, r1
 8006f18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d00a      	beq.n	8006f3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	430a      	orrs	r2, r1
 8006f3a:	605a      	str	r2, [r3, #4]
  }
}
 8006f3c:	bf00      	nop
 8006f3e:	370c      	adds	r7, #12
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b086      	sub	sp, #24
 8006f4c:	af02      	add	r7, sp, #8
 8006f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f58:	f7fb fac6 	bl	80024e8 <HAL_GetTick>
 8006f5c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f003 0308 	and.w	r3, r3, #8
 8006f68:	2b08      	cmp	r3, #8
 8006f6a:	d10e      	bne.n	8006f8a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f70:	9300      	str	r3, [sp, #0]
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2200      	movs	r2, #0
 8006f76:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 f82d 	bl	8006fda <UART_WaitOnFlagUntilTimeout>
 8006f80:	4603      	mov	r3, r0
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d001      	beq.n	8006f8a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f86:	2303      	movs	r3, #3
 8006f88:	e023      	b.n	8006fd2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f003 0304 	and.w	r3, r3, #4
 8006f94:	2b04      	cmp	r3, #4
 8006f96:	d10e      	bne.n	8006fb6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f9c:	9300      	str	r3, [sp, #0]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 f817 	bl	8006fda <UART_WaitOnFlagUntilTimeout>
 8006fac:	4603      	mov	r3, r0
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d001      	beq.n	8006fb6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fb2:	2303      	movs	r3, #3
 8006fb4:	e00d      	b.n	8006fd2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2220      	movs	r2, #32
 8006fba:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2220      	movs	r2, #32
 8006fc0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006fd0:	2300      	movs	r3, #0
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3710      	adds	r7, #16
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}

08006fda <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006fda:	b580      	push	{r7, lr}
 8006fdc:	b09c      	sub	sp, #112	; 0x70
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	60f8      	str	r0, [r7, #12]
 8006fe2:	60b9      	str	r1, [r7, #8]
 8006fe4:	603b      	str	r3, [r7, #0]
 8006fe6:	4613      	mov	r3, r2
 8006fe8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fea:	e0a5      	b.n	8007138 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ff2:	f000 80a1 	beq.w	8007138 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ff6:	f7fb fa77 	bl	80024e8 <HAL_GetTick>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	1ad3      	subs	r3, r2, r3
 8007000:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007002:	429a      	cmp	r2, r3
 8007004:	d302      	bcc.n	800700c <UART_WaitOnFlagUntilTimeout+0x32>
 8007006:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007008:	2b00      	cmp	r3, #0
 800700a:	d13e      	bne.n	800708a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007012:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007014:	e853 3f00 	ldrex	r3, [r3]
 8007018:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800701a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800701c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007020:	667b      	str	r3, [r7, #100]	; 0x64
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	461a      	mov	r2, r3
 8007028:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800702a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800702c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800702e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007030:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007032:	e841 2300 	strex	r3, r2, [r1]
 8007036:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007038:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800703a:	2b00      	cmp	r3, #0
 800703c:	d1e6      	bne.n	800700c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	3308      	adds	r3, #8
 8007044:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007048:	e853 3f00 	ldrex	r3, [r3]
 800704c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800704e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007050:	f023 0301 	bic.w	r3, r3, #1
 8007054:	663b      	str	r3, [r7, #96]	; 0x60
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	3308      	adds	r3, #8
 800705c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800705e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007060:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007062:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007064:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007066:	e841 2300 	strex	r3, r2, [r1]
 800706a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800706c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800706e:	2b00      	cmp	r3, #0
 8007070:	d1e5      	bne.n	800703e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2220      	movs	r2, #32
 8007076:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2220      	movs	r2, #32
 800707c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2200      	movs	r2, #0
 8007082:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007086:	2303      	movs	r3, #3
 8007088:	e067      	b.n	800715a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f003 0304 	and.w	r3, r3, #4
 8007094:	2b00      	cmp	r3, #0
 8007096:	d04f      	beq.n	8007138 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	69db      	ldr	r3, [r3, #28]
 800709e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070a6:	d147      	bne.n	8007138 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070b0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ba:	e853 3f00 	ldrex	r3, [r3]
 80070be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80070c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	461a      	mov	r2, r3
 80070ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070d0:	637b      	str	r3, [r7, #52]	; 0x34
 80070d2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80070d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070d8:	e841 2300 	strex	r3, r2, [r1]
 80070dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80070de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d1e6      	bne.n	80070b2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	3308      	adds	r3, #8
 80070ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	e853 3f00 	ldrex	r3, [r3]
 80070f2:	613b      	str	r3, [r7, #16]
   return(result);
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	f023 0301 	bic.w	r3, r3, #1
 80070fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	3308      	adds	r3, #8
 8007102:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007104:	623a      	str	r2, [r7, #32]
 8007106:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007108:	69f9      	ldr	r1, [r7, #28]
 800710a:	6a3a      	ldr	r2, [r7, #32]
 800710c:	e841 2300 	strex	r3, r2, [r1]
 8007110:	61bb      	str	r3, [r7, #24]
   return(result);
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d1e5      	bne.n	80070e4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2220      	movs	r2, #32
 800711c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2220      	movs	r2, #32
 8007122:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2220      	movs	r2, #32
 8007128:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2200      	movs	r2, #0
 8007130:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007134:	2303      	movs	r3, #3
 8007136:	e010      	b.n	800715a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	69da      	ldr	r2, [r3, #28]
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	4013      	ands	r3, r2
 8007142:	68ba      	ldr	r2, [r7, #8]
 8007144:	429a      	cmp	r2, r3
 8007146:	bf0c      	ite	eq
 8007148:	2301      	moveq	r3, #1
 800714a:	2300      	movne	r3, #0
 800714c:	b2db      	uxtb	r3, r3
 800714e:	461a      	mov	r2, r3
 8007150:	79fb      	ldrb	r3, [r7, #7]
 8007152:	429a      	cmp	r2, r3
 8007154:	f43f af4a 	beq.w	8006fec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007158:	2300      	movs	r3, #0
}
 800715a:	4618      	mov	r0, r3
 800715c:	3770      	adds	r7, #112	; 0x70
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}
	...

08007164 <__NVIC_SetPriority>:
{
 8007164:	b480      	push	{r7}
 8007166:	b083      	sub	sp, #12
 8007168:	af00      	add	r7, sp, #0
 800716a:	4603      	mov	r3, r0
 800716c:	6039      	str	r1, [r7, #0]
 800716e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007174:	2b00      	cmp	r3, #0
 8007176:	db0a      	blt.n	800718e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	b2da      	uxtb	r2, r3
 800717c:	490c      	ldr	r1, [pc, #48]	; (80071b0 <__NVIC_SetPriority+0x4c>)
 800717e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007182:	0112      	lsls	r2, r2, #4
 8007184:	b2d2      	uxtb	r2, r2
 8007186:	440b      	add	r3, r1
 8007188:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800718c:	e00a      	b.n	80071a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	b2da      	uxtb	r2, r3
 8007192:	4908      	ldr	r1, [pc, #32]	; (80071b4 <__NVIC_SetPriority+0x50>)
 8007194:	79fb      	ldrb	r3, [r7, #7]
 8007196:	f003 030f 	and.w	r3, r3, #15
 800719a:	3b04      	subs	r3, #4
 800719c:	0112      	lsls	r2, r2, #4
 800719e:	b2d2      	uxtb	r2, r2
 80071a0:	440b      	add	r3, r1
 80071a2:	761a      	strb	r2, [r3, #24]
}
 80071a4:	bf00      	nop
 80071a6:	370c      	adds	r7, #12
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr
 80071b0:	e000e100 	.word	0xe000e100
 80071b4:	e000ed00 	.word	0xe000ed00

080071b8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80071b8:	b580      	push	{r7, lr}
 80071ba:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80071bc:	4b05      	ldr	r3, [pc, #20]	; (80071d4 <SysTick_Handler+0x1c>)
 80071be:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80071c0:	f001 fcfe 	bl	8008bc0 <xTaskGetSchedulerState>
 80071c4:	4603      	mov	r3, r0
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	d001      	beq.n	80071ce <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80071ca:	f002 fae5 	bl	8009798 <xPortSysTickHandler>
  }
}
 80071ce:	bf00      	nop
 80071d0:	bd80      	pop	{r7, pc}
 80071d2:	bf00      	nop
 80071d4:	e000e010 	.word	0xe000e010

080071d8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80071d8:	b580      	push	{r7, lr}
 80071da:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80071dc:	2100      	movs	r1, #0
 80071de:	f06f 0004 	mvn.w	r0, #4
 80071e2:	f7ff ffbf 	bl	8007164 <__NVIC_SetPriority>
#endif
}
 80071e6:	bf00      	nop
 80071e8:	bd80      	pop	{r7, pc}
	...

080071ec <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071f2:	f3ef 8305 	mrs	r3, IPSR
 80071f6:	603b      	str	r3, [r7, #0]
  return(result);
 80071f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d003      	beq.n	8007206 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80071fe:	f06f 0305 	mvn.w	r3, #5
 8007202:	607b      	str	r3, [r7, #4]
 8007204:	e00c      	b.n	8007220 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007206:	4b0a      	ldr	r3, [pc, #40]	; (8007230 <osKernelInitialize+0x44>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d105      	bne.n	800721a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800720e:	4b08      	ldr	r3, [pc, #32]	; (8007230 <osKernelInitialize+0x44>)
 8007210:	2201      	movs	r2, #1
 8007212:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007214:	2300      	movs	r3, #0
 8007216:	607b      	str	r3, [r7, #4]
 8007218:	e002      	b.n	8007220 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800721a:	f04f 33ff 	mov.w	r3, #4294967295
 800721e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007220:	687b      	ldr	r3, [r7, #4]
}
 8007222:	4618      	mov	r0, r3
 8007224:	370c      	adds	r7, #12
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr
 800722e:	bf00      	nop
 8007230:	20000838 	.word	0x20000838

08007234 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007234:	b580      	push	{r7, lr}
 8007236:	b082      	sub	sp, #8
 8007238:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800723a:	f3ef 8305 	mrs	r3, IPSR
 800723e:	603b      	str	r3, [r7, #0]
  return(result);
 8007240:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007242:	2b00      	cmp	r3, #0
 8007244:	d003      	beq.n	800724e <osKernelStart+0x1a>
    stat = osErrorISR;
 8007246:	f06f 0305 	mvn.w	r3, #5
 800724a:	607b      	str	r3, [r7, #4]
 800724c:	e010      	b.n	8007270 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800724e:	4b0b      	ldr	r3, [pc, #44]	; (800727c <osKernelStart+0x48>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	2b01      	cmp	r3, #1
 8007254:	d109      	bne.n	800726a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007256:	f7ff ffbf 	bl	80071d8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800725a:	4b08      	ldr	r3, [pc, #32]	; (800727c <osKernelStart+0x48>)
 800725c:	2202      	movs	r2, #2
 800725e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007260:	f001 f866 	bl	8008330 <vTaskStartScheduler>
      stat = osOK;
 8007264:	2300      	movs	r3, #0
 8007266:	607b      	str	r3, [r7, #4]
 8007268:	e002      	b.n	8007270 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800726a:	f04f 33ff 	mov.w	r3, #4294967295
 800726e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007270:	687b      	ldr	r3, [r7, #4]
}
 8007272:	4618      	mov	r0, r3
 8007274:	3708      	adds	r7, #8
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
 800727a:	bf00      	nop
 800727c:	20000838 	.word	0x20000838

08007280 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007280:	b580      	push	{r7, lr}
 8007282:	b08e      	sub	sp, #56	; 0x38
 8007284:	af04      	add	r7, sp, #16
 8007286:	60f8      	str	r0, [r7, #12]
 8007288:	60b9      	str	r1, [r7, #8]
 800728a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800728c:	2300      	movs	r3, #0
 800728e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007290:	f3ef 8305 	mrs	r3, IPSR
 8007294:	617b      	str	r3, [r7, #20]
  return(result);
 8007296:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007298:	2b00      	cmp	r3, #0
 800729a:	d17e      	bne.n	800739a <osThreadNew+0x11a>
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d07b      	beq.n	800739a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80072a2:	2380      	movs	r3, #128	; 0x80
 80072a4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80072a6:	2318      	movs	r3, #24
 80072a8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80072aa:	2300      	movs	r3, #0
 80072ac:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80072ae:	f04f 33ff 	mov.w	r3, #4294967295
 80072b2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d045      	beq.n	8007346 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d002      	beq.n	80072c8 <osThreadNew+0x48>
        name = attr->name;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	699b      	ldr	r3, [r3, #24]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d002      	beq.n	80072d6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	699b      	ldr	r3, [r3, #24]
 80072d4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80072d6:	69fb      	ldr	r3, [r7, #28]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d008      	beq.n	80072ee <osThreadNew+0x6e>
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	2b38      	cmp	r3, #56	; 0x38
 80072e0:	d805      	bhi.n	80072ee <osThreadNew+0x6e>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	f003 0301 	and.w	r3, r3, #1
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d001      	beq.n	80072f2 <osThreadNew+0x72>
        return (NULL);
 80072ee:	2300      	movs	r3, #0
 80072f0:	e054      	b.n	800739c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	695b      	ldr	r3, [r3, #20]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d003      	beq.n	8007302 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	695b      	ldr	r3, [r3, #20]
 80072fe:	089b      	lsrs	r3, r3, #2
 8007300:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d00e      	beq.n	8007328 <osThreadNew+0xa8>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	68db      	ldr	r3, [r3, #12]
 800730e:	2b5b      	cmp	r3, #91	; 0x5b
 8007310:	d90a      	bls.n	8007328 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007316:	2b00      	cmp	r3, #0
 8007318:	d006      	beq.n	8007328 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	695b      	ldr	r3, [r3, #20]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d002      	beq.n	8007328 <osThreadNew+0xa8>
        mem = 1;
 8007322:	2301      	movs	r3, #1
 8007324:	61bb      	str	r3, [r7, #24]
 8007326:	e010      	b.n	800734a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d10c      	bne.n	800734a <osThreadNew+0xca>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	68db      	ldr	r3, [r3, #12]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d108      	bne.n	800734a <osThreadNew+0xca>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	691b      	ldr	r3, [r3, #16]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d104      	bne.n	800734a <osThreadNew+0xca>
          mem = 0;
 8007340:	2300      	movs	r3, #0
 8007342:	61bb      	str	r3, [r7, #24]
 8007344:	e001      	b.n	800734a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007346:	2300      	movs	r3, #0
 8007348:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800734a:	69bb      	ldr	r3, [r7, #24]
 800734c:	2b01      	cmp	r3, #1
 800734e:	d110      	bne.n	8007372 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007354:	687a      	ldr	r2, [r7, #4]
 8007356:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007358:	9202      	str	r2, [sp, #8]
 800735a:	9301      	str	r3, [sp, #4]
 800735c:	69fb      	ldr	r3, [r7, #28]
 800735e:	9300      	str	r3, [sp, #0]
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	6a3a      	ldr	r2, [r7, #32]
 8007364:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007366:	68f8      	ldr	r0, [r7, #12]
 8007368:	f000 fe0c 	bl	8007f84 <xTaskCreateStatic>
 800736c:	4603      	mov	r3, r0
 800736e:	613b      	str	r3, [r7, #16]
 8007370:	e013      	b.n	800739a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007372:	69bb      	ldr	r3, [r7, #24]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d110      	bne.n	800739a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007378:	6a3b      	ldr	r3, [r7, #32]
 800737a:	b29a      	uxth	r2, r3
 800737c:	f107 0310 	add.w	r3, r7, #16
 8007380:	9301      	str	r3, [sp, #4]
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	9300      	str	r3, [sp, #0]
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800738a:	68f8      	ldr	r0, [r7, #12]
 800738c:	f000 fe57 	bl	800803e <xTaskCreate>
 8007390:	4603      	mov	r3, r0
 8007392:	2b01      	cmp	r3, #1
 8007394:	d001      	beq.n	800739a <osThreadNew+0x11a>
            hTask = NULL;
 8007396:	2300      	movs	r3, #0
 8007398:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800739a:	693b      	ldr	r3, [r7, #16]
}
 800739c:	4618      	mov	r0, r3
 800739e:	3728      	adds	r7, #40	; 0x28
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b084      	sub	sp, #16
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073ac:	f3ef 8305 	mrs	r3, IPSR
 80073b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80073b2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d003      	beq.n	80073c0 <osDelay+0x1c>
    stat = osErrorISR;
 80073b8:	f06f 0305 	mvn.w	r3, #5
 80073bc:	60fb      	str	r3, [r7, #12]
 80073be:	e007      	b.n	80073d0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80073c0:	2300      	movs	r3, #0
 80073c2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d002      	beq.n	80073d0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 ff7c 	bl	80082c8 <vTaskDelay>
    }
  }

  return (stat);
 80073d0:	68fb      	ldr	r3, [r7, #12]
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3710      	adds	r7, #16
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
	...

080073dc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80073dc:	b480      	push	{r7}
 80073de:	b085      	sub	sp, #20
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	4a07      	ldr	r2, [pc, #28]	; (8007408 <vApplicationGetIdleTaskMemory+0x2c>)
 80073ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	4a06      	ldr	r2, [pc, #24]	; (800740c <vApplicationGetIdleTaskMemory+0x30>)
 80073f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2280      	movs	r2, #128	; 0x80
 80073f8:	601a      	str	r2, [r3, #0]
}
 80073fa:	bf00      	nop
 80073fc:	3714      	adds	r7, #20
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr
 8007406:	bf00      	nop
 8007408:	2000083c 	.word	0x2000083c
 800740c:	20000898 	.word	0x20000898

08007410 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007410:	b480      	push	{r7}
 8007412:	b085      	sub	sp, #20
 8007414:	af00      	add	r7, sp, #0
 8007416:	60f8      	str	r0, [r7, #12]
 8007418:	60b9      	str	r1, [r7, #8]
 800741a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	4a07      	ldr	r2, [pc, #28]	; (800743c <vApplicationGetTimerTaskMemory+0x2c>)
 8007420:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	4a06      	ldr	r2, [pc, #24]	; (8007440 <vApplicationGetTimerTaskMemory+0x30>)
 8007426:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800742e:	601a      	str	r2, [r3, #0]
}
 8007430:	bf00      	nop
 8007432:	3714      	adds	r7, #20
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr
 800743c:	20000a98 	.word	0x20000a98
 8007440:	20000af4 	.word	0x20000af4

08007444 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f103 0208 	add.w	r2, r3, #8
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f04f 32ff 	mov.w	r2, #4294967295
 800745c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f103 0208 	add.w	r2, r3, #8
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f103 0208 	add.w	r2, r3, #8
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007478:	bf00      	nop
 800747a:	370c      	adds	r7, #12
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr

08007484 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007484:	b480      	push	{r7}
 8007486:	b083      	sub	sp, #12
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007492:	bf00      	nop
 8007494:	370c      	adds	r7, #12
 8007496:	46bd      	mov	sp, r7
 8007498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749c:	4770      	bx	lr

0800749e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800749e:	b480      	push	{r7}
 80074a0:	b085      	sub	sp, #20
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	6078      	str	r0, [r7, #4]
 80074a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	68fa      	ldr	r2, [r7, #12]
 80074b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	689a      	ldr	r2, [r3, #8]
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	683a      	ldr	r2, [r7, #0]
 80074c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	683a      	ldr	r2, [r7, #0]
 80074c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	1c5a      	adds	r2, r3, #1
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	601a      	str	r2, [r3, #0]
}
 80074da:	bf00      	nop
 80074dc:	3714      	adds	r7, #20
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr

080074e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80074e6:	b480      	push	{r7}
 80074e8:	b085      	sub	sp, #20
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
 80074ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074fc:	d103      	bne.n	8007506 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	60fb      	str	r3, [r7, #12]
 8007504:	e00c      	b.n	8007520 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	3308      	adds	r3, #8
 800750a:	60fb      	str	r3, [r7, #12]
 800750c:	e002      	b.n	8007514 <vListInsert+0x2e>
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	60fb      	str	r3, [r7, #12]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	68ba      	ldr	r2, [r7, #8]
 800751c:	429a      	cmp	r2, r3
 800751e:	d2f6      	bcs.n	800750e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	685a      	ldr	r2, [r3, #4]
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	683a      	ldr	r2, [r7, #0]
 800752e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	68fa      	ldr	r2, [r7, #12]
 8007534:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	683a      	ldr	r2, [r7, #0]
 800753a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	1c5a      	adds	r2, r3, #1
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	601a      	str	r2, [r3, #0]
}
 800754c:	bf00      	nop
 800754e:	3714      	adds	r7, #20
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr

08007558 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007558:	b480      	push	{r7}
 800755a:	b085      	sub	sp, #20
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	691b      	ldr	r3, [r3, #16]
 8007564:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	6892      	ldr	r2, [r2, #8]
 800756e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	687a      	ldr	r2, [r7, #4]
 8007576:	6852      	ldr	r2, [r2, #4]
 8007578:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	429a      	cmp	r2, r3
 8007582:	d103      	bne.n	800758c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	689a      	ldr	r2, [r3, #8]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	1e5a      	subs	r2, r3, #1
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3714      	adds	r7, #20
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d10a      	bne.n	80075d6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80075c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c4:	f383 8811 	msr	BASEPRI, r3
 80075c8:	f3bf 8f6f 	isb	sy
 80075cc:	f3bf 8f4f 	dsb	sy
 80075d0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80075d2:	bf00      	nop
 80075d4:	e7fe      	b.n	80075d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80075d6:	f002 f84d 	bl	8009674 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075e2:	68f9      	ldr	r1, [r7, #12]
 80075e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80075e6:	fb01 f303 	mul.w	r3, r1, r3
 80075ea:	441a      	add	r2, r3
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2200      	movs	r2, #0
 80075f4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681a      	ldr	r2, [r3, #0]
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007606:	3b01      	subs	r3, #1
 8007608:	68f9      	ldr	r1, [r7, #12]
 800760a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800760c:	fb01 f303 	mul.w	r3, r1, r3
 8007610:	441a      	add	r2, r3
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	22ff      	movs	r2, #255	; 0xff
 800761a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	22ff      	movs	r2, #255	; 0xff
 8007622:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d114      	bne.n	8007656 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	691b      	ldr	r3, [r3, #16]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d01a      	beq.n	800766a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	3310      	adds	r3, #16
 8007638:	4618      	mov	r0, r3
 800763a:	f001 f903 	bl	8008844 <xTaskRemoveFromEventList>
 800763e:	4603      	mov	r3, r0
 8007640:	2b00      	cmp	r3, #0
 8007642:	d012      	beq.n	800766a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007644:	4b0c      	ldr	r3, [pc, #48]	; (8007678 <xQueueGenericReset+0xcc>)
 8007646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800764a:	601a      	str	r2, [r3, #0]
 800764c:	f3bf 8f4f 	dsb	sy
 8007650:	f3bf 8f6f 	isb	sy
 8007654:	e009      	b.n	800766a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	3310      	adds	r3, #16
 800765a:	4618      	mov	r0, r3
 800765c:	f7ff fef2 	bl	8007444 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	3324      	adds	r3, #36	; 0x24
 8007664:	4618      	mov	r0, r3
 8007666:	f7ff feed 	bl	8007444 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800766a:	f002 f833 	bl	80096d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800766e:	2301      	movs	r3, #1
}
 8007670:	4618      	mov	r0, r3
 8007672:	3710      	adds	r7, #16
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}
 8007678:	e000ed04 	.word	0xe000ed04

0800767c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800767c:	b580      	push	{r7, lr}
 800767e:	b08e      	sub	sp, #56	; 0x38
 8007680:	af02      	add	r7, sp, #8
 8007682:	60f8      	str	r0, [r7, #12]
 8007684:	60b9      	str	r1, [r7, #8]
 8007686:	607a      	str	r2, [r7, #4]
 8007688:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d10a      	bne.n	80076a6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007694:	f383 8811 	msr	BASEPRI, r3
 8007698:	f3bf 8f6f 	isb	sy
 800769c:	f3bf 8f4f 	dsb	sy
 80076a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80076a2:	bf00      	nop
 80076a4:	e7fe      	b.n	80076a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d10a      	bne.n	80076c2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80076ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b0:	f383 8811 	msr	BASEPRI, r3
 80076b4:	f3bf 8f6f 	isb	sy
 80076b8:	f3bf 8f4f 	dsb	sy
 80076bc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80076be:	bf00      	nop
 80076c0:	e7fe      	b.n	80076c0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d002      	beq.n	80076ce <xQueueGenericCreateStatic+0x52>
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d001      	beq.n	80076d2 <xQueueGenericCreateStatic+0x56>
 80076ce:	2301      	movs	r3, #1
 80076d0:	e000      	b.n	80076d4 <xQueueGenericCreateStatic+0x58>
 80076d2:	2300      	movs	r3, #0
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d10a      	bne.n	80076ee <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80076d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076dc:	f383 8811 	msr	BASEPRI, r3
 80076e0:	f3bf 8f6f 	isb	sy
 80076e4:	f3bf 8f4f 	dsb	sy
 80076e8:	623b      	str	r3, [r7, #32]
}
 80076ea:	bf00      	nop
 80076ec:	e7fe      	b.n	80076ec <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d102      	bne.n	80076fa <xQueueGenericCreateStatic+0x7e>
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d101      	bne.n	80076fe <xQueueGenericCreateStatic+0x82>
 80076fa:	2301      	movs	r3, #1
 80076fc:	e000      	b.n	8007700 <xQueueGenericCreateStatic+0x84>
 80076fe:	2300      	movs	r3, #0
 8007700:	2b00      	cmp	r3, #0
 8007702:	d10a      	bne.n	800771a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007708:	f383 8811 	msr	BASEPRI, r3
 800770c:	f3bf 8f6f 	isb	sy
 8007710:	f3bf 8f4f 	dsb	sy
 8007714:	61fb      	str	r3, [r7, #28]
}
 8007716:	bf00      	nop
 8007718:	e7fe      	b.n	8007718 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800771a:	2350      	movs	r3, #80	; 0x50
 800771c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	2b50      	cmp	r3, #80	; 0x50
 8007722:	d00a      	beq.n	800773a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007728:	f383 8811 	msr	BASEPRI, r3
 800772c:	f3bf 8f6f 	isb	sy
 8007730:	f3bf 8f4f 	dsb	sy
 8007734:	61bb      	str	r3, [r7, #24]
}
 8007736:	bf00      	nop
 8007738:	e7fe      	b.n	8007738 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800773a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007742:	2b00      	cmp	r3, #0
 8007744:	d00d      	beq.n	8007762 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007748:	2201      	movs	r2, #1
 800774a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800774e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007754:	9300      	str	r3, [sp, #0]
 8007756:	4613      	mov	r3, r2
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	68b9      	ldr	r1, [r7, #8]
 800775c:	68f8      	ldr	r0, [r7, #12]
 800775e:	f000 f805 	bl	800776c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007764:	4618      	mov	r0, r3
 8007766:	3730      	adds	r7, #48	; 0x30
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	60b9      	str	r1, [r7, #8]
 8007776:	607a      	str	r2, [r7, #4]
 8007778:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d103      	bne.n	8007788 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007780:	69bb      	ldr	r3, [r7, #24]
 8007782:	69ba      	ldr	r2, [r7, #24]
 8007784:	601a      	str	r2, [r3, #0]
 8007786:	e002      	b.n	800778e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007788:	69bb      	ldr	r3, [r7, #24]
 800778a:	687a      	ldr	r2, [r7, #4]
 800778c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800778e:	69bb      	ldr	r3, [r7, #24]
 8007790:	68fa      	ldr	r2, [r7, #12]
 8007792:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007794:	69bb      	ldr	r3, [r7, #24]
 8007796:	68ba      	ldr	r2, [r7, #8]
 8007798:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800779a:	2101      	movs	r1, #1
 800779c:	69b8      	ldr	r0, [r7, #24]
 800779e:	f7ff ff05 	bl	80075ac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80077a2:	69bb      	ldr	r3, [r7, #24]
 80077a4:	78fa      	ldrb	r2, [r7, #3]
 80077a6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80077aa:	bf00      	nop
 80077ac:	3710      	adds	r7, #16
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
	...

080077b4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b08e      	sub	sp, #56	; 0x38
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	60f8      	str	r0, [r7, #12]
 80077bc:	60b9      	str	r1, [r7, #8]
 80077be:	607a      	str	r2, [r7, #4]
 80077c0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80077c2:	2300      	movs	r3, #0
 80077c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80077ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d10a      	bne.n	80077e6 <xQueueGenericSend+0x32>
	__asm volatile
 80077d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d4:	f383 8811 	msr	BASEPRI, r3
 80077d8:	f3bf 8f6f 	isb	sy
 80077dc:	f3bf 8f4f 	dsb	sy
 80077e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80077e2:	bf00      	nop
 80077e4:	e7fe      	b.n	80077e4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d103      	bne.n	80077f4 <xQueueGenericSend+0x40>
 80077ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d101      	bne.n	80077f8 <xQueueGenericSend+0x44>
 80077f4:	2301      	movs	r3, #1
 80077f6:	e000      	b.n	80077fa <xQueueGenericSend+0x46>
 80077f8:	2300      	movs	r3, #0
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d10a      	bne.n	8007814 <xQueueGenericSend+0x60>
	__asm volatile
 80077fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007802:	f383 8811 	msr	BASEPRI, r3
 8007806:	f3bf 8f6f 	isb	sy
 800780a:	f3bf 8f4f 	dsb	sy
 800780e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007810:	bf00      	nop
 8007812:	e7fe      	b.n	8007812 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	2b02      	cmp	r3, #2
 8007818:	d103      	bne.n	8007822 <xQueueGenericSend+0x6e>
 800781a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800781c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800781e:	2b01      	cmp	r3, #1
 8007820:	d101      	bne.n	8007826 <xQueueGenericSend+0x72>
 8007822:	2301      	movs	r3, #1
 8007824:	e000      	b.n	8007828 <xQueueGenericSend+0x74>
 8007826:	2300      	movs	r3, #0
 8007828:	2b00      	cmp	r3, #0
 800782a:	d10a      	bne.n	8007842 <xQueueGenericSend+0x8e>
	__asm volatile
 800782c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007830:	f383 8811 	msr	BASEPRI, r3
 8007834:	f3bf 8f6f 	isb	sy
 8007838:	f3bf 8f4f 	dsb	sy
 800783c:	623b      	str	r3, [r7, #32]
}
 800783e:	bf00      	nop
 8007840:	e7fe      	b.n	8007840 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007842:	f001 f9bd 	bl	8008bc0 <xTaskGetSchedulerState>
 8007846:	4603      	mov	r3, r0
 8007848:	2b00      	cmp	r3, #0
 800784a:	d102      	bne.n	8007852 <xQueueGenericSend+0x9e>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d101      	bne.n	8007856 <xQueueGenericSend+0xa2>
 8007852:	2301      	movs	r3, #1
 8007854:	e000      	b.n	8007858 <xQueueGenericSend+0xa4>
 8007856:	2300      	movs	r3, #0
 8007858:	2b00      	cmp	r3, #0
 800785a:	d10a      	bne.n	8007872 <xQueueGenericSend+0xbe>
	__asm volatile
 800785c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007860:	f383 8811 	msr	BASEPRI, r3
 8007864:	f3bf 8f6f 	isb	sy
 8007868:	f3bf 8f4f 	dsb	sy
 800786c:	61fb      	str	r3, [r7, #28]
}
 800786e:	bf00      	nop
 8007870:	e7fe      	b.n	8007870 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007872:	f001 feff 	bl	8009674 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007878:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800787a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800787c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800787e:	429a      	cmp	r2, r3
 8007880:	d302      	bcc.n	8007888 <xQueueGenericSend+0xd4>
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	2b02      	cmp	r3, #2
 8007886:	d129      	bne.n	80078dc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007888:	683a      	ldr	r2, [r7, #0]
 800788a:	68b9      	ldr	r1, [r7, #8]
 800788c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800788e:	f000 fa0b 	bl	8007ca8 <prvCopyDataToQueue>
 8007892:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007898:	2b00      	cmp	r3, #0
 800789a:	d010      	beq.n	80078be <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800789c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800789e:	3324      	adds	r3, #36	; 0x24
 80078a0:	4618      	mov	r0, r3
 80078a2:	f000 ffcf 	bl	8008844 <xTaskRemoveFromEventList>
 80078a6:	4603      	mov	r3, r0
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d013      	beq.n	80078d4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80078ac:	4b3f      	ldr	r3, [pc, #252]	; (80079ac <xQueueGenericSend+0x1f8>)
 80078ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078b2:	601a      	str	r2, [r3, #0]
 80078b4:	f3bf 8f4f 	dsb	sy
 80078b8:	f3bf 8f6f 	isb	sy
 80078bc:	e00a      	b.n	80078d4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80078be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d007      	beq.n	80078d4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80078c4:	4b39      	ldr	r3, [pc, #228]	; (80079ac <xQueueGenericSend+0x1f8>)
 80078c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078ca:	601a      	str	r2, [r3, #0]
 80078cc:	f3bf 8f4f 	dsb	sy
 80078d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80078d4:	f001 fefe 	bl	80096d4 <vPortExitCritical>
				return pdPASS;
 80078d8:	2301      	movs	r3, #1
 80078da:	e063      	b.n	80079a4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d103      	bne.n	80078ea <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80078e2:	f001 fef7 	bl	80096d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80078e6:	2300      	movs	r3, #0
 80078e8:	e05c      	b.n	80079a4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80078ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d106      	bne.n	80078fe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80078f0:	f107 0314 	add.w	r3, r7, #20
 80078f4:	4618      	mov	r0, r3
 80078f6:	f001 f809 	bl	800890c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80078fa:	2301      	movs	r3, #1
 80078fc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80078fe:	f001 fee9 	bl	80096d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007902:	f000 fd7b 	bl	80083fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007906:	f001 feb5 	bl	8009674 <vPortEnterCritical>
 800790a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800790c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007910:	b25b      	sxtb	r3, r3
 8007912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007916:	d103      	bne.n	8007920 <xQueueGenericSend+0x16c>
 8007918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800791a:	2200      	movs	r2, #0
 800791c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007922:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007926:	b25b      	sxtb	r3, r3
 8007928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800792c:	d103      	bne.n	8007936 <xQueueGenericSend+0x182>
 800792e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007930:	2200      	movs	r2, #0
 8007932:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007936:	f001 fecd 	bl	80096d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800793a:	1d3a      	adds	r2, r7, #4
 800793c:	f107 0314 	add.w	r3, r7, #20
 8007940:	4611      	mov	r1, r2
 8007942:	4618      	mov	r0, r3
 8007944:	f000 fff8 	bl	8008938 <xTaskCheckForTimeOut>
 8007948:	4603      	mov	r3, r0
 800794a:	2b00      	cmp	r3, #0
 800794c:	d124      	bne.n	8007998 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800794e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007950:	f000 faa2 	bl	8007e98 <prvIsQueueFull>
 8007954:	4603      	mov	r3, r0
 8007956:	2b00      	cmp	r3, #0
 8007958:	d018      	beq.n	800798c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800795a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800795c:	3310      	adds	r3, #16
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	4611      	mov	r1, r2
 8007962:	4618      	mov	r0, r3
 8007964:	f000 ff1e 	bl	80087a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007968:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800796a:	f000 fa2d 	bl	8007dc8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800796e:	f000 fd53 	bl	8008418 <xTaskResumeAll>
 8007972:	4603      	mov	r3, r0
 8007974:	2b00      	cmp	r3, #0
 8007976:	f47f af7c 	bne.w	8007872 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800797a:	4b0c      	ldr	r3, [pc, #48]	; (80079ac <xQueueGenericSend+0x1f8>)
 800797c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007980:	601a      	str	r2, [r3, #0]
 8007982:	f3bf 8f4f 	dsb	sy
 8007986:	f3bf 8f6f 	isb	sy
 800798a:	e772      	b.n	8007872 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800798c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800798e:	f000 fa1b 	bl	8007dc8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007992:	f000 fd41 	bl	8008418 <xTaskResumeAll>
 8007996:	e76c      	b.n	8007872 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007998:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800799a:	f000 fa15 	bl	8007dc8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800799e:	f000 fd3b 	bl	8008418 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80079a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3738      	adds	r7, #56	; 0x38
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}
 80079ac:	e000ed04 	.word	0xe000ed04

080079b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b090      	sub	sp, #64	; 0x40
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	60f8      	str	r0, [r7, #12]
 80079b8:	60b9      	str	r1, [r7, #8]
 80079ba:	607a      	str	r2, [r7, #4]
 80079bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80079c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d10a      	bne.n	80079de <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80079c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079cc:	f383 8811 	msr	BASEPRI, r3
 80079d0:	f3bf 8f6f 	isb	sy
 80079d4:	f3bf 8f4f 	dsb	sy
 80079d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80079da:	bf00      	nop
 80079dc:	e7fe      	b.n	80079dc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d103      	bne.n	80079ec <xQueueGenericSendFromISR+0x3c>
 80079e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d101      	bne.n	80079f0 <xQueueGenericSendFromISR+0x40>
 80079ec:	2301      	movs	r3, #1
 80079ee:	e000      	b.n	80079f2 <xQueueGenericSendFromISR+0x42>
 80079f0:	2300      	movs	r3, #0
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d10a      	bne.n	8007a0c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80079f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079fa:	f383 8811 	msr	BASEPRI, r3
 80079fe:	f3bf 8f6f 	isb	sy
 8007a02:	f3bf 8f4f 	dsb	sy
 8007a06:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007a08:	bf00      	nop
 8007a0a:	e7fe      	b.n	8007a0a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	2b02      	cmp	r3, #2
 8007a10:	d103      	bne.n	8007a1a <xQueueGenericSendFromISR+0x6a>
 8007a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a16:	2b01      	cmp	r3, #1
 8007a18:	d101      	bne.n	8007a1e <xQueueGenericSendFromISR+0x6e>
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e000      	b.n	8007a20 <xQueueGenericSendFromISR+0x70>
 8007a1e:	2300      	movs	r3, #0
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d10a      	bne.n	8007a3a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a28:	f383 8811 	msr	BASEPRI, r3
 8007a2c:	f3bf 8f6f 	isb	sy
 8007a30:	f3bf 8f4f 	dsb	sy
 8007a34:	623b      	str	r3, [r7, #32]
}
 8007a36:	bf00      	nop
 8007a38:	e7fe      	b.n	8007a38 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a3a:	f001 fefd 	bl	8009838 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007a3e:	f3ef 8211 	mrs	r2, BASEPRI
 8007a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a46:	f383 8811 	msr	BASEPRI, r3
 8007a4a:	f3bf 8f6f 	isb	sy
 8007a4e:	f3bf 8f4f 	dsb	sy
 8007a52:	61fa      	str	r2, [r7, #28]
 8007a54:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007a56:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007a58:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a62:	429a      	cmp	r2, r3
 8007a64:	d302      	bcc.n	8007a6c <xQueueGenericSendFromISR+0xbc>
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	2b02      	cmp	r3, #2
 8007a6a:	d12f      	bne.n	8007acc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007a7c:	683a      	ldr	r2, [r7, #0]
 8007a7e:	68b9      	ldr	r1, [r7, #8]
 8007a80:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007a82:	f000 f911 	bl	8007ca8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007a86:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a8e:	d112      	bne.n	8007ab6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d016      	beq.n	8007ac6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a9a:	3324      	adds	r3, #36	; 0x24
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f000 fed1 	bl	8008844 <xTaskRemoveFromEventList>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d00e      	beq.n	8007ac6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d00b      	beq.n	8007ac6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	601a      	str	r2, [r3, #0]
 8007ab4:	e007      	b.n	8007ac6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007ab6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007aba:	3301      	adds	r3, #1
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	b25a      	sxtb	r2, r3
 8007ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007aca:	e001      	b.n	8007ad0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007acc:	2300      	movs	r3, #0
 8007ace:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ad2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007ada:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007adc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3740      	adds	r7, #64	; 0x40
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
	...

08007ae8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b08c      	sub	sp, #48	; 0x30
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	60f8      	str	r0, [r7, #12]
 8007af0:	60b9      	str	r1, [r7, #8]
 8007af2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007af4:	2300      	movs	r3, #0
 8007af6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d10a      	bne.n	8007b18 <xQueueReceive+0x30>
	__asm volatile
 8007b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b06:	f383 8811 	msr	BASEPRI, r3
 8007b0a:	f3bf 8f6f 	isb	sy
 8007b0e:	f3bf 8f4f 	dsb	sy
 8007b12:	623b      	str	r3, [r7, #32]
}
 8007b14:	bf00      	nop
 8007b16:	e7fe      	b.n	8007b16 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d103      	bne.n	8007b26 <xQueueReceive+0x3e>
 8007b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d101      	bne.n	8007b2a <xQueueReceive+0x42>
 8007b26:	2301      	movs	r3, #1
 8007b28:	e000      	b.n	8007b2c <xQueueReceive+0x44>
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d10a      	bne.n	8007b46 <xQueueReceive+0x5e>
	__asm volatile
 8007b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b34:	f383 8811 	msr	BASEPRI, r3
 8007b38:	f3bf 8f6f 	isb	sy
 8007b3c:	f3bf 8f4f 	dsb	sy
 8007b40:	61fb      	str	r3, [r7, #28]
}
 8007b42:	bf00      	nop
 8007b44:	e7fe      	b.n	8007b44 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b46:	f001 f83b 	bl	8008bc0 <xTaskGetSchedulerState>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d102      	bne.n	8007b56 <xQueueReceive+0x6e>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d101      	bne.n	8007b5a <xQueueReceive+0x72>
 8007b56:	2301      	movs	r3, #1
 8007b58:	e000      	b.n	8007b5c <xQueueReceive+0x74>
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d10a      	bne.n	8007b76 <xQueueReceive+0x8e>
	__asm volatile
 8007b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b64:	f383 8811 	msr	BASEPRI, r3
 8007b68:	f3bf 8f6f 	isb	sy
 8007b6c:	f3bf 8f4f 	dsb	sy
 8007b70:	61bb      	str	r3, [r7, #24]
}
 8007b72:	bf00      	nop
 8007b74:	e7fe      	b.n	8007b74 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007b76:	f001 fd7d 	bl	8009674 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b7e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d01f      	beq.n	8007bc6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007b86:	68b9      	ldr	r1, [r7, #8]
 8007b88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b8a:	f000 f8f7 	bl	8007d7c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b90:	1e5a      	subs	r2, r3, #1
 8007b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b94:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b98:	691b      	ldr	r3, [r3, #16]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d00f      	beq.n	8007bbe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba0:	3310      	adds	r3, #16
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f000 fe4e 	bl	8008844 <xTaskRemoveFromEventList>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d007      	beq.n	8007bbe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007bae:	4b3d      	ldr	r3, [pc, #244]	; (8007ca4 <xQueueReceive+0x1bc>)
 8007bb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bb4:	601a      	str	r2, [r3, #0]
 8007bb6:	f3bf 8f4f 	dsb	sy
 8007bba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007bbe:	f001 fd89 	bl	80096d4 <vPortExitCritical>
				return pdPASS;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	e069      	b.n	8007c9a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d103      	bne.n	8007bd4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007bcc:	f001 fd82 	bl	80096d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	e062      	b.n	8007c9a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d106      	bne.n	8007be8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007bda:	f107 0310 	add.w	r3, r7, #16
 8007bde:	4618      	mov	r0, r3
 8007be0:	f000 fe94 	bl	800890c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007be4:	2301      	movs	r3, #1
 8007be6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007be8:	f001 fd74 	bl	80096d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007bec:	f000 fc06 	bl	80083fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007bf0:	f001 fd40 	bl	8009674 <vPortEnterCritical>
 8007bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007bfa:	b25b      	sxtb	r3, r3
 8007bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c00:	d103      	bne.n	8007c0a <xQueueReceive+0x122>
 8007c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c04:	2200      	movs	r2, #0
 8007c06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c10:	b25b      	sxtb	r3, r3
 8007c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c16:	d103      	bne.n	8007c20 <xQueueReceive+0x138>
 8007c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c20:	f001 fd58 	bl	80096d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c24:	1d3a      	adds	r2, r7, #4
 8007c26:	f107 0310 	add.w	r3, r7, #16
 8007c2a:	4611      	mov	r1, r2
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f000 fe83 	bl	8008938 <xTaskCheckForTimeOut>
 8007c32:	4603      	mov	r3, r0
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d123      	bne.n	8007c80 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c3a:	f000 f917 	bl	8007e6c <prvIsQueueEmpty>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d017      	beq.n	8007c74 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c46:	3324      	adds	r3, #36	; 0x24
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	4611      	mov	r1, r2
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f000 fda9 	bl	80087a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007c52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c54:	f000 f8b8 	bl	8007dc8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007c58:	f000 fbde 	bl	8008418 <xTaskResumeAll>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d189      	bne.n	8007b76 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007c62:	4b10      	ldr	r3, [pc, #64]	; (8007ca4 <xQueueReceive+0x1bc>)
 8007c64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c68:	601a      	str	r2, [r3, #0]
 8007c6a:	f3bf 8f4f 	dsb	sy
 8007c6e:	f3bf 8f6f 	isb	sy
 8007c72:	e780      	b.n	8007b76 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007c74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c76:	f000 f8a7 	bl	8007dc8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007c7a:	f000 fbcd 	bl	8008418 <xTaskResumeAll>
 8007c7e:	e77a      	b.n	8007b76 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007c80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c82:	f000 f8a1 	bl	8007dc8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007c86:	f000 fbc7 	bl	8008418 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c8c:	f000 f8ee 	bl	8007e6c <prvIsQueueEmpty>
 8007c90:	4603      	mov	r3, r0
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	f43f af6f 	beq.w	8007b76 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007c98:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3730      	adds	r7, #48	; 0x30
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	e000ed04 	.word	0xe000ed04

08007ca8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b086      	sub	sp, #24
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	60f8      	str	r0, [r7, #12]
 8007cb0:	60b9      	str	r1, [r7, #8]
 8007cb2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cbc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d10d      	bne.n	8007ce2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d14d      	bne.n	8007d6a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	689b      	ldr	r3, [r3, #8]
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f000 ff92 	bl	8008bfc <xTaskPriorityDisinherit>
 8007cd8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	609a      	str	r2, [r3, #8]
 8007ce0:	e043      	b.n	8007d6a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d119      	bne.n	8007d1c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	6858      	ldr	r0, [r3, #4]
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cf0:	461a      	mov	r2, r3
 8007cf2:	68b9      	ldr	r1, [r7, #8]
 8007cf4:	f001 fff8 	bl	8009ce8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	685a      	ldr	r2, [r3, #4]
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d00:	441a      	add	r2, r3
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	685a      	ldr	r2, [r3, #4]
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	689b      	ldr	r3, [r3, #8]
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	d32b      	bcc.n	8007d6a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	605a      	str	r2, [r3, #4]
 8007d1a:	e026      	b.n	8007d6a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	68d8      	ldr	r0, [r3, #12]
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d24:	461a      	mov	r2, r3
 8007d26:	68b9      	ldr	r1, [r7, #8]
 8007d28:	f001 ffde 	bl	8009ce8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	68da      	ldr	r2, [r3, #12]
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d34:	425b      	negs	r3, r3
 8007d36:	441a      	add	r2, r3
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	68da      	ldr	r2, [r3, #12]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d207      	bcs.n	8007d58 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	689a      	ldr	r2, [r3, #8]
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d50:	425b      	negs	r3, r3
 8007d52:	441a      	add	r2, r3
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2b02      	cmp	r3, #2
 8007d5c:	d105      	bne.n	8007d6a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d002      	beq.n	8007d6a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	3b01      	subs	r3, #1
 8007d68:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	1c5a      	adds	r2, r3, #1
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007d72:	697b      	ldr	r3, [r7, #20]
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3718      	adds	r7, #24
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b082      	sub	sp, #8
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d018      	beq.n	8007dc0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	68da      	ldr	r2, [r3, #12]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d96:	441a      	add	r2, r3
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	68da      	ldr	r2, [r3, #12]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	689b      	ldr	r3, [r3, #8]
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d303      	bcc.n	8007db0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681a      	ldr	r2, [r3, #0]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	68d9      	ldr	r1, [r3, #12]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db8:	461a      	mov	r2, r3
 8007dba:	6838      	ldr	r0, [r7, #0]
 8007dbc:	f001 ff94 	bl	8009ce8 <memcpy>
	}
}
 8007dc0:	bf00      	nop
 8007dc2:	3708      	adds	r7, #8
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007dd0:	f001 fc50 	bl	8009674 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007dda:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007ddc:	e011      	b.n	8007e02 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d012      	beq.n	8007e0c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	3324      	adds	r3, #36	; 0x24
 8007dea:	4618      	mov	r0, r3
 8007dec:	f000 fd2a 	bl	8008844 <xTaskRemoveFromEventList>
 8007df0:	4603      	mov	r3, r0
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d001      	beq.n	8007dfa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007df6:	f000 fe01 	bl	80089fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007dfa:	7bfb      	ldrb	r3, [r7, #15]
 8007dfc:	3b01      	subs	r3, #1
 8007dfe:	b2db      	uxtb	r3, r3
 8007e00:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	dce9      	bgt.n	8007dde <prvUnlockQueue+0x16>
 8007e0a:	e000      	b.n	8007e0e <prvUnlockQueue+0x46>
					break;
 8007e0c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	22ff      	movs	r2, #255	; 0xff
 8007e12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007e16:	f001 fc5d 	bl	80096d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007e1a:	f001 fc2b 	bl	8009674 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e24:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e26:	e011      	b.n	8007e4c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	691b      	ldr	r3, [r3, #16]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d012      	beq.n	8007e56 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	3310      	adds	r3, #16
 8007e34:	4618      	mov	r0, r3
 8007e36:	f000 fd05 	bl	8008844 <xTaskRemoveFromEventList>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d001      	beq.n	8007e44 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007e40:	f000 fddc 	bl	80089fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007e44:	7bbb      	ldrb	r3, [r7, #14]
 8007e46:	3b01      	subs	r3, #1
 8007e48:	b2db      	uxtb	r3, r3
 8007e4a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	dce9      	bgt.n	8007e28 <prvUnlockQueue+0x60>
 8007e54:	e000      	b.n	8007e58 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007e56:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	22ff      	movs	r2, #255	; 0xff
 8007e5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007e60:	f001 fc38 	bl	80096d4 <vPortExitCritical>
}
 8007e64:	bf00      	nop
 8007e66:	3710      	adds	r7, #16
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b084      	sub	sp, #16
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007e74:	f001 fbfe 	bl	8009674 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d102      	bne.n	8007e86 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007e80:	2301      	movs	r3, #1
 8007e82:	60fb      	str	r3, [r7, #12]
 8007e84:	e001      	b.n	8007e8a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007e86:	2300      	movs	r3, #0
 8007e88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007e8a:	f001 fc23 	bl	80096d4 <vPortExitCritical>

	return xReturn;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3710      	adds	r7, #16
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}

08007e98 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b084      	sub	sp, #16
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007ea0:	f001 fbe8 	bl	8009674 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eac:	429a      	cmp	r2, r3
 8007eae:	d102      	bne.n	8007eb6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	60fb      	str	r3, [r7, #12]
 8007eb4:	e001      	b.n	8007eba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007eba:	f001 fc0b 	bl	80096d4 <vPortExitCritical>

	return xReturn;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3710      	adds	r7, #16
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}

08007ec8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007ec8:	b480      	push	{r7}
 8007eca:	b085      	sub	sp, #20
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	60fb      	str	r3, [r7, #12]
 8007ed6:	e014      	b.n	8007f02 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007ed8:	4a0f      	ldr	r2, [pc, #60]	; (8007f18 <vQueueAddToRegistry+0x50>)
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d10b      	bne.n	8007efc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007ee4:	490c      	ldr	r1, [pc, #48]	; (8007f18 <vQueueAddToRegistry+0x50>)
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	683a      	ldr	r2, [r7, #0]
 8007eea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007eee:	4a0a      	ldr	r2, [pc, #40]	; (8007f18 <vQueueAddToRegistry+0x50>)
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	00db      	lsls	r3, r3, #3
 8007ef4:	4413      	add	r3, r2
 8007ef6:	687a      	ldr	r2, [r7, #4]
 8007ef8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007efa:	e006      	b.n	8007f0a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	3301      	adds	r3, #1
 8007f00:	60fb      	str	r3, [r7, #12]
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2b07      	cmp	r3, #7
 8007f06:	d9e7      	bls.n	8007ed8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007f08:	bf00      	nop
 8007f0a:	bf00      	nop
 8007f0c:	3714      	adds	r7, #20
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f14:	4770      	bx	lr
 8007f16:	bf00      	nop
 8007f18:	20000ef4 	.word	0x20000ef4

08007f1c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b086      	sub	sp, #24
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	60f8      	str	r0, [r7, #12]
 8007f24:	60b9      	str	r1, [r7, #8]
 8007f26:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007f2c:	f001 fba2 	bl	8009674 <vPortEnterCritical>
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f36:	b25b      	sxtb	r3, r3
 8007f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f3c:	d103      	bne.n	8007f46 <vQueueWaitForMessageRestricted+0x2a>
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	2200      	movs	r2, #0
 8007f42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f4c:	b25b      	sxtb	r3, r3
 8007f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f52:	d103      	bne.n	8007f5c <vQueueWaitForMessageRestricted+0x40>
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	2200      	movs	r2, #0
 8007f58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f5c:	f001 fbba 	bl	80096d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d106      	bne.n	8007f76 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	3324      	adds	r3, #36	; 0x24
 8007f6c:	687a      	ldr	r2, [r7, #4]
 8007f6e:	68b9      	ldr	r1, [r7, #8]
 8007f70:	4618      	mov	r0, r3
 8007f72:	f000 fc3b 	bl	80087ec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007f76:	6978      	ldr	r0, [r7, #20]
 8007f78:	f7ff ff26 	bl	8007dc8 <prvUnlockQueue>
	}
 8007f7c:	bf00      	nop
 8007f7e:	3718      	adds	r7, #24
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}

08007f84 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b08e      	sub	sp, #56	; 0x38
 8007f88:	af04      	add	r7, sp, #16
 8007f8a:	60f8      	str	r0, [r7, #12]
 8007f8c:	60b9      	str	r1, [r7, #8]
 8007f8e:	607a      	str	r2, [r7, #4]
 8007f90:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d10a      	bne.n	8007fae <xTaskCreateStatic+0x2a>
	__asm volatile
 8007f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f9c:	f383 8811 	msr	BASEPRI, r3
 8007fa0:	f3bf 8f6f 	isb	sy
 8007fa4:	f3bf 8f4f 	dsb	sy
 8007fa8:	623b      	str	r3, [r7, #32]
}
 8007faa:	bf00      	nop
 8007fac:	e7fe      	b.n	8007fac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d10a      	bne.n	8007fca <xTaskCreateStatic+0x46>
	__asm volatile
 8007fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb8:	f383 8811 	msr	BASEPRI, r3
 8007fbc:	f3bf 8f6f 	isb	sy
 8007fc0:	f3bf 8f4f 	dsb	sy
 8007fc4:	61fb      	str	r3, [r7, #28]
}
 8007fc6:	bf00      	nop
 8007fc8:	e7fe      	b.n	8007fc8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007fca:	235c      	movs	r3, #92	; 0x5c
 8007fcc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	2b5c      	cmp	r3, #92	; 0x5c
 8007fd2:	d00a      	beq.n	8007fea <xTaskCreateStatic+0x66>
	__asm volatile
 8007fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd8:	f383 8811 	msr	BASEPRI, r3
 8007fdc:	f3bf 8f6f 	isb	sy
 8007fe0:	f3bf 8f4f 	dsb	sy
 8007fe4:	61bb      	str	r3, [r7, #24]
}
 8007fe6:	bf00      	nop
 8007fe8:	e7fe      	b.n	8007fe8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007fea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d01e      	beq.n	8008030 <xTaskCreateStatic+0xac>
 8007ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d01b      	beq.n	8008030 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ffa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008000:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008004:	2202      	movs	r2, #2
 8008006:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800800a:	2300      	movs	r3, #0
 800800c:	9303      	str	r3, [sp, #12]
 800800e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008010:	9302      	str	r3, [sp, #8]
 8008012:	f107 0314 	add.w	r3, r7, #20
 8008016:	9301      	str	r3, [sp, #4]
 8008018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801a:	9300      	str	r3, [sp, #0]
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	687a      	ldr	r2, [r7, #4]
 8008020:	68b9      	ldr	r1, [r7, #8]
 8008022:	68f8      	ldr	r0, [r7, #12]
 8008024:	f000 f850 	bl	80080c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008028:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800802a:	f000 f8dd 	bl	80081e8 <prvAddNewTaskToReadyList>
 800802e:	e001      	b.n	8008034 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008030:	2300      	movs	r3, #0
 8008032:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008034:	697b      	ldr	r3, [r7, #20]
	}
 8008036:	4618      	mov	r0, r3
 8008038:	3728      	adds	r7, #40	; 0x28
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}

0800803e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800803e:	b580      	push	{r7, lr}
 8008040:	b08c      	sub	sp, #48	; 0x30
 8008042:	af04      	add	r7, sp, #16
 8008044:	60f8      	str	r0, [r7, #12]
 8008046:	60b9      	str	r1, [r7, #8]
 8008048:	603b      	str	r3, [r7, #0]
 800804a:	4613      	mov	r3, r2
 800804c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800804e:	88fb      	ldrh	r3, [r7, #6]
 8008050:	009b      	lsls	r3, r3, #2
 8008052:	4618      	mov	r0, r3
 8008054:	f001 fc30 	bl	80098b8 <pvPortMalloc>
 8008058:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d00e      	beq.n	800807e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008060:	205c      	movs	r0, #92	; 0x5c
 8008062:	f001 fc29 	bl	80098b8 <pvPortMalloc>
 8008066:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008068:	69fb      	ldr	r3, [r7, #28]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d003      	beq.n	8008076 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800806e:	69fb      	ldr	r3, [r7, #28]
 8008070:	697a      	ldr	r2, [r7, #20]
 8008072:	631a      	str	r2, [r3, #48]	; 0x30
 8008074:	e005      	b.n	8008082 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008076:	6978      	ldr	r0, [r7, #20]
 8008078:	f001 fcea 	bl	8009a50 <vPortFree>
 800807c:	e001      	b.n	8008082 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800807e:	2300      	movs	r3, #0
 8008080:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008082:	69fb      	ldr	r3, [r7, #28]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d017      	beq.n	80080b8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008088:	69fb      	ldr	r3, [r7, #28]
 800808a:	2200      	movs	r2, #0
 800808c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008090:	88fa      	ldrh	r2, [r7, #6]
 8008092:	2300      	movs	r3, #0
 8008094:	9303      	str	r3, [sp, #12]
 8008096:	69fb      	ldr	r3, [r7, #28]
 8008098:	9302      	str	r3, [sp, #8]
 800809a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800809c:	9301      	str	r3, [sp, #4]
 800809e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080a0:	9300      	str	r3, [sp, #0]
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	68b9      	ldr	r1, [r7, #8]
 80080a6:	68f8      	ldr	r0, [r7, #12]
 80080a8:	f000 f80e 	bl	80080c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80080ac:	69f8      	ldr	r0, [r7, #28]
 80080ae:	f000 f89b 	bl	80081e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80080b2:	2301      	movs	r3, #1
 80080b4:	61bb      	str	r3, [r7, #24]
 80080b6:	e002      	b.n	80080be <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80080b8:	f04f 33ff 	mov.w	r3, #4294967295
 80080bc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80080be:	69bb      	ldr	r3, [r7, #24]
	}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3720      	adds	r7, #32
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b088      	sub	sp, #32
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	60f8      	str	r0, [r7, #12]
 80080d0:	60b9      	str	r1, [r7, #8]
 80080d2:	607a      	str	r2, [r7, #4]
 80080d4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80080d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	009b      	lsls	r3, r3, #2
 80080de:	461a      	mov	r2, r3
 80080e0:	21a5      	movs	r1, #165	; 0xa5
 80080e2:	f001 fe0f 	bl	8009d04 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80080e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80080f0:	3b01      	subs	r3, #1
 80080f2:	009b      	lsls	r3, r3, #2
 80080f4:	4413      	add	r3, r2
 80080f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80080f8:	69bb      	ldr	r3, [r7, #24]
 80080fa:	f023 0307 	bic.w	r3, r3, #7
 80080fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008100:	69bb      	ldr	r3, [r7, #24]
 8008102:	f003 0307 	and.w	r3, r3, #7
 8008106:	2b00      	cmp	r3, #0
 8008108:	d00a      	beq.n	8008120 <prvInitialiseNewTask+0x58>
	__asm volatile
 800810a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800810e:	f383 8811 	msr	BASEPRI, r3
 8008112:	f3bf 8f6f 	isb	sy
 8008116:	f3bf 8f4f 	dsb	sy
 800811a:	617b      	str	r3, [r7, #20]
}
 800811c:	bf00      	nop
 800811e:	e7fe      	b.n	800811e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d01f      	beq.n	8008166 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008126:	2300      	movs	r3, #0
 8008128:	61fb      	str	r3, [r7, #28]
 800812a:	e012      	b.n	8008152 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800812c:	68ba      	ldr	r2, [r7, #8]
 800812e:	69fb      	ldr	r3, [r7, #28]
 8008130:	4413      	add	r3, r2
 8008132:	7819      	ldrb	r1, [r3, #0]
 8008134:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008136:	69fb      	ldr	r3, [r7, #28]
 8008138:	4413      	add	r3, r2
 800813a:	3334      	adds	r3, #52	; 0x34
 800813c:	460a      	mov	r2, r1
 800813e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008140:	68ba      	ldr	r2, [r7, #8]
 8008142:	69fb      	ldr	r3, [r7, #28]
 8008144:	4413      	add	r3, r2
 8008146:	781b      	ldrb	r3, [r3, #0]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d006      	beq.n	800815a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800814c:	69fb      	ldr	r3, [r7, #28]
 800814e:	3301      	adds	r3, #1
 8008150:	61fb      	str	r3, [r7, #28]
 8008152:	69fb      	ldr	r3, [r7, #28]
 8008154:	2b0f      	cmp	r3, #15
 8008156:	d9e9      	bls.n	800812c <prvInitialiseNewTask+0x64>
 8008158:	e000      	b.n	800815c <prvInitialiseNewTask+0x94>
			{
				break;
 800815a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800815c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800815e:	2200      	movs	r2, #0
 8008160:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008164:	e003      	b.n	800816e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008168:	2200      	movs	r2, #0
 800816a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800816e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008170:	2b37      	cmp	r3, #55	; 0x37
 8008172:	d901      	bls.n	8008178 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008174:	2337      	movs	r3, #55	; 0x37
 8008176:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800817a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800817c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800817e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008180:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008182:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008186:	2200      	movs	r2, #0
 8008188:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800818a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800818c:	3304      	adds	r3, #4
 800818e:	4618      	mov	r0, r3
 8008190:	f7ff f978 	bl	8007484 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008196:	3318      	adds	r3, #24
 8008198:	4618      	mov	r0, r3
 800819a:	f7ff f973 	bl	8007484 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800819e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081a6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80081aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80081ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081b2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80081b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b6:	2200      	movs	r2, #0
 80081b8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80081ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081bc:	2200      	movs	r2, #0
 80081be:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80081c2:	683a      	ldr	r2, [r7, #0]
 80081c4:	68f9      	ldr	r1, [r7, #12]
 80081c6:	69b8      	ldr	r0, [r7, #24]
 80081c8:	f001 f928 	bl	800941c <pxPortInitialiseStack>
 80081cc:	4602      	mov	r2, r0
 80081ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80081d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d002      	beq.n	80081de <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80081d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80081de:	bf00      	nop
 80081e0:	3720      	adds	r7, #32
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}
	...

080081e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b082      	sub	sp, #8
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80081f0:	f001 fa40 	bl	8009674 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80081f4:	4b2d      	ldr	r3, [pc, #180]	; (80082ac <prvAddNewTaskToReadyList+0xc4>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	3301      	adds	r3, #1
 80081fa:	4a2c      	ldr	r2, [pc, #176]	; (80082ac <prvAddNewTaskToReadyList+0xc4>)
 80081fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80081fe:	4b2c      	ldr	r3, [pc, #176]	; (80082b0 <prvAddNewTaskToReadyList+0xc8>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d109      	bne.n	800821a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008206:	4a2a      	ldr	r2, [pc, #168]	; (80082b0 <prvAddNewTaskToReadyList+0xc8>)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800820c:	4b27      	ldr	r3, [pc, #156]	; (80082ac <prvAddNewTaskToReadyList+0xc4>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	2b01      	cmp	r3, #1
 8008212:	d110      	bne.n	8008236 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008214:	f000 fc16 	bl	8008a44 <prvInitialiseTaskLists>
 8008218:	e00d      	b.n	8008236 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800821a:	4b26      	ldr	r3, [pc, #152]	; (80082b4 <prvAddNewTaskToReadyList+0xcc>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d109      	bne.n	8008236 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008222:	4b23      	ldr	r3, [pc, #140]	; (80082b0 <prvAddNewTaskToReadyList+0xc8>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800822c:	429a      	cmp	r2, r3
 800822e:	d802      	bhi.n	8008236 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008230:	4a1f      	ldr	r2, [pc, #124]	; (80082b0 <prvAddNewTaskToReadyList+0xc8>)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008236:	4b20      	ldr	r3, [pc, #128]	; (80082b8 <prvAddNewTaskToReadyList+0xd0>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	3301      	adds	r3, #1
 800823c:	4a1e      	ldr	r2, [pc, #120]	; (80082b8 <prvAddNewTaskToReadyList+0xd0>)
 800823e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008240:	4b1d      	ldr	r3, [pc, #116]	; (80082b8 <prvAddNewTaskToReadyList+0xd0>)
 8008242:	681a      	ldr	r2, [r3, #0]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800824c:	4b1b      	ldr	r3, [pc, #108]	; (80082bc <prvAddNewTaskToReadyList+0xd4>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	429a      	cmp	r2, r3
 8008252:	d903      	bls.n	800825c <prvAddNewTaskToReadyList+0x74>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008258:	4a18      	ldr	r2, [pc, #96]	; (80082bc <prvAddNewTaskToReadyList+0xd4>)
 800825a:	6013      	str	r3, [r2, #0]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008260:	4613      	mov	r3, r2
 8008262:	009b      	lsls	r3, r3, #2
 8008264:	4413      	add	r3, r2
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	4a15      	ldr	r2, [pc, #84]	; (80082c0 <prvAddNewTaskToReadyList+0xd8>)
 800826a:	441a      	add	r2, r3
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	3304      	adds	r3, #4
 8008270:	4619      	mov	r1, r3
 8008272:	4610      	mov	r0, r2
 8008274:	f7ff f913 	bl	800749e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008278:	f001 fa2c 	bl	80096d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800827c:	4b0d      	ldr	r3, [pc, #52]	; (80082b4 <prvAddNewTaskToReadyList+0xcc>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d00e      	beq.n	80082a2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008284:	4b0a      	ldr	r3, [pc, #40]	; (80082b0 <prvAddNewTaskToReadyList+0xc8>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800828e:	429a      	cmp	r2, r3
 8008290:	d207      	bcs.n	80082a2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008292:	4b0c      	ldr	r3, [pc, #48]	; (80082c4 <prvAddNewTaskToReadyList+0xdc>)
 8008294:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008298:	601a      	str	r2, [r3, #0]
 800829a:	f3bf 8f4f 	dsb	sy
 800829e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80082a2:	bf00      	nop
 80082a4:	3708      	adds	r7, #8
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}
 80082aa:	bf00      	nop
 80082ac:	20001408 	.word	0x20001408
 80082b0:	20000f34 	.word	0x20000f34
 80082b4:	20001414 	.word	0x20001414
 80082b8:	20001424 	.word	0x20001424
 80082bc:	20001410 	.word	0x20001410
 80082c0:	20000f38 	.word	0x20000f38
 80082c4:	e000ed04 	.word	0xe000ed04

080082c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80082d0:	2300      	movs	r3, #0
 80082d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d017      	beq.n	800830a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80082da:	4b13      	ldr	r3, [pc, #76]	; (8008328 <vTaskDelay+0x60>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d00a      	beq.n	80082f8 <vTaskDelay+0x30>
	__asm volatile
 80082e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e6:	f383 8811 	msr	BASEPRI, r3
 80082ea:	f3bf 8f6f 	isb	sy
 80082ee:	f3bf 8f4f 	dsb	sy
 80082f2:	60bb      	str	r3, [r7, #8]
}
 80082f4:	bf00      	nop
 80082f6:	e7fe      	b.n	80082f6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80082f8:	f000 f880 	bl	80083fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80082fc:	2100      	movs	r1, #0
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 fcea 	bl	8008cd8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008304:	f000 f888 	bl	8008418 <xTaskResumeAll>
 8008308:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d107      	bne.n	8008320 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008310:	4b06      	ldr	r3, [pc, #24]	; (800832c <vTaskDelay+0x64>)
 8008312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008316:	601a      	str	r2, [r3, #0]
 8008318:	f3bf 8f4f 	dsb	sy
 800831c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008320:	bf00      	nop
 8008322:	3710      	adds	r7, #16
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}
 8008328:	20001430 	.word	0x20001430
 800832c:	e000ed04 	.word	0xe000ed04

08008330 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b08a      	sub	sp, #40	; 0x28
 8008334:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008336:	2300      	movs	r3, #0
 8008338:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800833a:	2300      	movs	r3, #0
 800833c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800833e:	463a      	mov	r2, r7
 8008340:	1d39      	adds	r1, r7, #4
 8008342:	f107 0308 	add.w	r3, r7, #8
 8008346:	4618      	mov	r0, r3
 8008348:	f7ff f848 	bl	80073dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800834c:	6839      	ldr	r1, [r7, #0]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	68ba      	ldr	r2, [r7, #8]
 8008352:	9202      	str	r2, [sp, #8]
 8008354:	9301      	str	r3, [sp, #4]
 8008356:	2300      	movs	r3, #0
 8008358:	9300      	str	r3, [sp, #0]
 800835a:	2300      	movs	r3, #0
 800835c:	460a      	mov	r2, r1
 800835e:	4921      	ldr	r1, [pc, #132]	; (80083e4 <vTaskStartScheduler+0xb4>)
 8008360:	4821      	ldr	r0, [pc, #132]	; (80083e8 <vTaskStartScheduler+0xb8>)
 8008362:	f7ff fe0f 	bl	8007f84 <xTaskCreateStatic>
 8008366:	4603      	mov	r3, r0
 8008368:	4a20      	ldr	r2, [pc, #128]	; (80083ec <vTaskStartScheduler+0xbc>)
 800836a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800836c:	4b1f      	ldr	r3, [pc, #124]	; (80083ec <vTaskStartScheduler+0xbc>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d002      	beq.n	800837a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008374:	2301      	movs	r3, #1
 8008376:	617b      	str	r3, [r7, #20]
 8008378:	e001      	b.n	800837e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800837a:	2300      	movs	r3, #0
 800837c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	2b01      	cmp	r3, #1
 8008382:	d102      	bne.n	800838a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008384:	f000 fcfc 	bl	8008d80 <xTimerCreateTimerTask>
 8008388:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	2b01      	cmp	r3, #1
 800838e:	d116      	bne.n	80083be <vTaskStartScheduler+0x8e>
	__asm volatile
 8008390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008394:	f383 8811 	msr	BASEPRI, r3
 8008398:	f3bf 8f6f 	isb	sy
 800839c:	f3bf 8f4f 	dsb	sy
 80083a0:	613b      	str	r3, [r7, #16]
}
 80083a2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80083a4:	4b12      	ldr	r3, [pc, #72]	; (80083f0 <vTaskStartScheduler+0xc0>)
 80083a6:	f04f 32ff 	mov.w	r2, #4294967295
 80083aa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80083ac:	4b11      	ldr	r3, [pc, #68]	; (80083f4 <vTaskStartScheduler+0xc4>)
 80083ae:	2201      	movs	r2, #1
 80083b0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80083b2:	4b11      	ldr	r3, [pc, #68]	; (80083f8 <vTaskStartScheduler+0xc8>)
 80083b4:	2200      	movs	r2, #0
 80083b6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80083b8:	f001 f8ba 	bl	8009530 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80083bc:	e00e      	b.n	80083dc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083c4:	d10a      	bne.n	80083dc <vTaskStartScheduler+0xac>
	__asm volatile
 80083c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ca:	f383 8811 	msr	BASEPRI, r3
 80083ce:	f3bf 8f6f 	isb	sy
 80083d2:	f3bf 8f4f 	dsb	sy
 80083d6:	60fb      	str	r3, [r7, #12]
}
 80083d8:	bf00      	nop
 80083da:	e7fe      	b.n	80083da <vTaskStartScheduler+0xaa>
}
 80083dc:	bf00      	nop
 80083de:	3718      	adds	r7, #24
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}
 80083e4:	0800bebc 	.word	0x0800bebc
 80083e8:	08008a15 	.word	0x08008a15
 80083ec:	2000142c 	.word	0x2000142c
 80083f0:	20001428 	.word	0x20001428
 80083f4:	20001414 	.word	0x20001414
 80083f8:	2000140c 	.word	0x2000140c

080083fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80083fc:	b480      	push	{r7}
 80083fe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008400:	4b04      	ldr	r3, [pc, #16]	; (8008414 <vTaskSuspendAll+0x18>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	3301      	adds	r3, #1
 8008406:	4a03      	ldr	r2, [pc, #12]	; (8008414 <vTaskSuspendAll+0x18>)
 8008408:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800840a:	bf00      	nop
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr
 8008414:	20001430 	.word	0x20001430

08008418 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b084      	sub	sp, #16
 800841c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800841e:	2300      	movs	r3, #0
 8008420:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008422:	2300      	movs	r3, #0
 8008424:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008426:	4b42      	ldr	r3, [pc, #264]	; (8008530 <xTaskResumeAll+0x118>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d10a      	bne.n	8008444 <xTaskResumeAll+0x2c>
	__asm volatile
 800842e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008432:	f383 8811 	msr	BASEPRI, r3
 8008436:	f3bf 8f6f 	isb	sy
 800843a:	f3bf 8f4f 	dsb	sy
 800843e:	603b      	str	r3, [r7, #0]
}
 8008440:	bf00      	nop
 8008442:	e7fe      	b.n	8008442 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008444:	f001 f916 	bl	8009674 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008448:	4b39      	ldr	r3, [pc, #228]	; (8008530 <xTaskResumeAll+0x118>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	3b01      	subs	r3, #1
 800844e:	4a38      	ldr	r2, [pc, #224]	; (8008530 <xTaskResumeAll+0x118>)
 8008450:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008452:	4b37      	ldr	r3, [pc, #220]	; (8008530 <xTaskResumeAll+0x118>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d162      	bne.n	8008520 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800845a:	4b36      	ldr	r3, [pc, #216]	; (8008534 <xTaskResumeAll+0x11c>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d05e      	beq.n	8008520 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008462:	e02f      	b.n	80084c4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008464:	4b34      	ldr	r3, [pc, #208]	; (8008538 <xTaskResumeAll+0x120>)
 8008466:	68db      	ldr	r3, [r3, #12]
 8008468:	68db      	ldr	r3, [r3, #12]
 800846a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	3318      	adds	r3, #24
 8008470:	4618      	mov	r0, r3
 8008472:	f7ff f871 	bl	8007558 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	3304      	adds	r3, #4
 800847a:	4618      	mov	r0, r3
 800847c:	f7ff f86c 	bl	8007558 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008484:	4b2d      	ldr	r3, [pc, #180]	; (800853c <xTaskResumeAll+0x124>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	429a      	cmp	r2, r3
 800848a:	d903      	bls.n	8008494 <xTaskResumeAll+0x7c>
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008490:	4a2a      	ldr	r2, [pc, #168]	; (800853c <xTaskResumeAll+0x124>)
 8008492:	6013      	str	r3, [r2, #0]
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008498:	4613      	mov	r3, r2
 800849a:	009b      	lsls	r3, r3, #2
 800849c:	4413      	add	r3, r2
 800849e:	009b      	lsls	r3, r3, #2
 80084a0:	4a27      	ldr	r2, [pc, #156]	; (8008540 <xTaskResumeAll+0x128>)
 80084a2:	441a      	add	r2, r3
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	3304      	adds	r3, #4
 80084a8:	4619      	mov	r1, r3
 80084aa:	4610      	mov	r0, r2
 80084ac:	f7fe fff7 	bl	800749e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084b4:	4b23      	ldr	r3, [pc, #140]	; (8008544 <xTaskResumeAll+0x12c>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d302      	bcc.n	80084c4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80084be:	4b22      	ldr	r3, [pc, #136]	; (8008548 <xTaskResumeAll+0x130>)
 80084c0:	2201      	movs	r2, #1
 80084c2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80084c4:	4b1c      	ldr	r3, [pc, #112]	; (8008538 <xTaskResumeAll+0x120>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d1cb      	bne.n	8008464 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d001      	beq.n	80084d6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80084d2:	f000 fb55 	bl	8008b80 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80084d6:	4b1d      	ldr	r3, [pc, #116]	; (800854c <xTaskResumeAll+0x134>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d010      	beq.n	8008504 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80084e2:	f000 f847 	bl	8008574 <xTaskIncrementTick>
 80084e6:	4603      	mov	r3, r0
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d002      	beq.n	80084f2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80084ec:	4b16      	ldr	r3, [pc, #88]	; (8008548 <xTaskResumeAll+0x130>)
 80084ee:	2201      	movs	r2, #1
 80084f0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	3b01      	subs	r3, #1
 80084f6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d1f1      	bne.n	80084e2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80084fe:	4b13      	ldr	r3, [pc, #76]	; (800854c <xTaskResumeAll+0x134>)
 8008500:	2200      	movs	r2, #0
 8008502:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008504:	4b10      	ldr	r3, [pc, #64]	; (8008548 <xTaskResumeAll+0x130>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d009      	beq.n	8008520 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800850c:	2301      	movs	r3, #1
 800850e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008510:	4b0f      	ldr	r3, [pc, #60]	; (8008550 <xTaskResumeAll+0x138>)
 8008512:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008516:	601a      	str	r2, [r3, #0]
 8008518:	f3bf 8f4f 	dsb	sy
 800851c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008520:	f001 f8d8 	bl	80096d4 <vPortExitCritical>

	return xAlreadyYielded;
 8008524:	68bb      	ldr	r3, [r7, #8]
}
 8008526:	4618      	mov	r0, r3
 8008528:	3710      	adds	r7, #16
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop
 8008530:	20001430 	.word	0x20001430
 8008534:	20001408 	.word	0x20001408
 8008538:	200013c8 	.word	0x200013c8
 800853c:	20001410 	.word	0x20001410
 8008540:	20000f38 	.word	0x20000f38
 8008544:	20000f34 	.word	0x20000f34
 8008548:	2000141c 	.word	0x2000141c
 800854c:	20001418 	.word	0x20001418
 8008550:	e000ed04 	.word	0xe000ed04

08008554 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008554:	b480      	push	{r7}
 8008556:	b083      	sub	sp, #12
 8008558:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800855a:	4b05      	ldr	r3, [pc, #20]	; (8008570 <xTaskGetTickCount+0x1c>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008560:	687b      	ldr	r3, [r7, #4]
}
 8008562:	4618      	mov	r0, r3
 8008564:	370c      	adds	r7, #12
 8008566:	46bd      	mov	sp, r7
 8008568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856c:	4770      	bx	lr
 800856e:	bf00      	nop
 8008570:	2000140c 	.word	0x2000140c

08008574 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b086      	sub	sp, #24
 8008578:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800857a:	2300      	movs	r3, #0
 800857c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800857e:	4b4f      	ldr	r3, [pc, #316]	; (80086bc <xTaskIncrementTick+0x148>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	2b00      	cmp	r3, #0
 8008584:	f040 808f 	bne.w	80086a6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008588:	4b4d      	ldr	r3, [pc, #308]	; (80086c0 <xTaskIncrementTick+0x14c>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	3301      	adds	r3, #1
 800858e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008590:	4a4b      	ldr	r2, [pc, #300]	; (80086c0 <xTaskIncrementTick+0x14c>)
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d120      	bne.n	80085de <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800859c:	4b49      	ldr	r3, [pc, #292]	; (80086c4 <xTaskIncrementTick+0x150>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d00a      	beq.n	80085bc <xTaskIncrementTick+0x48>
	__asm volatile
 80085a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085aa:	f383 8811 	msr	BASEPRI, r3
 80085ae:	f3bf 8f6f 	isb	sy
 80085b2:	f3bf 8f4f 	dsb	sy
 80085b6:	603b      	str	r3, [r7, #0]
}
 80085b8:	bf00      	nop
 80085ba:	e7fe      	b.n	80085ba <xTaskIncrementTick+0x46>
 80085bc:	4b41      	ldr	r3, [pc, #260]	; (80086c4 <xTaskIncrementTick+0x150>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	60fb      	str	r3, [r7, #12]
 80085c2:	4b41      	ldr	r3, [pc, #260]	; (80086c8 <xTaskIncrementTick+0x154>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4a3f      	ldr	r2, [pc, #252]	; (80086c4 <xTaskIncrementTick+0x150>)
 80085c8:	6013      	str	r3, [r2, #0]
 80085ca:	4a3f      	ldr	r2, [pc, #252]	; (80086c8 <xTaskIncrementTick+0x154>)
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	6013      	str	r3, [r2, #0]
 80085d0:	4b3e      	ldr	r3, [pc, #248]	; (80086cc <xTaskIncrementTick+0x158>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	3301      	adds	r3, #1
 80085d6:	4a3d      	ldr	r2, [pc, #244]	; (80086cc <xTaskIncrementTick+0x158>)
 80085d8:	6013      	str	r3, [r2, #0]
 80085da:	f000 fad1 	bl	8008b80 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80085de:	4b3c      	ldr	r3, [pc, #240]	; (80086d0 <xTaskIncrementTick+0x15c>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	693a      	ldr	r2, [r7, #16]
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d349      	bcc.n	800867c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085e8:	4b36      	ldr	r3, [pc, #216]	; (80086c4 <xTaskIncrementTick+0x150>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d104      	bne.n	80085fc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085f2:	4b37      	ldr	r3, [pc, #220]	; (80086d0 <xTaskIncrementTick+0x15c>)
 80085f4:	f04f 32ff 	mov.w	r2, #4294967295
 80085f8:	601a      	str	r2, [r3, #0]
					break;
 80085fa:	e03f      	b.n	800867c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085fc:	4b31      	ldr	r3, [pc, #196]	; (80086c4 <xTaskIncrementTick+0x150>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	68db      	ldr	r3, [r3, #12]
 8008602:	68db      	ldr	r3, [r3, #12]
 8008604:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800860c:	693a      	ldr	r2, [r7, #16]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	429a      	cmp	r2, r3
 8008612:	d203      	bcs.n	800861c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008614:	4a2e      	ldr	r2, [pc, #184]	; (80086d0 <xTaskIncrementTick+0x15c>)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800861a:	e02f      	b.n	800867c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	3304      	adds	r3, #4
 8008620:	4618      	mov	r0, r3
 8008622:	f7fe ff99 	bl	8007558 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800862a:	2b00      	cmp	r3, #0
 800862c:	d004      	beq.n	8008638 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	3318      	adds	r3, #24
 8008632:	4618      	mov	r0, r3
 8008634:	f7fe ff90 	bl	8007558 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800863c:	4b25      	ldr	r3, [pc, #148]	; (80086d4 <xTaskIncrementTick+0x160>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	429a      	cmp	r2, r3
 8008642:	d903      	bls.n	800864c <xTaskIncrementTick+0xd8>
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008648:	4a22      	ldr	r2, [pc, #136]	; (80086d4 <xTaskIncrementTick+0x160>)
 800864a:	6013      	str	r3, [r2, #0]
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008650:	4613      	mov	r3, r2
 8008652:	009b      	lsls	r3, r3, #2
 8008654:	4413      	add	r3, r2
 8008656:	009b      	lsls	r3, r3, #2
 8008658:	4a1f      	ldr	r2, [pc, #124]	; (80086d8 <xTaskIncrementTick+0x164>)
 800865a:	441a      	add	r2, r3
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	3304      	adds	r3, #4
 8008660:	4619      	mov	r1, r3
 8008662:	4610      	mov	r0, r2
 8008664:	f7fe ff1b 	bl	800749e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800866c:	4b1b      	ldr	r3, [pc, #108]	; (80086dc <xTaskIncrementTick+0x168>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008672:	429a      	cmp	r2, r3
 8008674:	d3b8      	bcc.n	80085e8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008676:	2301      	movs	r3, #1
 8008678:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800867a:	e7b5      	b.n	80085e8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800867c:	4b17      	ldr	r3, [pc, #92]	; (80086dc <xTaskIncrementTick+0x168>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008682:	4915      	ldr	r1, [pc, #84]	; (80086d8 <xTaskIncrementTick+0x164>)
 8008684:	4613      	mov	r3, r2
 8008686:	009b      	lsls	r3, r3, #2
 8008688:	4413      	add	r3, r2
 800868a:	009b      	lsls	r3, r3, #2
 800868c:	440b      	add	r3, r1
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	2b01      	cmp	r3, #1
 8008692:	d901      	bls.n	8008698 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008694:	2301      	movs	r3, #1
 8008696:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008698:	4b11      	ldr	r3, [pc, #68]	; (80086e0 <xTaskIncrementTick+0x16c>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d007      	beq.n	80086b0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80086a0:	2301      	movs	r3, #1
 80086a2:	617b      	str	r3, [r7, #20]
 80086a4:	e004      	b.n	80086b0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80086a6:	4b0f      	ldr	r3, [pc, #60]	; (80086e4 <xTaskIncrementTick+0x170>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	3301      	adds	r3, #1
 80086ac:	4a0d      	ldr	r2, [pc, #52]	; (80086e4 <xTaskIncrementTick+0x170>)
 80086ae:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80086b0:	697b      	ldr	r3, [r7, #20]
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3718      	adds	r7, #24
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}
 80086ba:	bf00      	nop
 80086bc:	20001430 	.word	0x20001430
 80086c0:	2000140c 	.word	0x2000140c
 80086c4:	200013c0 	.word	0x200013c0
 80086c8:	200013c4 	.word	0x200013c4
 80086cc:	20001420 	.word	0x20001420
 80086d0:	20001428 	.word	0x20001428
 80086d4:	20001410 	.word	0x20001410
 80086d8:	20000f38 	.word	0x20000f38
 80086dc:	20000f34 	.word	0x20000f34
 80086e0:	2000141c 	.word	0x2000141c
 80086e4:	20001418 	.word	0x20001418

080086e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80086e8:	b480      	push	{r7}
 80086ea:	b085      	sub	sp, #20
 80086ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80086ee:	4b28      	ldr	r3, [pc, #160]	; (8008790 <vTaskSwitchContext+0xa8>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d003      	beq.n	80086fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80086f6:	4b27      	ldr	r3, [pc, #156]	; (8008794 <vTaskSwitchContext+0xac>)
 80086f8:	2201      	movs	r2, #1
 80086fa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80086fc:	e041      	b.n	8008782 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80086fe:	4b25      	ldr	r3, [pc, #148]	; (8008794 <vTaskSwitchContext+0xac>)
 8008700:	2200      	movs	r2, #0
 8008702:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008704:	4b24      	ldr	r3, [pc, #144]	; (8008798 <vTaskSwitchContext+0xb0>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	60fb      	str	r3, [r7, #12]
 800870a:	e010      	b.n	800872e <vTaskSwitchContext+0x46>
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d10a      	bne.n	8008728 <vTaskSwitchContext+0x40>
	__asm volatile
 8008712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008716:	f383 8811 	msr	BASEPRI, r3
 800871a:	f3bf 8f6f 	isb	sy
 800871e:	f3bf 8f4f 	dsb	sy
 8008722:	607b      	str	r3, [r7, #4]
}
 8008724:	bf00      	nop
 8008726:	e7fe      	b.n	8008726 <vTaskSwitchContext+0x3e>
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	3b01      	subs	r3, #1
 800872c:	60fb      	str	r3, [r7, #12]
 800872e:	491b      	ldr	r1, [pc, #108]	; (800879c <vTaskSwitchContext+0xb4>)
 8008730:	68fa      	ldr	r2, [r7, #12]
 8008732:	4613      	mov	r3, r2
 8008734:	009b      	lsls	r3, r3, #2
 8008736:	4413      	add	r3, r2
 8008738:	009b      	lsls	r3, r3, #2
 800873a:	440b      	add	r3, r1
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d0e4      	beq.n	800870c <vTaskSwitchContext+0x24>
 8008742:	68fa      	ldr	r2, [r7, #12]
 8008744:	4613      	mov	r3, r2
 8008746:	009b      	lsls	r3, r3, #2
 8008748:	4413      	add	r3, r2
 800874a:	009b      	lsls	r3, r3, #2
 800874c:	4a13      	ldr	r2, [pc, #76]	; (800879c <vTaskSwitchContext+0xb4>)
 800874e:	4413      	add	r3, r2
 8008750:	60bb      	str	r3, [r7, #8]
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	685a      	ldr	r2, [r3, #4]
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	605a      	str	r2, [r3, #4]
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	685a      	ldr	r2, [r3, #4]
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	3308      	adds	r3, #8
 8008764:	429a      	cmp	r2, r3
 8008766:	d104      	bne.n	8008772 <vTaskSwitchContext+0x8a>
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	685a      	ldr	r2, [r3, #4]
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	605a      	str	r2, [r3, #4]
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	685b      	ldr	r3, [r3, #4]
 8008776:	68db      	ldr	r3, [r3, #12]
 8008778:	4a09      	ldr	r2, [pc, #36]	; (80087a0 <vTaskSwitchContext+0xb8>)
 800877a:	6013      	str	r3, [r2, #0]
 800877c:	4a06      	ldr	r2, [pc, #24]	; (8008798 <vTaskSwitchContext+0xb0>)
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	6013      	str	r3, [r2, #0]
}
 8008782:	bf00      	nop
 8008784:	3714      	adds	r7, #20
 8008786:	46bd      	mov	sp, r7
 8008788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878c:	4770      	bx	lr
 800878e:	bf00      	nop
 8008790:	20001430 	.word	0x20001430
 8008794:	2000141c 	.word	0x2000141c
 8008798:	20001410 	.word	0x20001410
 800879c:	20000f38 	.word	0x20000f38
 80087a0:	20000f34 	.word	0x20000f34

080087a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b084      	sub	sp, #16
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d10a      	bne.n	80087ca <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80087b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b8:	f383 8811 	msr	BASEPRI, r3
 80087bc:	f3bf 8f6f 	isb	sy
 80087c0:	f3bf 8f4f 	dsb	sy
 80087c4:	60fb      	str	r3, [r7, #12]
}
 80087c6:	bf00      	nop
 80087c8:	e7fe      	b.n	80087c8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80087ca:	4b07      	ldr	r3, [pc, #28]	; (80087e8 <vTaskPlaceOnEventList+0x44>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	3318      	adds	r3, #24
 80087d0:	4619      	mov	r1, r3
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f7fe fe87 	bl	80074e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80087d8:	2101      	movs	r1, #1
 80087da:	6838      	ldr	r0, [r7, #0]
 80087dc:	f000 fa7c 	bl	8008cd8 <prvAddCurrentTaskToDelayedList>
}
 80087e0:	bf00      	nop
 80087e2:	3710      	adds	r7, #16
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}
 80087e8:	20000f34 	.word	0x20000f34

080087ec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b086      	sub	sp, #24
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	60f8      	str	r0, [r7, #12]
 80087f4:	60b9      	str	r1, [r7, #8]
 80087f6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d10a      	bne.n	8008814 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80087fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008802:	f383 8811 	msr	BASEPRI, r3
 8008806:	f3bf 8f6f 	isb	sy
 800880a:	f3bf 8f4f 	dsb	sy
 800880e:	617b      	str	r3, [r7, #20]
}
 8008810:	bf00      	nop
 8008812:	e7fe      	b.n	8008812 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008814:	4b0a      	ldr	r3, [pc, #40]	; (8008840 <vTaskPlaceOnEventListRestricted+0x54>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	3318      	adds	r3, #24
 800881a:	4619      	mov	r1, r3
 800881c:	68f8      	ldr	r0, [r7, #12]
 800881e:	f7fe fe3e 	bl	800749e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d002      	beq.n	800882e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008828:	f04f 33ff 	mov.w	r3, #4294967295
 800882c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800882e:	6879      	ldr	r1, [r7, #4]
 8008830:	68b8      	ldr	r0, [r7, #8]
 8008832:	f000 fa51 	bl	8008cd8 <prvAddCurrentTaskToDelayedList>
	}
 8008836:	bf00      	nop
 8008838:	3718      	adds	r7, #24
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}
 800883e:	bf00      	nop
 8008840:	20000f34 	.word	0x20000f34

08008844 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b086      	sub	sp, #24
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	68db      	ldr	r3, [r3, #12]
 8008850:	68db      	ldr	r3, [r3, #12]
 8008852:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d10a      	bne.n	8008870 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800885a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800885e:	f383 8811 	msr	BASEPRI, r3
 8008862:	f3bf 8f6f 	isb	sy
 8008866:	f3bf 8f4f 	dsb	sy
 800886a:	60fb      	str	r3, [r7, #12]
}
 800886c:	bf00      	nop
 800886e:	e7fe      	b.n	800886e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	3318      	adds	r3, #24
 8008874:	4618      	mov	r0, r3
 8008876:	f7fe fe6f 	bl	8007558 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800887a:	4b1e      	ldr	r3, [pc, #120]	; (80088f4 <xTaskRemoveFromEventList+0xb0>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d11d      	bne.n	80088be <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	3304      	adds	r3, #4
 8008886:	4618      	mov	r0, r3
 8008888:	f7fe fe66 	bl	8007558 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008890:	4b19      	ldr	r3, [pc, #100]	; (80088f8 <xTaskRemoveFromEventList+0xb4>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	429a      	cmp	r2, r3
 8008896:	d903      	bls.n	80088a0 <xTaskRemoveFromEventList+0x5c>
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800889c:	4a16      	ldr	r2, [pc, #88]	; (80088f8 <xTaskRemoveFromEventList+0xb4>)
 800889e:	6013      	str	r3, [r2, #0]
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088a4:	4613      	mov	r3, r2
 80088a6:	009b      	lsls	r3, r3, #2
 80088a8:	4413      	add	r3, r2
 80088aa:	009b      	lsls	r3, r3, #2
 80088ac:	4a13      	ldr	r2, [pc, #76]	; (80088fc <xTaskRemoveFromEventList+0xb8>)
 80088ae:	441a      	add	r2, r3
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	3304      	adds	r3, #4
 80088b4:	4619      	mov	r1, r3
 80088b6:	4610      	mov	r0, r2
 80088b8:	f7fe fdf1 	bl	800749e <vListInsertEnd>
 80088bc:	e005      	b.n	80088ca <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	3318      	adds	r3, #24
 80088c2:	4619      	mov	r1, r3
 80088c4:	480e      	ldr	r0, [pc, #56]	; (8008900 <xTaskRemoveFromEventList+0xbc>)
 80088c6:	f7fe fdea 	bl	800749e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088ce:	4b0d      	ldr	r3, [pc, #52]	; (8008904 <xTaskRemoveFromEventList+0xc0>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d905      	bls.n	80088e4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80088d8:	2301      	movs	r3, #1
 80088da:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80088dc:	4b0a      	ldr	r3, [pc, #40]	; (8008908 <xTaskRemoveFromEventList+0xc4>)
 80088de:	2201      	movs	r2, #1
 80088e0:	601a      	str	r2, [r3, #0]
 80088e2:	e001      	b.n	80088e8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80088e4:	2300      	movs	r3, #0
 80088e6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80088e8:	697b      	ldr	r3, [r7, #20]
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3718      	adds	r7, #24
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}
 80088f2:	bf00      	nop
 80088f4:	20001430 	.word	0x20001430
 80088f8:	20001410 	.word	0x20001410
 80088fc:	20000f38 	.word	0x20000f38
 8008900:	200013c8 	.word	0x200013c8
 8008904:	20000f34 	.word	0x20000f34
 8008908:	2000141c 	.word	0x2000141c

0800890c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800890c:	b480      	push	{r7}
 800890e:	b083      	sub	sp, #12
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008914:	4b06      	ldr	r3, [pc, #24]	; (8008930 <vTaskInternalSetTimeOutState+0x24>)
 8008916:	681a      	ldr	r2, [r3, #0]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800891c:	4b05      	ldr	r3, [pc, #20]	; (8008934 <vTaskInternalSetTimeOutState+0x28>)
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	605a      	str	r2, [r3, #4]
}
 8008924:	bf00      	nop
 8008926:	370c      	adds	r7, #12
 8008928:	46bd      	mov	sp, r7
 800892a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892e:	4770      	bx	lr
 8008930:	20001420 	.word	0x20001420
 8008934:	2000140c 	.word	0x2000140c

08008938 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b088      	sub	sp, #32
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d10a      	bne.n	800895e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800894c:	f383 8811 	msr	BASEPRI, r3
 8008950:	f3bf 8f6f 	isb	sy
 8008954:	f3bf 8f4f 	dsb	sy
 8008958:	613b      	str	r3, [r7, #16]
}
 800895a:	bf00      	nop
 800895c:	e7fe      	b.n	800895c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d10a      	bne.n	800897a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008968:	f383 8811 	msr	BASEPRI, r3
 800896c:	f3bf 8f6f 	isb	sy
 8008970:	f3bf 8f4f 	dsb	sy
 8008974:	60fb      	str	r3, [r7, #12]
}
 8008976:	bf00      	nop
 8008978:	e7fe      	b.n	8008978 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800897a:	f000 fe7b 	bl	8009674 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800897e:	4b1d      	ldr	r3, [pc, #116]	; (80089f4 <xTaskCheckForTimeOut+0xbc>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	69ba      	ldr	r2, [r7, #24]
 800898a:	1ad3      	subs	r3, r2, r3
 800898c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008996:	d102      	bne.n	800899e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008998:	2300      	movs	r3, #0
 800899a:	61fb      	str	r3, [r7, #28]
 800899c:	e023      	b.n	80089e6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681a      	ldr	r2, [r3, #0]
 80089a2:	4b15      	ldr	r3, [pc, #84]	; (80089f8 <xTaskCheckForTimeOut+0xc0>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	429a      	cmp	r2, r3
 80089a8:	d007      	beq.n	80089ba <xTaskCheckForTimeOut+0x82>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	69ba      	ldr	r2, [r7, #24]
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d302      	bcc.n	80089ba <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80089b4:	2301      	movs	r3, #1
 80089b6:	61fb      	str	r3, [r7, #28]
 80089b8:	e015      	b.n	80089e6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	697a      	ldr	r2, [r7, #20]
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d20b      	bcs.n	80089dc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	681a      	ldr	r2, [r3, #0]
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	1ad2      	subs	r2, r2, r3
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f7ff ff9b 	bl	800890c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80089d6:	2300      	movs	r3, #0
 80089d8:	61fb      	str	r3, [r7, #28]
 80089da:	e004      	b.n	80089e6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	2200      	movs	r2, #0
 80089e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80089e2:	2301      	movs	r3, #1
 80089e4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80089e6:	f000 fe75 	bl	80096d4 <vPortExitCritical>

	return xReturn;
 80089ea:	69fb      	ldr	r3, [r7, #28]
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3720      	adds	r7, #32
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}
 80089f4:	2000140c 	.word	0x2000140c
 80089f8:	20001420 	.word	0x20001420

080089fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80089fc:	b480      	push	{r7}
 80089fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008a00:	4b03      	ldr	r3, [pc, #12]	; (8008a10 <vTaskMissedYield+0x14>)
 8008a02:	2201      	movs	r2, #1
 8008a04:	601a      	str	r2, [r3, #0]
}
 8008a06:	bf00      	nop
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr
 8008a10:	2000141c 	.word	0x2000141c

08008a14 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b082      	sub	sp, #8
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008a1c:	f000 f852 	bl	8008ac4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008a20:	4b06      	ldr	r3, [pc, #24]	; (8008a3c <prvIdleTask+0x28>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	d9f9      	bls.n	8008a1c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008a28:	4b05      	ldr	r3, [pc, #20]	; (8008a40 <prvIdleTask+0x2c>)
 8008a2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a2e:	601a      	str	r2, [r3, #0]
 8008a30:	f3bf 8f4f 	dsb	sy
 8008a34:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008a38:	e7f0      	b.n	8008a1c <prvIdleTask+0x8>
 8008a3a:	bf00      	nop
 8008a3c:	20000f38 	.word	0x20000f38
 8008a40:	e000ed04 	.word	0xe000ed04

08008a44 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b082      	sub	sp, #8
 8008a48:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	607b      	str	r3, [r7, #4]
 8008a4e:	e00c      	b.n	8008a6a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008a50:	687a      	ldr	r2, [r7, #4]
 8008a52:	4613      	mov	r3, r2
 8008a54:	009b      	lsls	r3, r3, #2
 8008a56:	4413      	add	r3, r2
 8008a58:	009b      	lsls	r3, r3, #2
 8008a5a:	4a12      	ldr	r2, [pc, #72]	; (8008aa4 <prvInitialiseTaskLists+0x60>)
 8008a5c:	4413      	add	r3, r2
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f7fe fcf0 	bl	8007444 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	3301      	adds	r3, #1
 8008a68:	607b      	str	r3, [r7, #4]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2b37      	cmp	r3, #55	; 0x37
 8008a6e:	d9ef      	bls.n	8008a50 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008a70:	480d      	ldr	r0, [pc, #52]	; (8008aa8 <prvInitialiseTaskLists+0x64>)
 8008a72:	f7fe fce7 	bl	8007444 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008a76:	480d      	ldr	r0, [pc, #52]	; (8008aac <prvInitialiseTaskLists+0x68>)
 8008a78:	f7fe fce4 	bl	8007444 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008a7c:	480c      	ldr	r0, [pc, #48]	; (8008ab0 <prvInitialiseTaskLists+0x6c>)
 8008a7e:	f7fe fce1 	bl	8007444 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008a82:	480c      	ldr	r0, [pc, #48]	; (8008ab4 <prvInitialiseTaskLists+0x70>)
 8008a84:	f7fe fcde 	bl	8007444 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008a88:	480b      	ldr	r0, [pc, #44]	; (8008ab8 <prvInitialiseTaskLists+0x74>)
 8008a8a:	f7fe fcdb 	bl	8007444 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008a8e:	4b0b      	ldr	r3, [pc, #44]	; (8008abc <prvInitialiseTaskLists+0x78>)
 8008a90:	4a05      	ldr	r2, [pc, #20]	; (8008aa8 <prvInitialiseTaskLists+0x64>)
 8008a92:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008a94:	4b0a      	ldr	r3, [pc, #40]	; (8008ac0 <prvInitialiseTaskLists+0x7c>)
 8008a96:	4a05      	ldr	r2, [pc, #20]	; (8008aac <prvInitialiseTaskLists+0x68>)
 8008a98:	601a      	str	r2, [r3, #0]
}
 8008a9a:	bf00      	nop
 8008a9c:	3708      	adds	r7, #8
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}
 8008aa2:	bf00      	nop
 8008aa4:	20000f38 	.word	0x20000f38
 8008aa8:	20001398 	.word	0x20001398
 8008aac:	200013ac 	.word	0x200013ac
 8008ab0:	200013c8 	.word	0x200013c8
 8008ab4:	200013dc 	.word	0x200013dc
 8008ab8:	200013f4 	.word	0x200013f4
 8008abc:	200013c0 	.word	0x200013c0
 8008ac0:	200013c4 	.word	0x200013c4

08008ac4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b082      	sub	sp, #8
 8008ac8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008aca:	e019      	b.n	8008b00 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008acc:	f000 fdd2 	bl	8009674 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ad0:	4b10      	ldr	r3, [pc, #64]	; (8008b14 <prvCheckTasksWaitingTermination+0x50>)
 8008ad2:	68db      	ldr	r3, [r3, #12]
 8008ad4:	68db      	ldr	r3, [r3, #12]
 8008ad6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	3304      	adds	r3, #4
 8008adc:	4618      	mov	r0, r3
 8008ade:	f7fe fd3b 	bl	8007558 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008ae2:	4b0d      	ldr	r3, [pc, #52]	; (8008b18 <prvCheckTasksWaitingTermination+0x54>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	3b01      	subs	r3, #1
 8008ae8:	4a0b      	ldr	r2, [pc, #44]	; (8008b18 <prvCheckTasksWaitingTermination+0x54>)
 8008aea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008aec:	4b0b      	ldr	r3, [pc, #44]	; (8008b1c <prvCheckTasksWaitingTermination+0x58>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	3b01      	subs	r3, #1
 8008af2:	4a0a      	ldr	r2, [pc, #40]	; (8008b1c <prvCheckTasksWaitingTermination+0x58>)
 8008af4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008af6:	f000 fded 	bl	80096d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f000 f810 	bl	8008b20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b00:	4b06      	ldr	r3, [pc, #24]	; (8008b1c <prvCheckTasksWaitingTermination+0x58>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d1e1      	bne.n	8008acc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008b08:	bf00      	nop
 8008b0a:	bf00      	nop
 8008b0c:	3708      	adds	r7, #8
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}
 8008b12:	bf00      	nop
 8008b14:	200013dc 	.word	0x200013dc
 8008b18:	20001408 	.word	0x20001408
 8008b1c:	200013f0 	.word	0x200013f0

08008b20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b084      	sub	sp, #16
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d108      	bne.n	8008b44 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b36:	4618      	mov	r0, r3
 8008b38:	f000 ff8a 	bl	8009a50 <vPortFree>
				vPortFree( pxTCB );
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f000 ff87 	bl	8009a50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008b42:	e018      	b.n	8008b76 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008b4a:	2b01      	cmp	r3, #1
 8008b4c:	d103      	bne.n	8008b56 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f000 ff7e 	bl	8009a50 <vPortFree>
	}
 8008b54:	e00f      	b.n	8008b76 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008b5c:	2b02      	cmp	r3, #2
 8008b5e:	d00a      	beq.n	8008b76 <prvDeleteTCB+0x56>
	__asm volatile
 8008b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b64:	f383 8811 	msr	BASEPRI, r3
 8008b68:	f3bf 8f6f 	isb	sy
 8008b6c:	f3bf 8f4f 	dsb	sy
 8008b70:	60fb      	str	r3, [r7, #12]
}
 8008b72:	bf00      	nop
 8008b74:	e7fe      	b.n	8008b74 <prvDeleteTCB+0x54>
	}
 8008b76:	bf00      	nop
 8008b78:	3710      	adds	r7, #16
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}
	...

08008b80 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008b80:	b480      	push	{r7}
 8008b82:	b083      	sub	sp, #12
 8008b84:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b86:	4b0c      	ldr	r3, [pc, #48]	; (8008bb8 <prvResetNextTaskUnblockTime+0x38>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d104      	bne.n	8008b9a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008b90:	4b0a      	ldr	r3, [pc, #40]	; (8008bbc <prvResetNextTaskUnblockTime+0x3c>)
 8008b92:	f04f 32ff 	mov.w	r2, #4294967295
 8008b96:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008b98:	e008      	b.n	8008bac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b9a:	4b07      	ldr	r3, [pc, #28]	; (8008bb8 <prvResetNextTaskUnblockTime+0x38>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	68db      	ldr	r3, [r3, #12]
 8008ba0:	68db      	ldr	r3, [r3, #12]
 8008ba2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	4a04      	ldr	r2, [pc, #16]	; (8008bbc <prvResetNextTaskUnblockTime+0x3c>)
 8008baa:	6013      	str	r3, [r2, #0]
}
 8008bac:	bf00      	nop
 8008bae:	370c      	adds	r7, #12
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb6:	4770      	bx	lr
 8008bb8:	200013c0 	.word	0x200013c0
 8008bbc:	20001428 	.word	0x20001428

08008bc0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b083      	sub	sp, #12
 8008bc4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008bc6:	4b0b      	ldr	r3, [pc, #44]	; (8008bf4 <xTaskGetSchedulerState+0x34>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d102      	bne.n	8008bd4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008bce:	2301      	movs	r3, #1
 8008bd0:	607b      	str	r3, [r7, #4]
 8008bd2:	e008      	b.n	8008be6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008bd4:	4b08      	ldr	r3, [pc, #32]	; (8008bf8 <xTaskGetSchedulerState+0x38>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d102      	bne.n	8008be2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008bdc:	2302      	movs	r3, #2
 8008bde:	607b      	str	r3, [r7, #4]
 8008be0:	e001      	b.n	8008be6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008be2:	2300      	movs	r3, #0
 8008be4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008be6:	687b      	ldr	r3, [r7, #4]
	}
 8008be8:	4618      	mov	r0, r3
 8008bea:	370c      	adds	r7, #12
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr
 8008bf4:	20001414 	.word	0x20001414
 8008bf8:	20001430 	.word	0x20001430

08008bfc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b086      	sub	sp, #24
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d056      	beq.n	8008cc0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008c12:	4b2e      	ldr	r3, [pc, #184]	; (8008ccc <xTaskPriorityDisinherit+0xd0>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	693a      	ldr	r2, [r7, #16]
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d00a      	beq.n	8008c32 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c20:	f383 8811 	msr	BASEPRI, r3
 8008c24:	f3bf 8f6f 	isb	sy
 8008c28:	f3bf 8f4f 	dsb	sy
 8008c2c:	60fb      	str	r3, [r7, #12]
}
 8008c2e:	bf00      	nop
 8008c30:	e7fe      	b.n	8008c30 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d10a      	bne.n	8008c50 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c3e:	f383 8811 	msr	BASEPRI, r3
 8008c42:	f3bf 8f6f 	isb	sy
 8008c46:	f3bf 8f4f 	dsb	sy
 8008c4a:	60bb      	str	r3, [r7, #8]
}
 8008c4c:	bf00      	nop
 8008c4e:	e7fe      	b.n	8008c4e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c54:	1e5a      	subs	r2, r3, #1
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d02c      	beq.n	8008cc0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d128      	bne.n	8008cc0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	3304      	adds	r3, #4
 8008c72:	4618      	mov	r0, r3
 8008c74:	f7fe fc70 	bl	8007558 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c84:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c90:	4b0f      	ldr	r3, [pc, #60]	; (8008cd0 <xTaskPriorityDisinherit+0xd4>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d903      	bls.n	8008ca0 <xTaskPriorityDisinherit+0xa4>
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c9c:	4a0c      	ldr	r2, [pc, #48]	; (8008cd0 <xTaskPriorityDisinherit+0xd4>)
 8008c9e:	6013      	str	r3, [r2, #0]
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ca4:	4613      	mov	r3, r2
 8008ca6:	009b      	lsls	r3, r3, #2
 8008ca8:	4413      	add	r3, r2
 8008caa:	009b      	lsls	r3, r3, #2
 8008cac:	4a09      	ldr	r2, [pc, #36]	; (8008cd4 <xTaskPriorityDisinherit+0xd8>)
 8008cae:	441a      	add	r2, r3
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	3304      	adds	r3, #4
 8008cb4:	4619      	mov	r1, r3
 8008cb6:	4610      	mov	r0, r2
 8008cb8:	f7fe fbf1 	bl	800749e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008cc0:	697b      	ldr	r3, [r7, #20]
	}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3718      	adds	r7, #24
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}
 8008cca:	bf00      	nop
 8008ccc:	20000f34 	.word	0x20000f34
 8008cd0:	20001410 	.word	0x20001410
 8008cd4:	20000f38 	.word	0x20000f38

08008cd8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b084      	sub	sp, #16
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008ce2:	4b21      	ldr	r3, [pc, #132]	; (8008d68 <prvAddCurrentTaskToDelayedList+0x90>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ce8:	4b20      	ldr	r3, [pc, #128]	; (8008d6c <prvAddCurrentTaskToDelayedList+0x94>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	3304      	adds	r3, #4
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f7fe fc32 	bl	8007558 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cfa:	d10a      	bne.n	8008d12 <prvAddCurrentTaskToDelayedList+0x3a>
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d007      	beq.n	8008d12 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d02:	4b1a      	ldr	r3, [pc, #104]	; (8008d6c <prvAddCurrentTaskToDelayedList+0x94>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	3304      	adds	r3, #4
 8008d08:	4619      	mov	r1, r3
 8008d0a:	4819      	ldr	r0, [pc, #100]	; (8008d70 <prvAddCurrentTaskToDelayedList+0x98>)
 8008d0c:	f7fe fbc7 	bl	800749e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008d10:	e026      	b.n	8008d60 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008d12:	68fa      	ldr	r2, [r7, #12]
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	4413      	add	r3, r2
 8008d18:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008d1a:	4b14      	ldr	r3, [pc, #80]	; (8008d6c <prvAddCurrentTaskToDelayedList+0x94>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	68ba      	ldr	r2, [r7, #8]
 8008d20:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008d22:	68ba      	ldr	r2, [r7, #8]
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	429a      	cmp	r2, r3
 8008d28:	d209      	bcs.n	8008d3e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d2a:	4b12      	ldr	r3, [pc, #72]	; (8008d74 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008d2c:	681a      	ldr	r2, [r3, #0]
 8008d2e:	4b0f      	ldr	r3, [pc, #60]	; (8008d6c <prvAddCurrentTaskToDelayedList+0x94>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	3304      	adds	r3, #4
 8008d34:	4619      	mov	r1, r3
 8008d36:	4610      	mov	r0, r2
 8008d38:	f7fe fbd5 	bl	80074e6 <vListInsert>
}
 8008d3c:	e010      	b.n	8008d60 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d3e:	4b0e      	ldr	r3, [pc, #56]	; (8008d78 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008d40:	681a      	ldr	r2, [r3, #0]
 8008d42:	4b0a      	ldr	r3, [pc, #40]	; (8008d6c <prvAddCurrentTaskToDelayedList+0x94>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	3304      	adds	r3, #4
 8008d48:	4619      	mov	r1, r3
 8008d4a:	4610      	mov	r0, r2
 8008d4c:	f7fe fbcb 	bl	80074e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008d50:	4b0a      	ldr	r3, [pc, #40]	; (8008d7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	68ba      	ldr	r2, [r7, #8]
 8008d56:	429a      	cmp	r2, r3
 8008d58:	d202      	bcs.n	8008d60 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008d5a:	4a08      	ldr	r2, [pc, #32]	; (8008d7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	6013      	str	r3, [r2, #0]
}
 8008d60:	bf00      	nop
 8008d62:	3710      	adds	r7, #16
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}
 8008d68:	2000140c 	.word	0x2000140c
 8008d6c:	20000f34 	.word	0x20000f34
 8008d70:	200013f4 	.word	0x200013f4
 8008d74:	200013c4 	.word	0x200013c4
 8008d78:	200013c0 	.word	0x200013c0
 8008d7c:	20001428 	.word	0x20001428

08008d80 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b08a      	sub	sp, #40	; 0x28
 8008d84:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008d86:	2300      	movs	r3, #0
 8008d88:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008d8a:	f000 fb07 	bl	800939c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008d8e:	4b1c      	ldr	r3, [pc, #112]	; (8008e00 <xTimerCreateTimerTask+0x80>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d021      	beq.n	8008dda <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008d96:	2300      	movs	r3, #0
 8008d98:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008d9e:	1d3a      	adds	r2, r7, #4
 8008da0:	f107 0108 	add.w	r1, r7, #8
 8008da4:	f107 030c 	add.w	r3, r7, #12
 8008da8:	4618      	mov	r0, r3
 8008daa:	f7fe fb31 	bl	8007410 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008dae:	6879      	ldr	r1, [r7, #4]
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	68fa      	ldr	r2, [r7, #12]
 8008db4:	9202      	str	r2, [sp, #8]
 8008db6:	9301      	str	r3, [sp, #4]
 8008db8:	2302      	movs	r3, #2
 8008dba:	9300      	str	r3, [sp, #0]
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	460a      	mov	r2, r1
 8008dc0:	4910      	ldr	r1, [pc, #64]	; (8008e04 <xTimerCreateTimerTask+0x84>)
 8008dc2:	4811      	ldr	r0, [pc, #68]	; (8008e08 <xTimerCreateTimerTask+0x88>)
 8008dc4:	f7ff f8de 	bl	8007f84 <xTaskCreateStatic>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	4a10      	ldr	r2, [pc, #64]	; (8008e0c <xTimerCreateTimerTask+0x8c>)
 8008dcc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008dce:	4b0f      	ldr	r3, [pc, #60]	; (8008e0c <xTimerCreateTimerTask+0x8c>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d001      	beq.n	8008dda <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d10a      	bne.n	8008df6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de4:	f383 8811 	msr	BASEPRI, r3
 8008de8:	f3bf 8f6f 	isb	sy
 8008dec:	f3bf 8f4f 	dsb	sy
 8008df0:	613b      	str	r3, [r7, #16]
}
 8008df2:	bf00      	nop
 8008df4:	e7fe      	b.n	8008df4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008df6:	697b      	ldr	r3, [r7, #20]
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3718      	adds	r7, #24
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}
 8008e00:	20001464 	.word	0x20001464
 8008e04:	0800bec4 	.word	0x0800bec4
 8008e08:	08008f45 	.word	0x08008f45
 8008e0c:	20001468 	.word	0x20001468

08008e10 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b08a      	sub	sp, #40	; 0x28
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	60f8      	str	r0, [r7, #12]
 8008e18:	60b9      	str	r1, [r7, #8]
 8008e1a:	607a      	str	r2, [r7, #4]
 8008e1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d10a      	bne.n	8008e3e <xTimerGenericCommand+0x2e>
	__asm volatile
 8008e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e2c:	f383 8811 	msr	BASEPRI, r3
 8008e30:	f3bf 8f6f 	isb	sy
 8008e34:	f3bf 8f4f 	dsb	sy
 8008e38:	623b      	str	r3, [r7, #32]
}
 8008e3a:	bf00      	nop
 8008e3c:	e7fe      	b.n	8008e3c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008e3e:	4b1a      	ldr	r3, [pc, #104]	; (8008ea8 <xTimerGenericCommand+0x98>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d02a      	beq.n	8008e9c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	2b05      	cmp	r3, #5
 8008e56:	dc18      	bgt.n	8008e8a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008e58:	f7ff feb2 	bl	8008bc0 <xTaskGetSchedulerState>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	2b02      	cmp	r3, #2
 8008e60:	d109      	bne.n	8008e76 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008e62:	4b11      	ldr	r3, [pc, #68]	; (8008ea8 <xTimerGenericCommand+0x98>)
 8008e64:	6818      	ldr	r0, [r3, #0]
 8008e66:	f107 0110 	add.w	r1, r7, #16
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e6e:	f7fe fca1 	bl	80077b4 <xQueueGenericSend>
 8008e72:	6278      	str	r0, [r7, #36]	; 0x24
 8008e74:	e012      	b.n	8008e9c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008e76:	4b0c      	ldr	r3, [pc, #48]	; (8008ea8 <xTimerGenericCommand+0x98>)
 8008e78:	6818      	ldr	r0, [r3, #0]
 8008e7a:	f107 0110 	add.w	r1, r7, #16
 8008e7e:	2300      	movs	r3, #0
 8008e80:	2200      	movs	r2, #0
 8008e82:	f7fe fc97 	bl	80077b4 <xQueueGenericSend>
 8008e86:	6278      	str	r0, [r7, #36]	; 0x24
 8008e88:	e008      	b.n	8008e9c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008e8a:	4b07      	ldr	r3, [pc, #28]	; (8008ea8 <xTimerGenericCommand+0x98>)
 8008e8c:	6818      	ldr	r0, [r3, #0]
 8008e8e:	f107 0110 	add.w	r1, r7, #16
 8008e92:	2300      	movs	r3, #0
 8008e94:	683a      	ldr	r2, [r7, #0]
 8008e96:	f7fe fd8b 	bl	80079b0 <xQueueGenericSendFromISR>
 8008e9a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3728      	adds	r7, #40	; 0x28
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
 8008ea6:	bf00      	nop
 8008ea8:	20001464 	.word	0x20001464

08008eac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b088      	sub	sp, #32
 8008eb0:	af02      	add	r7, sp, #8
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008eb6:	4b22      	ldr	r3, [pc, #136]	; (8008f40 <prvProcessExpiredTimer+0x94>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	68db      	ldr	r3, [r3, #12]
 8008ebc:	68db      	ldr	r3, [r3, #12]
 8008ebe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	3304      	adds	r3, #4
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f7fe fb47 	bl	8007558 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ed0:	f003 0304 	and.w	r3, r3, #4
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d022      	beq.n	8008f1e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	699a      	ldr	r2, [r3, #24]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	18d1      	adds	r1, r2, r3
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	683a      	ldr	r2, [r7, #0]
 8008ee4:	6978      	ldr	r0, [r7, #20]
 8008ee6:	f000 f8d1 	bl	800908c <prvInsertTimerInActiveList>
 8008eea:	4603      	mov	r3, r0
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d01f      	beq.n	8008f30 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	9300      	str	r3, [sp, #0]
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	687a      	ldr	r2, [r7, #4]
 8008ef8:	2100      	movs	r1, #0
 8008efa:	6978      	ldr	r0, [r7, #20]
 8008efc:	f7ff ff88 	bl	8008e10 <xTimerGenericCommand>
 8008f00:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d113      	bne.n	8008f30 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f0c:	f383 8811 	msr	BASEPRI, r3
 8008f10:	f3bf 8f6f 	isb	sy
 8008f14:	f3bf 8f4f 	dsb	sy
 8008f18:	60fb      	str	r3, [r7, #12]
}
 8008f1a:	bf00      	nop
 8008f1c:	e7fe      	b.n	8008f1c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f24:	f023 0301 	bic.w	r3, r3, #1
 8008f28:	b2da      	uxtb	r2, r3
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	6a1b      	ldr	r3, [r3, #32]
 8008f34:	6978      	ldr	r0, [r7, #20]
 8008f36:	4798      	blx	r3
}
 8008f38:	bf00      	nop
 8008f3a:	3718      	adds	r7, #24
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}
 8008f40:	2000145c 	.word	0x2000145c

08008f44 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b084      	sub	sp, #16
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008f4c:	f107 0308 	add.w	r3, r7, #8
 8008f50:	4618      	mov	r0, r3
 8008f52:	f000 f857 	bl	8009004 <prvGetNextExpireTime>
 8008f56:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	4619      	mov	r1, r3
 8008f5c:	68f8      	ldr	r0, [r7, #12]
 8008f5e:	f000 f803 	bl	8008f68 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008f62:	f000 f8d5 	bl	8009110 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008f66:	e7f1      	b.n	8008f4c <prvTimerTask+0x8>

08008f68 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b084      	sub	sp, #16
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
 8008f70:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008f72:	f7ff fa43 	bl	80083fc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008f76:	f107 0308 	add.w	r3, r7, #8
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f000 f866 	bl	800904c <prvSampleTimeNow>
 8008f80:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d130      	bne.n	8008fea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d10a      	bne.n	8008fa4 <prvProcessTimerOrBlockTask+0x3c>
 8008f8e:	687a      	ldr	r2, [r7, #4]
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	429a      	cmp	r2, r3
 8008f94:	d806      	bhi.n	8008fa4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008f96:	f7ff fa3f 	bl	8008418 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008f9a:	68f9      	ldr	r1, [r7, #12]
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f7ff ff85 	bl	8008eac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008fa2:	e024      	b.n	8008fee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d008      	beq.n	8008fbc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008faa:	4b13      	ldr	r3, [pc, #76]	; (8008ff8 <prvProcessTimerOrBlockTask+0x90>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d101      	bne.n	8008fb8 <prvProcessTimerOrBlockTask+0x50>
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	e000      	b.n	8008fba <prvProcessTimerOrBlockTask+0x52>
 8008fb8:	2300      	movs	r3, #0
 8008fba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008fbc:	4b0f      	ldr	r3, [pc, #60]	; (8008ffc <prvProcessTimerOrBlockTask+0x94>)
 8008fbe:	6818      	ldr	r0, [r3, #0]
 8008fc0:	687a      	ldr	r2, [r7, #4]
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	1ad3      	subs	r3, r2, r3
 8008fc6:	683a      	ldr	r2, [r7, #0]
 8008fc8:	4619      	mov	r1, r3
 8008fca:	f7fe ffa7 	bl	8007f1c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008fce:	f7ff fa23 	bl	8008418 <xTaskResumeAll>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d10a      	bne.n	8008fee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008fd8:	4b09      	ldr	r3, [pc, #36]	; (8009000 <prvProcessTimerOrBlockTask+0x98>)
 8008fda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fde:	601a      	str	r2, [r3, #0]
 8008fe0:	f3bf 8f4f 	dsb	sy
 8008fe4:	f3bf 8f6f 	isb	sy
}
 8008fe8:	e001      	b.n	8008fee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008fea:	f7ff fa15 	bl	8008418 <xTaskResumeAll>
}
 8008fee:	bf00      	nop
 8008ff0:	3710      	adds	r7, #16
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}
 8008ff6:	bf00      	nop
 8008ff8:	20001460 	.word	0x20001460
 8008ffc:	20001464 	.word	0x20001464
 8009000:	e000ed04 	.word	0xe000ed04

08009004 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009004:	b480      	push	{r7}
 8009006:	b085      	sub	sp, #20
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800900c:	4b0e      	ldr	r3, [pc, #56]	; (8009048 <prvGetNextExpireTime+0x44>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d101      	bne.n	800901a <prvGetNextExpireTime+0x16>
 8009016:	2201      	movs	r2, #1
 8009018:	e000      	b.n	800901c <prvGetNextExpireTime+0x18>
 800901a:	2200      	movs	r2, #0
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d105      	bne.n	8009034 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009028:	4b07      	ldr	r3, [pc, #28]	; (8009048 <prvGetNextExpireTime+0x44>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	68db      	ldr	r3, [r3, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	60fb      	str	r3, [r7, #12]
 8009032:	e001      	b.n	8009038 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009034:	2300      	movs	r3, #0
 8009036:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009038:	68fb      	ldr	r3, [r7, #12]
}
 800903a:	4618      	mov	r0, r3
 800903c:	3714      	adds	r7, #20
 800903e:	46bd      	mov	sp, r7
 8009040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009044:	4770      	bx	lr
 8009046:	bf00      	nop
 8009048:	2000145c 	.word	0x2000145c

0800904c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b084      	sub	sp, #16
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009054:	f7ff fa7e 	bl	8008554 <xTaskGetTickCount>
 8009058:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800905a:	4b0b      	ldr	r3, [pc, #44]	; (8009088 <prvSampleTimeNow+0x3c>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	68fa      	ldr	r2, [r7, #12]
 8009060:	429a      	cmp	r2, r3
 8009062:	d205      	bcs.n	8009070 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009064:	f000 f936 	bl	80092d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2201      	movs	r2, #1
 800906c:	601a      	str	r2, [r3, #0]
 800906e:	e002      	b.n	8009076 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2200      	movs	r2, #0
 8009074:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009076:	4a04      	ldr	r2, [pc, #16]	; (8009088 <prvSampleTimeNow+0x3c>)
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800907c:	68fb      	ldr	r3, [r7, #12]
}
 800907e:	4618      	mov	r0, r3
 8009080:	3710      	adds	r7, #16
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}
 8009086:	bf00      	nop
 8009088:	2000146c 	.word	0x2000146c

0800908c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b086      	sub	sp, #24
 8009090:	af00      	add	r7, sp, #0
 8009092:	60f8      	str	r0, [r7, #12]
 8009094:	60b9      	str	r1, [r7, #8]
 8009096:	607a      	str	r2, [r7, #4]
 8009098:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800909a:	2300      	movs	r3, #0
 800909c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	68ba      	ldr	r2, [r7, #8]
 80090a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	68fa      	ldr	r2, [r7, #12]
 80090a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80090aa:	68ba      	ldr	r2, [r7, #8]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d812      	bhi.n	80090d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090b2:	687a      	ldr	r2, [r7, #4]
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	1ad2      	subs	r2, r2, r3
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	699b      	ldr	r3, [r3, #24]
 80090bc:	429a      	cmp	r2, r3
 80090be:	d302      	bcc.n	80090c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80090c0:	2301      	movs	r3, #1
 80090c2:	617b      	str	r3, [r7, #20]
 80090c4:	e01b      	b.n	80090fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80090c6:	4b10      	ldr	r3, [pc, #64]	; (8009108 <prvInsertTimerInActiveList+0x7c>)
 80090c8:	681a      	ldr	r2, [r3, #0]
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	3304      	adds	r3, #4
 80090ce:	4619      	mov	r1, r3
 80090d0:	4610      	mov	r0, r2
 80090d2:	f7fe fa08 	bl	80074e6 <vListInsert>
 80090d6:	e012      	b.n	80090fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80090d8:	687a      	ldr	r2, [r7, #4]
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	429a      	cmp	r2, r3
 80090de:	d206      	bcs.n	80090ee <prvInsertTimerInActiveList+0x62>
 80090e0:	68ba      	ldr	r2, [r7, #8]
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	429a      	cmp	r2, r3
 80090e6:	d302      	bcc.n	80090ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80090e8:	2301      	movs	r3, #1
 80090ea:	617b      	str	r3, [r7, #20]
 80090ec:	e007      	b.n	80090fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80090ee:	4b07      	ldr	r3, [pc, #28]	; (800910c <prvInsertTimerInActiveList+0x80>)
 80090f0:	681a      	ldr	r2, [r3, #0]
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	3304      	adds	r3, #4
 80090f6:	4619      	mov	r1, r3
 80090f8:	4610      	mov	r0, r2
 80090fa:	f7fe f9f4 	bl	80074e6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80090fe:	697b      	ldr	r3, [r7, #20]
}
 8009100:	4618      	mov	r0, r3
 8009102:	3718      	adds	r7, #24
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}
 8009108:	20001460 	.word	0x20001460
 800910c:	2000145c 	.word	0x2000145c

08009110 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b08e      	sub	sp, #56	; 0x38
 8009114:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009116:	e0ca      	b.n	80092ae <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2b00      	cmp	r3, #0
 800911c:	da18      	bge.n	8009150 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800911e:	1d3b      	adds	r3, r7, #4
 8009120:	3304      	adds	r3, #4
 8009122:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009126:	2b00      	cmp	r3, #0
 8009128:	d10a      	bne.n	8009140 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800912a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800912e:	f383 8811 	msr	BASEPRI, r3
 8009132:	f3bf 8f6f 	isb	sy
 8009136:	f3bf 8f4f 	dsb	sy
 800913a:	61fb      	str	r3, [r7, #28]
}
 800913c:	bf00      	nop
 800913e:	e7fe      	b.n	800913e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009146:	6850      	ldr	r0, [r2, #4]
 8009148:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800914a:	6892      	ldr	r2, [r2, #8]
 800914c:	4611      	mov	r1, r2
 800914e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2b00      	cmp	r3, #0
 8009154:	f2c0 80aa 	blt.w	80092ac <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800915c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800915e:	695b      	ldr	r3, [r3, #20]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d004      	beq.n	800916e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009166:	3304      	adds	r3, #4
 8009168:	4618      	mov	r0, r3
 800916a:	f7fe f9f5 	bl	8007558 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800916e:	463b      	mov	r3, r7
 8009170:	4618      	mov	r0, r3
 8009172:	f7ff ff6b 	bl	800904c <prvSampleTimeNow>
 8009176:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2b09      	cmp	r3, #9
 800917c:	f200 8097 	bhi.w	80092ae <prvProcessReceivedCommands+0x19e>
 8009180:	a201      	add	r2, pc, #4	; (adr r2, 8009188 <prvProcessReceivedCommands+0x78>)
 8009182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009186:	bf00      	nop
 8009188:	080091b1 	.word	0x080091b1
 800918c:	080091b1 	.word	0x080091b1
 8009190:	080091b1 	.word	0x080091b1
 8009194:	08009225 	.word	0x08009225
 8009198:	08009239 	.word	0x08009239
 800919c:	08009283 	.word	0x08009283
 80091a0:	080091b1 	.word	0x080091b1
 80091a4:	080091b1 	.word	0x080091b1
 80091a8:	08009225 	.word	0x08009225
 80091ac:	08009239 	.word	0x08009239
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80091b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80091b6:	f043 0301 	orr.w	r3, r3, #1
 80091ba:	b2da      	uxtb	r2, r3
 80091bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80091c2:	68ba      	ldr	r2, [r7, #8]
 80091c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c6:	699b      	ldr	r3, [r3, #24]
 80091c8:	18d1      	adds	r1, r2, r3
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091d0:	f7ff ff5c 	bl	800908c <prvInsertTimerInActiveList>
 80091d4:	4603      	mov	r3, r0
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d069      	beq.n	80092ae <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80091da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091dc:	6a1b      	ldr	r3, [r3, #32]
 80091de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091e0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80091e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80091e8:	f003 0304 	and.w	r3, r3, #4
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d05e      	beq.n	80092ae <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80091f0:	68ba      	ldr	r2, [r7, #8]
 80091f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091f4:	699b      	ldr	r3, [r3, #24]
 80091f6:	441a      	add	r2, r3
 80091f8:	2300      	movs	r3, #0
 80091fa:	9300      	str	r3, [sp, #0]
 80091fc:	2300      	movs	r3, #0
 80091fe:	2100      	movs	r1, #0
 8009200:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009202:	f7ff fe05 	bl	8008e10 <xTimerGenericCommand>
 8009206:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009208:	6a3b      	ldr	r3, [r7, #32]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d14f      	bne.n	80092ae <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800920e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009212:	f383 8811 	msr	BASEPRI, r3
 8009216:	f3bf 8f6f 	isb	sy
 800921a:	f3bf 8f4f 	dsb	sy
 800921e:	61bb      	str	r3, [r7, #24]
}
 8009220:	bf00      	nop
 8009222:	e7fe      	b.n	8009222 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009226:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800922a:	f023 0301 	bic.w	r3, r3, #1
 800922e:	b2da      	uxtb	r2, r3
 8009230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009232:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009236:	e03a      	b.n	80092ae <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800923a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800923e:	f043 0301 	orr.w	r3, r3, #1
 8009242:	b2da      	uxtb	r2, r3
 8009244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009246:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800924a:	68ba      	ldr	r2, [r7, #8]
 800924c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800924e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009252:	699b      	ldr	r3, [r3, #24]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d10a      	bne.n	800926e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800925c:	f383 8811 	msr	BASEPRI, r3
 8009260:	f3bf 8f6f 	isb	sy
 8009264:	f3bf 8f4f 	dsb	sy
 8009268:	617b      	str	r3, [r7, #20]
}
 800926a:	bf00      	nop
 800926c:	e7fe      	b.n	800926c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800926e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009270:	699a      	ldr	r2, [r3, #24]
 8009272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009274:	18d1      	adds	r1, r2, r3
 8009276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800927a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800927c:	f7ff ff06 	bl	800908c <prvInsertTimerInActiveList>
					break;
 8009280:	e015      	b.n	80092ae <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009284:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009288:	f003 0302 	and.w	r3, r3, #2
 800928c:	2b00      	cmp	r3, #0
 800928e:	d103      	bne.n	8009298 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009290:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009292:	f000 fbdd 	bl	8009a50 <vPortFree>
 8009296:	e00a      	b.n	80092ae <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800929a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800929e:	f023 0301 	bic.w	r3, r3, #1
 80092a2:	b2da      	uxtb	r2, r3
 80092a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80092aa:	e000      	b.n	80092ae <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80092ac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80092ae:	4b08      	ldr	r3, [pc, #32]	; (80092d0 <prvProcessReceivedCommands+0x1c0>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	1d39      	adds	r1, r7, #4
 80092b4:	2200      	movs	r2, #0
 80092b6:	4618      	mov	r0, r3
 80092b8:	f7fe fc16 	bl	8007ae8 <xQueueReceive>
 80092bc:	4603      	mov	r3, r0
 80092be:	2b00      	cmp	r3, #0
 80092c0:	f47f af2a 	bne.w	8009118 <prvProcessReceivedCommands+0x8>
	}
}
 80092c4:	bf00      	nop
 80092c6:	bf00      	nop
 80092c8:	3730      	adds	r7, #48	; 0x30
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}
 80092ce:	bf00      	nop
 80092d0:	20001464 	.word	0x20001464

080092d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b088      	sub	sp, #32
 80092d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80092da:	e048      	b.n	800936e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80092dc:	4b2d      	ldr	r3, [pc, #180]	; (8009394 <prvSwitchTimerLists+0xc0>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	68db      	ldr	r3, [r3, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092e6:	4b2b      	ldr	r3, [pc, #172]	; (8009394 <prvSwitchTimerLists+0xc0>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	68db      	ldr	r3, [r3, #12]
 80092ec:	68db      	ldr	r3, [r3, #12]
 80092ee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	3304      	adds	r3, #4
 80092f4:	4618      	mov	r0, r3
 80092f6:	f7fe f92f 	bl	8007558 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	6a1b      	ldr	r3, [r3, #32]
 80092fe:	68f8      	ldr	r0, [r7, #12]
 8009300:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009308:	f003 0304 	and.w	r3, r3, #4
 800930c:	2b00      	cmp	r3, #0
 800930e:	d02e      	beq.n	800936e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	699b      	ldr	r3, [r3, #24]
 8009314:	693a      	ldr	r2, [r7, #16]
 8009316:	4413      	add	r3, r2
 8009318:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800931a:	68ba      	ldr	r2, [r7, #8]
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	429a      	cmp	r2, r3
 8009320:	d90e      	bls.n	8009340 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	68ba      	ldr	r2, [r7, #8]
 8009326:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	68fa      	ldr	r2, [r7, #12]
 800932c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800932e:	4b19      	ldr	r3, [pc, #100]	; (8009394 <prvSwitchTimerLists+0xc0>)
 8009330:	681a      	ldr	r2, [r3, #0]
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	3304      	adds	r3, #4
 8009336:	4619      	mov	r1, r3
 8009338:	4610      	mov	r0, r2
 800933a:	f7fe f8d4 	bl	80074e6 <vListInsert>
 800933e:	e016      	b.n	800936e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009340:	2300      	movs	r3, #0
 8009342:	9300      	str	r3, [sp, #0]
 8009344:	2300      	movs	r3, #0
 8009346:	693a      	ldr	r2, [r7, #16]
 8009348:	2100      	movs	r1, #0
 800934a:	68f8      	ldr	r0, [r7, #12]
 800934c:	f7ff fd60 	bl	8008e10 <xTimerGenericCommand>
 8009350:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d10a      	bne.n	800936e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800935c:	f383 8811 	msr	BASEPRI, r3
 8009360:	f3bf 8f6f 	isb	sy
 8009364:	f3bf 8f4f 	dsb	sy
 8009368:	603b      	str	r3, [r7, #0]
}
 800936a:	bf00      	nop
 800936c:	e7fe      	b.n	800936c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800936e:	4b09      	ldr	r3, [pc, #36]	; (8009394 <prvSwitchTimerLists+0xc0>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d1b1      	bne.n	80092dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009378:	4b06      	ldr	r3, [pc, #24]	; (8009394 <prvSwitchTimerLists+0xc0>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800937e:	4b06      	ldr	r3, [pc, #24]	; (8009398 <prvSwitchTimerLists+0xc4>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	4a04      	ldr	r2, [pc, #16]	; (8009394 <prvSwitchTimerLists+0xc0>)
 8009384:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009386:	4a04      	ldr	r2, [pc, #16]	; (8009398 <prvSwitchTimerLists+0xc4>)
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	6013      	str	r3, [r2, #0]
}
 800938c:	bf00      	nop
 800938e:	3718      	adds	r7, #24
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}
 8009394:	2000145c 	.word	0x2000145c
 8009398:	20001460 	.word	0x20001460

0800939c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b082      	sub	sp, #8
 80093a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80093a2:	f000 f967 	bl	8009674 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80093a6:	4b15      	ldr	r3, [pc, #84]	; (80093fc <prvCheckForValidListAndQueue+0x60>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d120      	bne.n	80093f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80093ae:	4814      	ldr	r0, [pc, #80]	; (8009400 <prvCheckForValidListAndQueue+0x64>)
 80093b0:	f7fe f848 	bl	8007444 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80093b4:	4813      	ldr	r0, [pc, #76]	; (8009404 <prvCheckForValidListAndQueue+0x68>)
 80093b6:	f7fe f845 	bl	8007444 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80093ba:	4b13      	ldr	r3, [pc, #76]	; (8009408 <prvCheckForValidListAndQueue+0x6c>)
 80093bc:	4a10      	ldr	r2, [pc, #64]	; (8009400 <prvCheckForValidListAndQueue+0x64>)
 80093be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80093c0:	4b12      	ldr	r3, [pc, #72]	; (800940c <prvCheckForValidListAndQueue+0x70>)
 80093c2:	4a10      	ldr	r2, [pc, #64]	; (8009404 <prvCheckForValidListAndQueue+0x68>)
 80093c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80093c6:	2300      	movs	r3, #0
 80093c8:	9300      	str	r3, [sp, #0]
 80093ca:	4b11      	ldr	r3, [pc, #68]	; (8009410 <prvCheckForValidListAndQueue+0x74>)
 80093cc:	4a11      	ldr	r2, [pc, #68]	; (8009414 <prvCheckForValidListAndQueue+0x78>)
 80093ce:	2110      	movs	r1, #16
 80093d0:	200a      	movs	r0, #10
 80093d2:	f7fe f953 	bl	800767c <xQueueGenericCreateStatic>
 80093d6:	4603      	mov	r3, r0
 80093d8:	4a08      	ldr	r2, [pc, #32]	; (80093fc <prvCheckForValidListAndQueue+0x60>)
 80093da:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80093dc:	4b07      	ldr	r3, [pc, #28]	; (80093fc <prvCheckForValidListAndQueue+0x60>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d005      	beq.n	80093f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80093e4:	4b05      	ldr	r3, [pc, #20]	; (80093fc <prvCheckForValidListAndQueue+0x60>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	490b      	ldr	r1, [pc, #44]	; (8009418 <prvCheckForValidListAndQueue+0x7c>)
 80093ea:	4618      	mov	r0, r3
 80093ec:	f7fe fd6c 	bl	8007ec8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80093f0:	f000 f970 	bl	80096d4 <vPortExitCritical>
}
 80093f4:	bf00      	nop
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}
 80093fa:	bf00      	nop
 80093fc:	20001464 	.word	0x20001464
 8009400:	20001434 	.word	0x20001434
 8009404:	20001448 	.word	0x20001448
 8009408:	2000145c 	.word	0x2000145c
 800940c:	20001460 	.word	0x20001460
 8009410:	20001510 	.word	0x20001510
 8009414:	20001470 	.word	0x20001470
 8009418:	0800becc 	.word	0x0800becc

0800941c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800941c:	b480      	push	{r7}
 800941e:	b085      	sub	sp, #20
 8009420:	af00      	add	r7, sp, #0
 8009422:	60f8      	str	r0, [r7, #12]
 8009424:	60b9      	str	r1, [r7, #8]
 8009426:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	3b04      	subs	r3, #4
 800942c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009434:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	3b04      	subs	r3, #4
 800943a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	f023 0201 	bic.w	r2, r3, #1
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	3b04      	subs	r3, #4
 800944a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800944c:	4a0c      	ldr	r2, [pc, #48]	; (8009480 <pxPortInitialiseStack+0x64>)
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	3b14      	subs	r3, #20
 8009456:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009458:	687a      	ldr	r2, [r7, #4]
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	3b04      	subs	r3, #4
 8009462:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f06f 0202 	mvn.w	r2, #2
 800946a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	3b20      	subs	r3, #32
 8009470:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009472:	68fb      	ldr	r3, [r7, #12]
}
 8009474:	4618      	mov	r0, r3
 8009476:	3714      	adds	r7, #20
 8009478:	46bd      	mov	sp, r7
 800947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947e:	4770      	bx	lr
 8009480:	08009485 	.word	0x08009485

08009484 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009484:	b480      	push	{r7}
 8009486:	b085      	sub	sp, #20
 8009488:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800948a:	2300      	movs	r3, #0
 800948c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800948e:	4b12      	ldr	r3, [pc, #72]	; (80094d8 <prvTaskExitError+0x54>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009496:	d00a      	beq.n	80094ae <prvTaskExitError+0x2a>
	__asm volatile
 8009498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800949c:	f383 8811 	msr	BASEPRI, r3
 80094a0:	f3bf 8f6f 	isb	sy
 80094a4:	f3bf 8f4f 	dsb	sy
 80094a8:	60fb      	str	r3, [r7, #12]
}
 80094aa:	bf00      	nop
 80094ac:	e7fe      	b.n	80094ac <prvTaskExitError+0x28>
	__asm volatile
 80094ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b2:	f383 8811 	msr	BASEPRI, r3
 80094b6:	f3bf 8f6f 	isb	sy
 80094ba:	f3bf 8f4f 	dsb	sy
 80094be:	60bb      	str	r3, [r7, #8]
}
 80094c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80094c2:	bf00      	nop
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d0fc      	beq.n	80094c4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80094ca:	bf00      	nop
 80094cc:	bf00      	nop
 80094ce:	3714      	adds	r7, #20
 80094d0:	46bd      	mov	sp, r7
 80094d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d6:	4770      	bx	lr
 80094d8:	20000030 	.word	0x20000030
 80094dc:	00000000 	.word	0x00000000

080094e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80094e0:	4b07      	ldr	r3, [pc, #28]	; (8009500 <pxCurrentTCBConst2>)
 80094e2:	6819      	ldr	r1, [r3, #0]
 80094e4:	6808      	ldr	r0, [r1, #0]
 80094e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094ea:	f380 8809 	msr	PSP, r0
 80094ee:	f3bf 8f6f 	isb	sy
 80094f2:	f04f 0000 	mov.w	r0, #0
 80094f6:	f380 8811 	msr	BASEPRI, r0
 80094fa:	4770      	bx	lr
 80094fc:	f3af 8000 	nop.w

08009500 <pxCurrentTCBConst2>:
 8009500:	20000f34 	.word	0x20000f34
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009504:	bf00      	nop
 8009506:	bf00      	nop

08009508 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009508:	4808      	ldr	r0, [pc, #32]	; (800952c <prvPortStartFirstTask+0x24>)
 800950a:	6800      	ldr	r0, [r0, #0]
 800950c:	6800      	ldr	r0, [r0, #0]
 800950e:	f380 8808 	msr	MSP, r0
 8009512:	f04f 0000 	mov.w	r0, #0
 8009516:	f380 8814 	msr	CONTROL, r0
 800951a:	b662      	cpsie	i
 800951c:	b661      	cpsie	f
 800951e:	f3bf 8f4f 	dsb	sy
 8009522:	f3bf 8f6f 	isb	sy
 8009526:	df00      	svc	0
 8009528:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800952a:	bf00      	nop
 800952c:	e000ed08 	.word	0xe000ed08

08009530 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b086      	sub	sp, #24
 8009534:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009536:	4b46      	ldr	r3, [pc, #280]	; (8009650 <xPortStartScheduler+0x120>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	4a46      	ldr	r2, [pc, #280]	; (8009654 <xPortStartScheduler+0x124>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d10a      	bne.n	8009556 <xPortStartScheduler+0x26>
	__asm volatile
 8009540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009544:	f383 8811 	msr	BASEPRI, r3
 8009548:	f3bf 8f6f 	isb	sy
 800954c:	f3bf 8f4f 	dsb	sy
 8009550:	613b      	str	r3, [r7, #16]
}
 8009552:	bf00      	nop
 8009554:	e7fe      	b.n	8009554 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009556:	4b3e      	ldr	r3, [pc, #248]	; (8009650 <xPortStartScheduler+0x120>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	4a3f      	ldr	r2, [pc, #252]	; (8009658 <xPortStartScheduler+0x128>)
 800955c:	4293      	cmp	r3, r2
 800955e:	d10a      	bne.n	8009576 <xPortStartScheduler+0x46>
	__asm volatile
 8009560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009564:	f383 8811 	msr	BASEPRI, r3
 8009568:	f3bf 8f6f 	isb	sy
 800956c:	f3bf 8f4f 	dsb	sy
 8009570:	60fb      	str	r3, [r7, #12]
}
 8009572:	bf00      	nop
 8009574:	e7fe      	b.n	8009574 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009576:	4b39      	ldr	r3, [pc, #228]	; (800965c <xPortStartScheduler+0x12c>)
 8009578:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800957a:	697b      	ldr	r3, [r7, #20]
 800957c:	781b      	ldrb	r3, [r3, #0]
 800957e:	b2db      	uxtb	r3, r3
 8009580:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	22ff      	movs	r2, #255	; 0xff
 8009586:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	781b      	ldrb	r3, [r3, #0]
 800958c:	b2db      	uxtb	r3, r3
 800958e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009590:	78fb      	ldrb	r3, [r7, #3]
 8009592:	b2db      	uxtb	r3, r3
 8009594:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009598:	b2da      	uxtb	r2, r3
 800959a:	4b31      	ldr	r3, [pc, #196]	; (8009660 <xPortStartScheduler+0x130>)
 800959c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800959e:	4b31      	ldr	r3, [pc, #196]	; (8009664 <xPortStartScheduler+0x134>)
 80095a0:	2207      	movs	r2, #7
 80095a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80095a4:	e009      	b.n	80095ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80095a6:	4b2f      	ldr	r3, [pc, #188]	; (8009664 <xPortStartScheduler+0x134>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	3b01      	subs	r3, #1
 80095ac:	4a2d      	ldr	r2, [pc, #180]	; (8009664 <xPortStartScheduler+0x134>)
 80095ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80095b0:	78fb      	ldrb	r3, [r7, #3]
 80095b2:	b2db      	uxtb	r3, r3
 80095b4:	005b      	lsls	r3, r3, #1
 80095b6:	b2db      	uxtb	r3, r3
 80095b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80095ba:	78fb      	ldrb	r3, [r7, #3]
 80095bc:	b2db      	uxtb	r3, r3
 80095be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095c2:	2b80      	cmp	r3, #128	; 0x80
 80095c4:	d0ef      	beq.n	80095a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80095c6:	4b27      	ldr	r3, [pc, #156]	; (8009664 <xPortStartScheduler+0x134>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f1c3 0307 	rsb	r3, r3, #7
 80095ce:	2b04      	cmp	r3, #4
 80095d0:	d00a      	beq.n	80095e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80095d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d6:	f383 8811 	msr	BASEPRI, r3
 80095da:	f3bf 8f6f 	isb	sy
 80095de:	f3bf 8f4f 	dsb	sy
 80095e2:	60bb      	str	r3, [r7, #8]
}
 80095e4:	bf00      	nop
 80095e6:	e7fe      	b.n	80095e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80095e8:	4b1e      	ldr	r3, [pc, #120]	; (8009664 <xPortStartScheduler+0x134>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	021b      	lsls	r3, r3, #8
 80095ee:	4a1d      	ldr	r2, [pc, #116]	; (8009664 <xPortStartScheduler+0x134>)
 80095f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80095f2:	4b1c      	ldr	r3, [pc, #112]	; (8009664 <xPortStartScheduler+0x134>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80095fa:	4a1a      	ldr	r2, [pc, #104]	; (8009664 <xPortStartScheduler+0x134>)
 80095fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	b2da      	uxtb	r2, r3
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009606:	4b18      	ldr	r3, [pc, #96]	; (8009668 <xPortStartScheduler+0x138>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	4a17      	ldr	r2, [pc, #92]	; (8009668 <xPortStartScheduler+0x138>)
 800960c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009610:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009612:	4b15      	ldr	r3, [pc, #84]	; (8009668 <xPortStartScheduler+0x138>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	4a14      	ldr	r2, [pc, #80]	; (8009668 <xPortStartScheduler+0x138>)
 8009618:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800961c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800961e:	f000 f8dd 	bl	80097dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009622:	4b12      	ldr	r3, [pc, #72]	; (800966c <xPortStartScheduler+0x13c>)
 8009624:	2200      	movs	r2, #0
 8009626:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009628:	f000 f8fc 	bl	8009824 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800962c:	4b10      	ldr	r3, [pc, #64]	; (8009670 <xPortStartScheduler+0x140>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	4a0f      	ldr	r2, [pc, #60]	; (8009670 <xPortStartScheduler+0x140>)
 8009632:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009636:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009638:	f7ff ff66 	bl	8009508 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800963c:	f7ff f854 	bl	80086e8 <vTaskSwitchContext>
	prvTaskExitError();
 8009640:	f7ff ff20 	bl	8009484 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009644:	2300      	movs	r3, #0
}
 8009646:	4618      	mov	r0, r3
 8009648:	3718      	adds	r7, #24
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}
 800964e:	bf00      	nop
 8009650:	e000ed00 	.word	0xe000ed00
 8009654:	410fc271 	.word	0x410fc271
 8009658:	410fc270 	.word	0x410fc270
 800965c:	e000e400 	.word	0xe000e400
 8009660:	20001560 	.word	0x20001560
 8009664:	20001564 	.word	0x20001564
 8009668:	e000ed20 	.word	0xe000ed20
 800966c:	20000030 	.word	0x20000030
 8009670:	e000ef34 	.word	0xe000ef34

08009674 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009674:	b480      	push	{r7}
 8009676:	b083      	sub	sp, #12
 8009678:	af00      	add	r7, sp, #0
	__asm volatile
 800967a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800967e:	f383 8811 	msr	BASEPRI, r3
 8009682:	f3bf 8f6f 	isb	sy
 8009686:	f3bf 8f4f 	dsb	sy
 800968a:	607b      	str	r3, [r7, #4]
}
 800968c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800968e:	4b0f      	ldr	r3, [pc, #60]	; (80096cc <vPortEnterCritical+0x58>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	3301      	adds	r3, #1
 8009694:	4a0d      	ldr	r2, [pc, #52]	; (80096cc <vPortEnterCritical+0x58>)
 8009696:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009698:	4b0c      	ldr	r3, [pc, #48]	; (80096cc <vPortEnterCritical+0x58>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	2b01      	cmp	r3, #1
 800969e:	d10f      	bne.n	80096c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80096a0:	4b0b      	ldr	r3, [pc, #44]	; (80096d0 <vPortEnterCritical+0x5c>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	b2db      	uxtb	r3, r3
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d00a      	beq.n	80096c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80096aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ae:	f383 8811 	msr	BASEPRI, r3
 80096b2:	f3bf 8f6f 	isb	sy
 80096b6:	f3bf 8f4f 	dsb	sy
 80096ba:	603b      	str	r3, [r7, #0]
}
 80096bc:	bf00      	nop
 80096be:	e7fe      	b.n	80096be <vPortEnterCritical+0x4a>
	}
}
 80096c0:	bf00      	nop
 80096c2:	370c      	adds	r7, #12
 80096c4:	46bd      	mov	sp, r7
 80096c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ca:	4770      	bx	lr
 80096cc:	20000030 	.word	0x20000030
 80096d0:	e000ed04 	.word	0xe000ed04

080096d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80096d4:	b480      	push	{r7}
 80096d6:	b083      	sub	sp, #12
 80096d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80096da:	4b12      	ldr	r3, [pc, #72]	; (8009724 <vPortExitCritical+0x50>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d10a      	bne.n	80096f8 <vPortExitCritical+0x24>
	__asm volatile
 80096e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e6:	f383 8811 	msr	BASEPRI, r3
 80096ea:	f3bf 8f6f 	isb	sy
 80096ee:	f3bf 8f4f 	dsb	sy
 80096f2:	607b      	str	r3, [r7, #4]
}
 80096f4:	bf00      	nop
 80096f6:	e7fe      	b.n	80096f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80096f8:	4b0a      	ldr	r3, [pc, #40]	; (8009724 <vPortExitCritical+0x50>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	3b01      	subs	r3, #1
 80096fe:	4a09      	ldr	r2, [pc, #36]	; (8009724 <vPortExitCritical+0x50>)
 8009700:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009702:	4b08      	ldr	r3, [pc, #32]	; (8009724 <vPortExitCritical+0x50>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d105      	bne.n	8009716 <vPortExitCritical+0x42>
 800970a:	2300      	movs	r3, #0
 800970c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	f383 8811 	msr	BASEPRI, r3
}
 8009714:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009716:	bf00      	nop
 8009718:	370c      	adds	r7, #12
 800971a:	46bd      	mov	sp, r7
 800971c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009720:	4770      	bx	lr
 8009722:	bf00      	nop
 8009724:	20000030 	.word	0x20000030
	...

08009730 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009730:	f3ef 8009 	mrs	r0, PSP
 8009734:	f3bf 8f6f 	isb	sy
 8009738:	4b15      	ldr	r3, [pc, #84]	; (8009790 <pxCurrentTCBConst>)
 800973a:	681a      	ldr	r2, [r3, #0]
 800973c:	f01e 0f10 	tst.w	lr, #16
 8009740:	bf08      	it	eq
 8009742:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009746:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800974a:	6010      	str	r0, [r2, #0]
 800974c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009750:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009754:	f380 8811 	msr	BASEPRI, r0
 8009758:	f3bf 8f4f 	dsb	sy
 800975c:	f3bf 8f6f 	isb	sy
 8009760:	f7fe ffc2 	bl	80086e8 <vTaskSwitchContext>
 8009764:	f04f 0000 	mov.w	r0, #0
 8009768:	f380 8811 	msr	BASEPRI, r0
 800976c:	bc09      	pop	{r0, r3}
 800976e:	6819      	ldr	r1, [r3, #0]
 8009770:	6808      	ldr	r0, [r1, #0]
 8009772:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009776:	f01e 0f10 	tst.w	lr, #16
 800977a:	bf08      	it	eq
 800977c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009780:	f380 8809 	msr	PSP, r0
 8009784:	f3bf 8f6f 	isb	sy
 8009788:	4770      	bx	lr
 800978a:	bf00      	nop
 800978c:	f3af 8000 	nop.w

08009790 <pxCurrentTCBConst>:
 8009790:	20000f34 	.word	0x20000f34
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009794:	bf00      	nop
 8009796:	bf00      	nop

08009798 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b082      	sub	sp, #8
 800979c:	af00      	add	r7, sp, #0
	__asm volatile
 800979e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a2:	f383 8811 	msr	BASEPRI, r3
 80097a6:	f3bf 8f6f 	isb	sy
 80097aa:	f3bf 8f4f 	dsb	sy
 80097ae:	607b      	str	r3, [r7, #4]
}
 80097b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80097b2:	f7fe fedf 	bl	8008574 <xTaskIncrementTick>
 80097b6:	4603      	mov	r3, r0
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d003      	beq.n	80097c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80097bc:	4b06      	ldr	r3, [pc, #24]	; (80097d8 <xPortSysTickHandler+0x40>)
 80097be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097c2:	601a      	str	r2, [r3, #0]
 80097c4:	2300      	movs	r3, #0
 80097c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	f383 8811 	msr	BASEPRI, r3
}
 80097ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80097d0:	bf00      	nop
 80097d2:	3708      	adds	r7, #8
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}
 80097d8:	e000ed04 	.word	0xe000ed04

080097dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80097dc:	b480      	push	{r7}
 80097de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80097e0:	4b0b      	ldr	r3, [pc, #44]	; (8009810 <vPortSetupTimerInterrupt+0x34>)
 80097e2:	2200      	movs	r2, #0
 80097e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80097e6:	4b0b      	ldr	r3, [pc, #44]	; (8009814 <vPortSetupTimerInterrupt+0x38>)
 80097e8:	2200      	movs	r2, #0
 80097ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80097ec:	4b0a      	ldr	r3, [pc, #40]	; (8009818 <vPortSetupTimerInterrupt+0x3c>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	4a0a      	ldr	r2, [pc, #40]	; (800981c <vPortSetupTimerInterrupt+0x40>)
 80097f2:	fba2 2303 	umull	r2, r3, r2, r3
 80097f6:	099b      	lsrs	r3, r3, #6
 80097f8:	4a09      	ldr	r2, [pc, #36]	; (8009820 <vPortSetupTimerInterrupt+0x44>)
 80097fa:	3b01      	subs	r3, #1
 80097fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80097fe:	4b04      	ldr	r3, [pc, #16]	; (8009810 <vPortSetupTimerInterrupt+0x34>)
 8009800:	2207      	movs	r2, #7
 8009802:	601a      	str	r2, [r3, #0]
}
 8009804:	bf00      	nop
 8009806:	46bd      	mov	sp, r7
 8009808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980c:	4770      	bx	lr
 800980e:	bf00      	nop
 8009810:	e000e010 	.word	0xe000e010
 8009814:	e000e018 	.word	0xe000e018
 8009818:	20000004 	.word	0x20000004
 800981c:	10624dd3 	.word	0x10624dd3
 8009820:	e000e014 	.word	0xe000e014

08009824 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009824:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009834 <vPortEnableVFP+0x10>
 8009828:	6801      	ldr	r1, [r0, #0]
 800982a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800982e:	6001      	str	r1, [r0, #0]
 8009830:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009832:	bf00      	nop
 8009834:	e000ed88 	.word	0xe000ed88

08009838 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009838:	b480      	push	{r7}
 800983a:	b085      	sub	sp, #20
 800983c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800983e:	f3ef 8305 	mrs	r3, IPSR
 8009842:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2b0f      	cmp	r3, #15
 8009848:	d914      	bls.n	8009874 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800984a:	4a17      	ldr	r2, [pc, #92]	; (80098a8 <vPortValidateInterruptPriority+0x70>)
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	4413      	add	r3, r2
 8009850:	781b      	ldrb	r3, [r3, #0]
 8009852:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009854:	4b15      	ldr	r3, [pc, #84]	; (80098ac <vPortValidateInterruptPriority+0x74>)
 8009856:	781b      	ldrb	r3, [r3, #0]
 8009858:	7afa      	ldrb	r2, [r7, #11]
 800985a:	429a      	cmp	r2, r3
 800985c:	d20a      	bcs.n	8009874 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800985e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009862:	f383 8811 	msr	BASEPRI, r3
 8009866:	f3bf 8f6f 	isb	sy
 800986a:	f3bf 8f4f 	dsb	sy
 800986e:	607b      	str	r3, [r7, #4]
}
 8009870:	bf00      	nop
 8009872:	e7fe      	b.n	8009872 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009874:	4b0e      	ldr	r3, [pc, #56]	; (80098b0 <vPortValidateInterruptPriority+0x78>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800987c:	4b0d      	ldr	r3, [pc, #52]	; (80098b4 <vPortValidateInterruptPriority+0x7c>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	429a      	cmp	r2, r3
 8009882:	d90a      	bls.n	800989a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009888:	f383 8811 	msr	BASEPRI, r3
 800988c:	f3bf 8f6f 	isb	sy
 8009890:	f3bf 8f4f 	dsb	sy
 8009894:	603b      	str	r3, [r7, #0]
}
 8009896:	bf00      	nop
 8009898:	e7fe      	b.n	8009898 <vPortValidateInterruptPriority+0x60>
	}
 800989a:	bf00      	nop
 800989c:	3714      	adds	r7, #20
 800989e:	46bd      	mov	sp, r7
 80098a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a4:	4770      	bx	lr
 80098a6:	bf00      	nop
 80098a8:	e000e3f0 	.word	0xe000e3f0
 80098ac:	20001560 	.word	0x20001560
 80098b0:	e000ed0c 	.word	0xe000ed0c
 80098b4:	20001564 	.word	0x20001564

080098b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b08a      	sub	sp, #40	; 0x28
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80098c0:	2300      	movs	r3, #0
 80098c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80098c4:	f7fe fd9a 	bl	80083fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80098c8:	4b5b      	ldr	r3, [pc, #364]	; (8009a38 <pvPortMalloc+0x180>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d101      	bne.n	80098d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80098d0:	f000 f920 	bl	8009b14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80098d4:	4b59      	ldr	r3, [pc, #356]	; (8009a3c <pvPortMalloc+0x184>)
 80098d6:	681a      	ldr	r2, [r3, #0]
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	4013      	ands	r3, r2
 80098dc:	2b00      	cmp	r3, #0
 80098de:	f040 8093 	bne.w	8009a08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d01d      	beq.n	8009924 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80098e8:	2208      	movs	r2, #8
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	4413      	add	r3, r2
 80098ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f003 0307 	and.w	r3, r3, #7
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d014      	beq.n	8009924 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f023 0307 	bic.w	r3, r3, #7
 8009900:	3308      	adds	r3, #8
 8009902:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f003 0307 	and.w	r3, r3, #7
 800990a:	2b00      	cmp	r3, #0
 800990c:	d00a      	beq.n	8009924 <pvPortMalloc+0x6c>
	__asm volatile
 800990e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009912:	f383 8811 	msr	BASEPRI, r3
 8009916:	f3bf 8f6f 	isb	sy
 800991a:	f3bf 8f4f 	dsb	sy
 800991e:	617b      	str	r3, [r7, #20]
}
 8009920:	bf00      	nop
 8009922:	e7fe      	b.n	8009922 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d06e      	beq.n	8009a08 <pvPortMalloc+0x150>
 800992a:	4b45      	ldr	r3, [pc, #276]	; (8009a40 <pvPortMalloc+0x188>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	687a      	ldr	r2, [r7, #4]
 8009930:	429a      	cmp	r2, r3
 8009932:	d869      	bhi.n	8009a08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009934:	4b43      	ldr	r3, [pc, #268]	; (8009a44 <pvPortMalloc+0x18c>)
 8009936:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009938:	4b42      	ldr	r3, [pc, #264]	; (8009a44 <pvPortMalloc+0x18c>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800993e:	e004      	b.n	800994a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009942:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800994a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	687a      	ldr	r2, [r7, #4]
 8009950:	429a      	cmp	r2, r3
 8009952:	d903      	bls.n	800995c <pvPortMalloc+0xa4>
 8009954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d1f1      	bne.n	8009940 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800995c:	4b36      	ldr	r3, [pc, #216]	; (8009a38 <pvPortMalloc+0x180>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009962:	429a      	cmp	r2, r3
 8009964:	d050      	beq.n	8009a08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009966:	6a3b      	ldr	r3, [r7, #32]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	2208      	movs	r2, #8
 800996c:	4413      	add	r3, r2
 800996e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009972:	681a      	ldr	r2, [r3, #0]
 8009974:	6a3b      	ldr	r3, [r7, #32]
 8009976:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800997a:	685a      	ldr	r2, [r3, #4]
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	1ad2      	subs	r2, r2, r3
 8009980:	2308      	movs	r3, #8
 8009982:	005b      	lsls	r3, r3, #1
 8009984:	429a      	cmp	r2, r3
 8009986:	d91f      	bls.n	80099c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	4413      	add	r3, r2
 800998e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009990:	69bb      	ldr	r3, [r7, #24]
 8009992:	f003 0307 	and.w	r3, r3, #7
 8009996:	2b00      	cmp	r3, #0
 8009998:	d00a      	beq.n	80099b0 <pvPortMalloc+0xf8>
	__asm volatile
 800999a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800999e:	f383 8811 	msr	BASEPRI, r3
 80099a2:	f3bf 8f6f 	isb	sy
 80099a6:	f3bf 8f4f 	dsb	sy
 80099aa:	613b      	str	r3, [r7, #16]
}
 80099ac:	bf00      	nop
 80099ae:	e7fe      	b.n	80099ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80099b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b2:	685a      	ldr	r2, [r3, #4]
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	1ad2      	subs	r2, r2, r3
 80099b8:	69bb      	ldr	r3, [r7, #24]
 80099ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80099bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099be:	687a      	ldr	r2, [r7, #4]
 80099c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80099c2:	69b8      	ldr	r0, [r7, #24]
 80099c4:	f000 f908 	bl	8009bd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80099c8:	4b1d      	ldr	r3, [pc, #116]	; (8009a40 <pvPortMalloc+0x188>)
 80099ca:	681a      	ldr	r2, [r3, #0]
 80099cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ce:	685b      	ldr	r3, [r3, #4]
 80099d0:	1ad3      	subs	r3, r2, r3
 80099d2:	4a1b      	ldr	r2, [pc, #108]	; (8009a40 <pvPortMalloc+0x188>)
 80099d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80099d6:	4b1a      	ldr	r3, [pc, #104]	; (8009a40 <pvPortMalloc+0x188>)
 80099d8:	681a      	ldr	r2, [r3, #0]
 80099da:	4b1b      	ldr	r3, [pc, #108]	; (8009a48 <pvPortMalloc+0x190>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	429a      	cmp	r2, r3
 80099e0:	d203      	bcs.n	80099ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80099e2:	4b17      	ldr	r3, [pc, #92]	; (8009a40 <pvPortMalloc+0x188>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4a18      	ldr	r2, [pc, #96]	; (8009a48 <pvPortMalloc+0x190>)
 80099e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80099ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ec:	685a      	ldr	r2, [r3, #4]
 80099ee:	4b13      	ldr	r3, [pc, #76]	; (8009a3c <pvPortMalloc+0x184>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	431a      	orrs	r2, r3
 80099f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80099f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099fa:	2200      	movs	r2, #0
 80099fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80099fe:	4b13      	ldr	r3, [pc, #76]	; (8009a4c <pvPortMalloc+0x194>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	3301      	adds	r3, #1
 8009a04:	4a11      	ldr	r2, [pc, #68]	; (8009a4c <pvPortMalloc+0x194>)
 8009a06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009a08:	f7fe fd06 	bl	8008418 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a0c:	69fb      	ldr	r3, [r7, #28]
 8009a0e:	f003 0307 	and.w	r3, r3, #7
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d00a      	beq.n	8009a2c <pvPortMalloc+0x174>
	__asm volatile
 8009a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a1a:	f383 8811 	msr	BASEPRI, r3
 8009a1e:	f3bf 8f6f 	isb	sy
 8009a22:	f3bf 8f4f 	dsb	sy
 8009a26:	60fb      	str	r3, [r7, #12]
}
 8009a28:	bf00      	nop
 8009a2a:	e7fe      	b.n	8009a2a <pvPortMalloc+0x172>
	return pvReturn;
 8009a2c:	69fb      	ldr	r3, [r7, #28]
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3728      	adds	r7, #40	; 0x28
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}
 8009a36:	bf00      	nop
 8009a38:	20003898 	.word	0x20003898
 8009a3c:	200038ac 	.word	0x200038ac
 8009a40:	2000389c 	.word	0x2000389c
 8009a44:	20003890 	.word	0x20003890
 8009a48:	200038a0 	.word	0x200038a0
 8009a4c:	200038a4 	.word	0x200038a4

08009a50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b086      	sub	sp, #24
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d04d      	beq.n	8009afe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009a62:	2308      	movs	r3, #8
 8009a64:	425b      	negs	r3, r3
 8009a66:	697a      	ldr	r2, [r7, #20]
 8009a68:	4413      	add	r3, r2
 8009a6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	685a      	ldr	r2, [r3, #4]
 8009a74:	4b24      	ldr	r3, [pc, #144]	; (8009b08 <vPortFree+0xb8>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4013      	ands	r3, r2
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d10a      	bne.n	8009a94 <vPortFree+0x44>
	__asm volatile
 8009a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a82:	f383 8811 	msr	BASEPRI, r3
 8009a86:	f3bf 8f6f 	isb	sy
 8009a8a:	f3bf 8f4f 	dsb	sy
 8009a8e:	60fb      	str	r3, [r7, #12]
}
 8009a90:	bf00      	nop
 8009a92:	e7fe      	b.n	8009a92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d00a      	beq.n	8009ab2 <vPortFree+0x62>
	__asm volatile
 8009a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa0:	f383 8811 	msr	BASEPRI, r3
 8009aa4:	f3bf 8f6f 	isb	sy
 8009aa8:	f3bf 8f4f 	dsb	sy
 8009aac:	60bb      	str	r3, [r7, #8]
}
 8009aae:	bf00      	nop
 8009ab0:	e7fe      	b.n	8009ab0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009ab2:	693b      	ldr	r3, [r7, #16]
 8009ab4:	685a      	ldr	r2, [r3, #4]
 8009ab6:	4b14      	ldr	r3, [pc, #80]	; (8009b08 <vPortFree+0xb8>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	4013      	ands	r3, r2
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d01e      	beq.n	8009afe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d11a      	bne.n	8009afe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	685a      	ldr	r2, [r3, #4]
 8009acc:	4b0e      	ldr	r3, [pc, #56]	; (8009b08 <vPortFree+0xb8>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	43db      	mvns	r3, r3
 8009ad2:	401a      	ands	r2, r3
 8009ad4:	693b      	ldr	r3, [r7, #16]
 8009ad6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009ad8:	f7fe fc90 	bl	80083fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	685a      	ldr	r2, [r3, #4]
 8009ae0:	4b0a      	ldr	r3, [pc, #40]	; (8009b0c <vPortFree+0xbc>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	4413      	add	r3, r2
 8009ae6:	4a09      	ldr	r2, [pc, #36]	; (8009b0c <vPortFree+0xbc>)
 8009ae8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009aea:	6938      	ldr	r0, [r7, #16]
 8009aec:	f000 f874 	bl	8009bd8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009af0:	4b07      	ldr	r3, [pc, #28]	; (8009b10 <vPortFree+0xc0>)
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	3301      	adds	r3, #1
 8009af6:	4a06      	ldr	r2, [pc, #24]	; (8009b10 <vPortFree+0xc0>)
 8009af8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009afa:	f7fe fc8d 	bl	8008418 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009afe:	bf00      	nop
 8009b00:	3718      	adds	r7, #24
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}
 8009b06:	bf00      	nop
 8009b08:	200038ac 	.word	0x200038ac
 8009b0c:	2000389c 	.word	0x2000389c
 8009b10:	200038a8 	.word	0x200038a8

08009b14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009b14:	b480      	push	{r7}
 8009b16:	b085      	sub	sp, #20
 8009b18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009b1a:	f242 3328 	movw	r3, #9000	; 0x2328
 8009b1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009b20:	4b27      	ldr	r3, [pc, #156]	; (8009bc0 <prvHeapInit+0xac>)
 8009b22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	f003 0307 	and.w	r3, r3, #7
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d00c      	beq.n	8009b48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	3307      	adds	r3, #7
 8009b32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	f023 0307 	bic.w	r3, r3, #7
 8009b3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009b3c:	68ba      	ldr	r2, [r7, #8]
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	1ad3      	subs	r3, r2, r3
 8009b42:	4a1f      	ldr	r2, [pc, #124]	; (8009bc0 <prvHeapInit+0xac>)
 8009b44:	4413      	add	r3, r2
 8009b46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009b4c:	4a1d      	ldr	r2, [pc, #116]	; (8009bc4 <prvHeapInit+0xb0>)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009b52:	4b1c      	ldr	r3, [pc, #112]	; (8009bc4 <prvHeapInit+0xb0>)
 8009b54:	2200      	movs	r2, #0
 8009b56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	68ba      	ldr	r2, [r7, #8]
 8009b5c:	4413      	add	r3, r2
 8009b5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009b60:	2208      	movs	r2, #8
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	1a9b      	subs	r3, r3, r2
 8009b66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	f023 0307 	bic.w	r3, r3, #7
 8009b6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	4a15      	ldr	r2, [pc, #84]	; (8009bc8 <prvHeapInit+0xb4>)
 8009b74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009b76:	4b14      	ldr	r3, [pc, #80]	; (8009bc8 <prvHeapInit+0xb4>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009b7e:	4b12      	ldr	r3, [pc, #72]	; (8009bc8 <prvHeapInit+0xb4>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	2200      	movs	r2, #0
 8009b84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	68fa      	ldr	r2, [r7, #12]
 8009b8e:	1ad2      	subs	r2, r2, r3
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009b94:	4b0c      	ldr	r3, [pc, #48]	; (8009bc8 <prvHeapInit+0xb4>)
 8009b96:	681a      	ldr	r2, [r3, #0]
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	4a0a      	ldr	r2, [pc, #40]	; (8009bcc <prvHeapInit+0xb8>)
 8009ba2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	685b      	ldr	r3, [r3, #4]
 8009ba8:	4a09      	ldr	r2, [pc, #36]	; (8009bd0 <prvHeapInit+0xbc>)
 8009baa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009bac:	4b09      	ldr	r3, [pc, #36]	; (8009bd4 <prvHeapInit+0xc0>)
 8009bae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009bb2:	601a      	str	r2, [r3, #0]
}
 8009bb4:	bf00      	nop
 8009bb6:	3714      	adds	r7, #20
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbe:	4770      	bx	lr
 8009bc0:	20001568 	.word	0x20001568
 8009bc4:	20003890 	.word	0x20003890
 8009bc8:	20003898 	.word	0x20003898
 8009bcc:	200038a0 	.word	0x200038a0
 8009bd0:	2000389c 	.word	0x2000389c
 8009bd4:	200038ac 	.word	0x200038ac

08009bd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b085      	sub	sp, #20
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009be0:	4b28      	ldr	r3, [pc, #160]	; (8009c84 <prvInsertBlockIntoFreeList+0xac>)
 8009be2:	60fb      	str	r3, [r7, #12]
 8009be4:	e002      	b.n	8009bec <prvInsertBlockIntoFreeList+0x14>
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	60fb      	str	r3, [r7, #12]
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	687a      	ldr	r2, [r7, #4]
 8009bf2:	429a      	cmp	r2, r3
 8009bf4:	d8f7      	bhi.n	8009be6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	685b      	ldr	r3, [r3, #4]
 8009bfe:	68ba      	ldr	r2, [r7, #8]
 8009c00:	4413      	add	r3, r2
 8009c02:	687a      	ldr	r2, [r7, #4]
 8009c04:	429a      	cmp	r2, r3
 8009c06:	d108      	bne.n	8009c1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	685a      	ldr	r2, [r3, #4]
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	685b      	ldr	r3, [r3, #4]
 8009c10:	441a      	add	r2, r3
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	685b      	ldr	r3, [r3, #4]
 8009c22:	68ba      	ldr	r2, [r7, #8]
 8009c24:	441a      	add	r2, r3
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	429a      	cmp	r2, r3
 8009c2c:	d118      	bne.n	8009c60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681a      	ldr	r2, [r3, #0]
 8009c32:	4b15      	ldr	r3, [pc, #84]	; (8009c88 <prvInsertBlockIntoFreeList+0xb0>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	429a      	cmp	r2, r3
 8009c38:	d00d      	beq.n	8009c56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	685a      	ldr	r2, [r3, #4]
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	685b      	ldr	r3, [r3, #4]
 8009c44:	441a      	add	r2, r3
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	681a      	ldr	r2, [r3, #0]
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	601a      	str	r2, [r3, #0]
 8009c54:	e008      	b.n	8009c68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009c56:	4b0c      	ldr	r3, [pc, #48]	; (8009c88 <prvInsertBlockIntoFreeList+0xb0>)
 8009c58:	681a      	ldr	r2, [r3, #0]
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	601a      	str	r2, [r3, #0]
 8009c5e:	e003      	b.n	8009c68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	681a      	ldr	r2, [r3, #0]
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009c68:	68fa      	ldr	r2, [r7, #12]
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	429a      	cmp	r2, r3
 8009c6e:	d002      	beq.n	8009c76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	687a      	ldr	r2, [r7, #4]
 8009c74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009c76:	bf00      	nop
 8009c78:	3714      	adds	r7, #20
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c80:	4770      	bx	lr
 8009c82:	bf00      	nop
 8009c84:	20003890 	.word	0x20003890
 8009c88:	20003898 	.word	0x20003898

08009c8c <atoi>:
 8009c8c:	220a      	movs	r2, #10
 8009c8e:	2100      	movs	r1, #0
 8009c90:	f000 ba3a 	b.w	800a108 <strtol>

08009c94 <__errno>:
 8009c94:	4b01      	ldr	r3, [pc, #4]	; (8009c9c <__errno+0x8>)
 8009c96:	6818      	ldr	r0, [r3, #0]
 8009c98:	4770      	bx	lr
 8009c9a:	bf00      	nop
 8009c9c:	20000034 	.word	0x20000034

08009ca0 <__libc_init_array>:
 8009ca0:	b570      	push	{r4, r5, r6, lr}
 8009ca2:	4d0d      	ldr	r5, [pc, #52]	; (8009cd8 <__libc_init_array+0x38>)
 8009ca4:	4c0d      	ldr	r4, [pc, #52]	; (8009cdc <__libc_init_array+0x3c>)
 8009ca6:	1b64      	subs	r4, r4, r5
 8009ca8:	10a4      	asrs	r4, r4, #2
 8009caa:	2600      	movs	r6, #0
 8009cac:	42a6      	cmp	r6, r4
 8009cae:	d109      	bne.n	8009cc4 <__libc_init_array+0x24>
 8009cb0:	4d0b      	ldr	r5, [pc, #44]	; (8009ce0 <__libc_init_array+0x40>)
 8009cb2:	4c0c      	ldr	r4, [pc, #48]	; (8009ce4 <__libc_init_array+0x44>)
 8009cb4:	f001 fe2a 	bl	800b90c <_init>
 8009cb8:	1b64      	subs	r4, r4, r5
 8009cba:	10a4      	asrs	r4, r4, #2
 8009cbc:	2600      	movs	r6, #0
 8009cbe:	42a6      	cmp	r6, r4
 8009cc0:	d105      	bne.n	8009cce <__libc_init_array+0x2e>
 8009cc2:	bd70      	pop	{r4, r5, r6, pc}
 8009cc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cc8:	4798      	blx	r3
 8009cca:	3601      	adds	r6, #1
 8009ccc:	e7ee      	b.n	8009cac <__libc_init_array+0xc>
 8009cce:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cd2:	4798      	blx	r3
 8009cd4:	3601      	adds	r6, #1
 8009cd6:	e7f2      	b.n	8009cbe <__libc_init_array+0x1e>
 8009cd8:	0800c354 	.word	0x0800c354
 8009cdc:	0800c354 	.word	0x0800c354
 8009ce0:	0800c354 	.word	0x0800c354
 8009ce4:	0800c358 	.word	0x0800c358

08009ce8 <memcpy>:
 8009ce8:	440a      	add	r2, r1
 8009cea:	4291      	cmp	r1, r2
 8009cec:	f100 33ff 	add.w	r3, r0, #4294967295
 8009cf0:	d100      	bne.n	8009cf4 <memcpy+0xc>
 8009cf2:	4770      	bx	lr
 8009cf4:	b510      	push	{r4, lr}
 8009cf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009cfa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009cfe:	4291      	cmp	r1, r2
 8009d00:	d1f9      	bne.n	8009cf6 <memcpy+0xe>
 8009d02:	bd10      	pop	{r4, pc}

08009d04 <memset>:
 8009d04:	4402      	add	r2, r0
 8009d06:	4603      	mov	r3, r0
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d100      	bne.n	8009d0e <memset+0xa>
 8009d0c:	4770      	bx	lr
 8009d0e:	f803 1b01 	strb.w	r1, [r3], #1
 8009d12:	e7f9      	b.n	8009d08 <memset+0x4>

08009d14 <iprintf>:
 8009d14:	b40f      	push	{r0, r1, r2, r3}
 8009d16:	4b0a      	ldr	r3, [pc, #40]	; (8009d40 <iprintf+0x2c>)
 8009d18:	b513      	push	{r0, r1, r4, lr}
 8009d1a:	681c      	ldr	r4, [r3, #0]
 8009d1c:	b124      	cbz	r4, 8009d28 <iprintf+0x14>
 8009d1e:	69a3      	ldr	r3, [r4, #24]
 8009d20:	b913      	cbnz	r3, 8009d28 <iprintf+0x14>
 8009d22:	4620      	mov	r0, r4
 8009d24:	f000 fc14 	bl	800a550 <__sinit>
 8009d28:	ab05      	add	r3, sp, #20
 8009d2a:	9a04      	ldr	r2, [sp, #16]
 8009d2c:	68a1      	ldr	r1, [r4, #8]
 8009d2e:	9301      	str	r3, [sp, #4]
 8009d30:	4620      	mov	r0, r4
 8009d32:	f001 f81b 	bl	800ad6c <_vfiprintf_r>
 8009d36:	b002      	add	sp, #8
 8009d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d3c:	b004      	add	sp, #16
 8009d3e:	4770      	bx	lr
 8009d40:	20000034 	.word	0x20000034

08009d44 <_puts_r>:
 8009d44:	b570      	push	{r4, r5, r6, lr}
 8009d46:	460e      	mov	r6, r1
 8009d48:	4605      	mov	r5, r0
 8009d4a:	b118      	cbz	r0, 8009d54 <_puts_r+0x10>
 8009d4c:	6983      	ldr	r3, [r0, #24]
 8009d4e:	b90b      	cbnz	r3, 8009d54 <_puts_r+0x10>
 8009d50:	f000 fbfe 	bl	800a550 <__sinit>
 8009d54:	69ab      	ldr	r3, [r5, #24]
 8009d56:	68ac      	ldr	r4, [r5, #8]
 8009d58:	b913      	cbnz	r3, 8009d60 <_puts_r+0x1c>
 8009d5a:	4628      	mov	r0, r5
 8009d5c:	f000 fbf8 	bl	800a550 <__sinit>
 8009d60:	4b2c      	ldr	r3, [pc, #176]	; (8009e14 <_puts_r+0xd0>)
 8009d62:	429c      	cmp	r4, r3
 8009d64:	d120      	bne.n	8009da8 <_puts_r+0x64>
 8009d66:	686c      	ldr	r4, [r5, #4]
 8009d68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d6a:	07db      	lsls	r3, r3, #31
 8009d6c:	d405      	bmi.n	8009d7a <_puts_r+0x36>
 8009d6e:	89a3      	ldrh	r3, [r4, #12]
 8009d70:	0598      	lsls	r0, r3, #22
 8009d72:	d402      	bmi.n	8009d7a <_puts_r+0x36>
 8009d74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d76:	f000 fc9b 	bl	800a6b0 <__retarget_lock_acquire_recursive>
 8009d7a:	89a3      	ldrh	r3, [r4, #12]
 8009d7c:	0719      	lsls	r1, r3, #28
 8009d7e:	d51d      	bpl.n	8009dbc <_puts_r+0x78>
 8009d80:	6923      	ldr	r3, [r4, #16]
 8009d82:	b1db      	cbz	r3, 8009dbc <_puts_r+0x78>
 8009d84:	3e01      	subs	r6, #1
 8009d86:	68a3      	ldr	r3, [r4, #8]
 8009d88:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009d8c:	3b01      	subs	r3, #1
 8009d8e:	60a3      	str	r3, [r4, #8]
 8009d90:	bb39      	cbnz	r1, 8009de2 <_puts_r+0x9e>
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	da38      	bge.n	8009e08 <_puts_r+0xc4>
 8009d96:	4622      	mov	r2, r4
 8009d98:	210a      	movs	r1, #10
 8009d9a:	4628      	mov	r0, r5
 8009d9c:	f000 f9be 	bl	800a11c <__swbuf_r>
 8009da0:	3001      	adds	r0, #1
 8009da2:	d011      	beq.n	8009dc8 <_puts_r+0x84>
 8009da4:	250a      	movs	r5, #10
 8009da6:	e011      	b.n	8009dcc <_puts_r+0x88>
 8009da8:	4b1b      	ldr	r3, [pc, #108]	; (8009e18 <_puts_r+0xd4>)
 8009daa:	429c      	cmp	r4, r3
 8009dac:	d101      	bne.n	8009db2 <_puts_r+0x6e>
 8009dae:	68ac      	ldr	r4, [r5, #8]
 8009db0:	e7da      	b.n	8009d68 <_puts_r+0x24>
 8009db2:	4b1a      	ldr	r3, [pc, #104]	; (8009e1c <_puts_r+0xd8>)
 8009db4:	429c      	cmp	r4, r3
 8009db6:	bf08      	it	eq
 8009db8:	68ec      	ldreq	r4, [r5, #12]
 8009dba:	e7d5      	b.n	8009d68 <_puts_r+0x24>
 8009dbc:	4621      	mov	r1, r4
 8009dbe:	4628      	mov	r0, r5
 8009dc0:	f000 fa10 	bl	800a1e4 <__swsetup_r>
 8009dc4:	2800      	cmp	r0, #0
 8009dc6:	d0dd      	beq.n	8009d84 <_puts_r+0x40>
 8009dc8:	f04f 35ff 	mov.w	r5, #4294967295
 8009dcc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009dce:	07da      	lsls	r2, r3, #31
 8009dd0:	d405      	bmi.n	8009dde <_puts_r+0x9a>
 8009dd2:	89a3      	ldrh	r3, [r4, #12]
 8009dd4:	059b      	lsls	r3, r3, #22
 8009dd6:	d402      	bmi.n	8009dde <_puts_r+0x9a>
 8009dd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009dda:	f000 fc6a 	bl	800a6b2 <__retarget_lock_release_recursive>
 8009dde:	4628      	mov	r0, r5
 8009de0:	bd70      	pop	{r4, r5, r6, pc}
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	da04      	bge.n	8009df0 <_puts_r+0xac>
 8009de6:	69a2      	ldr	r2, [r4, #24]
 8009de8:	429a      	cmp	r2, r3
 8009dea:	dc06      	bgt.n	8009dfa <_puts_r+0xb6>
 8009dec:	290a      	cmp	r1, #10
 8009dee:	d004      	beq.n	8009dfa <_puts_r+0xb6>
 8009df0:	6823      	ldr	r3, [r4, #0]
 8009df2:	1c5a      	adds	r2, r3, #1
 8009df4:	6022      	str	r2, [r4, #0]
 8009df6:	7019      	strb	r1, [r3, #0]
 8009df8:	e7c5      	b.n	8009d86 <_puts_r+0x42>
 8009dfa:	4622      	mov	r2, r4
 8009dfc:	4628      	mov	r0, r5
 8009dfe:	f000 f98d 	bl	800a11c <__swbuf_r>
 8009e02:	3001      	adds	r0, #1
 8009e04:	d1bf      	bne.n	8009d86 <_puts_r+0x42>
 8009e06:	e7df      	b.n	8009dc8 <_puts_r+0x84>
 8009e08:	6823      	ldr	r3, [r4, #0]
 8009e0a:	250a      	movs	r5, #10
 8009e0c:	1c5a      	adds	r2, r3, #1
 8009e0e:	6022      	str	r2, [r4, #0]
 8009e10:	701d      	strb	r5, [r3, #0]
 8009e12:	e7db      	b.n	8009dcc <_puts_r+0x88>
 8009e14:	0800c2bc 	.word	0x0800c2bc
 8009e18:	0800c2dc 	.word	0x0800c2dc
 8009e1c:	0800c29c 	.word	0x0800c29c

08009e20 <puts>:
 8009e20:	4b02      	ldr	r3, [pc, #8]	; (8009e2c <puts+0xc>)
 8009e22:	4601      	mov	r1, r0
 8009e24:	6818      	ldr	r0, [r3, #0]
 8009e26:	f7ff bf8d 	b.w	8009d44 <_puts_r>
 8009e2a:	bf00      	nop
 8009e2c:	20000034 	.word	0x20000034

08009e30 <siscanf>:
 8009e30:	b40e      	push	{r1, r2, r3}
 8009e32:	b510      	push	{r4, lr}
 8009e34:	b09f      	sub	sp, #124	; 0x7c
 8009e36:	ac21      	add	r4, sp, #132	; 0x84
 8009e38:	f44f 7101 	mov.w	r1, #516	; 0x204
 8009e3c:	f854 2b04 	ldr.w	r2, [r4], #4
 8009e40:	9201      	str	r2, [sp, #4]
 8009e42:	f8ad 101c 	strh.w	r1, [sp, #28]
 8009e46:	9004      	str	r0, [sp, #16]
 8009e48:	9008      	str	r0, [sp, #32]
 8009e4a:	f7f6 f9cb 	bl	80001e4 <strlen>
 8009e4e:	4b0c      	ldr	r3, [pc, #48]	; (8009e80 <siscanf+0x50>)
 8009e50:	9005      	str	r0, [sp, #20]
 8009e52:	9009      	str	r0, [sp, #36]	; 0x24
 8009e54:	930d      	str	r3, [sp, #52]	; 0x34
 8009e56:	480b      	ldr	r0, [pc, #44]	; (8009e84 <siscanf+0x54>)
 8009e58:	9a01      	ldr	r2, [sp, #4]
 8009e5a:	6800      	ldr	r0, [r0, #0]
 8009e5c:	9403      	str	r4, [sp, #12]
 8009e5e:	2300      	movs	r3, #0
 8009e60:	9311      	str	r3, [sp, #68]	; 0x44
 8009e62:	9316      	str	r3, [sp, #88]	; 0x58
 8009e64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009e68:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009e6c:	a904      	add	r1, sp, #16
 8009e6e:	4623      	mov	r3, r4
 8009e70:	f000 fdda 	bl	800aa28 <__ssvfiscanf_r>
 8009e74:	b01f      	add	sp, #124	; 0x7c
 8009e76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e7a:	b003      	add	sp, #12
 8009e7c:	4770      	bx	lr
 8009e7e:	bf00      	nop
 8009e80:	08009eab 	.word	0x08009eab
 8009e84:	20000034 	.word	0x20000034

08009e88 <__sread>:
 8009e88:	b510      	push	{r4, lr}
 8009e8a:	460c      	mov	r4, r1
 8009e8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e90:	f001 fb82 	bl	800b598 <_read_r>
 8009e94:	2800      	cmp	r0, #0
 8009e96:	bfab      	itete	ge
 8009e98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009e9a:	89a3      	ldrhlt	r3, [r4, #12]
 8009e9c:	181b      	addge	r3, r3, r0
 8009e9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009ea2:	bfac      	ite	ge
 8009ea4:	6563      	strge	r3, [r4, #84]	; 0x54
 8009ea6:	81a3      	strhlt	r3, [r4, #12]
 8009ea8:	bd10      	pop	{r4, pc}

08009eaa <__seofread>:
 8009eaa:	2000      	movs	r0, #0
 8009eac:	4770      	bx	lr

08009eae <__swrite>:
 8009eae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009eb2:	461f      	mov	r7, r3
 8009eb4:	898b      	ldrh	r3, [r1, #12]
 8009eb6:	05db      	lsls	r3, r3, #23
 8009eb8:	4605      	mov	r5, r0
 8009eba:	460c      	mov	r4, r1
 8009ebc:	4616      	mov	r6, r2
 8009ebe:	d505      	bpl.n	8009ecc <__swrite+0x1e>
 8009ec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ec4:	2302      	movs	r3, #2
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	f000 fbf4 	bl	800a6b4 <_lseek_r>
 8009ecc:	89a3      	ldrh	r3, [r4, #12]
 8009ece:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ed2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ed6:	81a3      	strh	r3, [r4, #12]
 8009ed8:	4632      	mov	r2, r6
 8009eda:	463b      	mov	r3, r7
 8009edc:	4628      	mov	r0, r5
 8009ede:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ee2:	f000 b96d 	b.w	800a1c0 <_write_r>

08009ee6 <__sseek>:
 8009ee6:	b510      	push	{r4, lr}
 8009ee8:	460c      	mov	r4, r1
 8009eea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009eee:	f000 fbe1 	bl	800a6b4 <_lseek_r>
 8009ef2:	1c43      	adds	r3, r0, #1
 8009ef4:	89a3      	ldrh	r3, [r4, #12]
 8009ef6:	bf15      	itete	ne
 8009ef8:	6560      	strne	r0, [r4, #84]	; 0x54
 8009efa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009efe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009f02:	81a3      	strheq	r3, [r4, #12]
 8009f04:	bf18      	it	ne
 8009f06:	81a3      	strhne	r3, [r4, #12]
 8009f08:	bd10      	pop	{r4, pc}

08009f0a <__sclose>:
 8009f0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f0e:	f000 b9f5 	b.w	800a2fc <_close_r>

08009f12 <strcpy>:
 8009f12:	4603      	mov	r3, r0
 8009f14:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f18:	f803 2b01 	strb.w	r2, [r3], #1
 8009f1c:	2a00      	cmp	r2, #0
 8009f1e:	d1f9      	bne.n	8009f14 <strcpy+0x2>
 8009f20:	4770      	bx	lr

08009f22 <strncpy>:
 8009f22:	b510      	push	{r4, lr}
 8009f24:	3901      	subs	r1, #1
 8009f26:	4603      	mov	r3, r0
 8009f28:	b132      	cbz	r2, 8009f38 <strncpy+0x16>
 8009f2a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009f2e:	f803 4b01 	strb.w	r4, [r3], #1
 8009f32:	3a01      	subs	r2, #1
 8009f34:	2c00      	cmp	r4, #0
 8009f36:	d1f7      	bne.n	8009f28 <strncpy+0x6>
 8009f38:	441a      	add	r2, r3
 8009f3a:	2100      	movs	r1, #0
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d100      	bne.n	8009f42 <strncpy+0x20>
 8009f40:	bd10      	pop	{r4, pc}
 8009f42:	f803 1b01 	strb.w	r1, [r3], #1
 8009f46:	e7f9      	b.n	8009f3c <strncpy+0x1a>

08009f48 <strtok>:
 8009f48:	4b16      	ldr	r3, [pc, #88]	; (8009fa4 <strtok+0x5c>)
 8009f4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009f4c:	681e      	ldr	r6, [r3, #0]
 8009f4e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8009f50:	4605      	mov	r5, r0
 8009f52:	b9fc      	cbnz	r4, 8009f94 <strtok+0x4c>
 8009f54:	2050      	movs	r0, #80	; 0x50
 8009f56:	9101      	str	r1, [sp, #4]
 8009f58:	f000 fc24 	bl	800a7a4 <malloc>
 8009f5c:	9901      	ldr	r1, [sp, #4]
 8009f5e:	65b0      	str	r0, [r6, #88]	; 0x58
 8009f60:	4602      	mov	r2, r0
 8009f62:	b920      	cbnz	r0, 8009f6e <strtok+0x26>
 8009f64:	4b10      	ldr	r3, [pc, #64]	; (8009fa8 <strtok+0x60>)
 8009f66:	4811      	ldr	r0, [pc, #68]	; (8009fac <strtok+0x64>)
 8009f68:	2157      	movs	r1, #87	; 0x57
 8009f6a:	f000 f9a9 	bl	800a2c0 <__assert_func>
 8009f6e:	e9c0 4400 	strd	r4, r4, [r0]
 8009f72:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009f76:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009f7a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8009f7e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8009f82:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8009f86:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8009f8a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8009f8e:	6184      	str	r4, [r0, #24]
 8009f90:	7704      	strb	r4, [r0, #28]
 8009f92:	6244      	str	r4, [r0, #36]	; 0x24
 8009f94:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8009f96:	2301      	movs	r3, #1
 8009f98:	4628      	mov	r0, r5
 8009f9a:	b002      	add	sp, #8
 8009f9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009fa0:	f000 b806 	b.w	8009fb0 <__strtok_r>
 8009fa4:	20000034 	.word	0x20000034
 8009fa8:	0800c0e8 	.word	0x0800c0e8
 8009fac:	0800c0ff 	.word	0x0800c0ff

08009fb0 <__strtok_r>:
 8009fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fb2:	b908      	cbnz	r0, 8009fb8 <__strtok_r+0x8>
 8009fb4:	6810      	ldr	r0, [r2, #0]
 8009fb6:	b188      	cbz	r0, 8009fdc <__strtok_r+0x2c>
 8009fb8:	4604      	mov	r4, r0
 8009fba:	4620      	mov	r0, r4
 8009fbc:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009fc0:	460f      	mov	r7, r1
 8009fc2:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009fc6:	b91e      	cbnz	r6, 8009fd0 <__strtok_r+0x20>
 8009fc8:	b965      	cbnz	r5, 8009fe4 <__strtok_r+0x34>
 8009fca:	6015      	str	r5, [r2, #0]
 8009fcc:	4628      	mov	r0, r5
 8009fce:	e005      	b.n	8009fdc <__strtok_r+0x2c>
 8009fd0:	42b5      	cmp	r5, r6
 8009fd2:	d1f6      	bne.n	8009fc2 <__strtok_r+0x12>
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d1f0      	bne.n	8009fba <__strtok_r+0xa>
 8009fd8:	6014      	str	r4, [r2, #0]
 8009fda:	7003      	strb	r3, [r0, #0]
 8009fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fde:	461c      	mov	r4, r3
 8009fe0:	e00c      	b.n	8009ffc <__strtok_r+0x4c>
 8009fe2:	b915      	cbnz	r5, 8009fea <__strtok_r+0x3a>
 8009fe4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009fe8:	460e      	mov	r6, r1
 8009fea:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009fee:	42ab      	cmp	r3, r5
 8009ff0:	d1f7      	bne.n	8009fe2 <__strtok_r+0x32>
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d0f3      	beq.n	8009fde <__strtok_r+0x2e>
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009ffc:	6014      	str	r4, [r2, #0]
 8009ffe:	e7ed      	b.n	8009fdc <__strtok_r+0x2c>

0800a000 <_strtol_l.constprop.0>:
 800a000:	2b01      	cmp	r3, #1
 800a002:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a006:	d001      	beq.n	800a00c <_strtol_l.constprop.0+0xc>
 800a008:	2b24      	cmp	r3, #36	; 0x24
 800a00a:	d906      	bls.n	800a01a <_strtol_l.constprop.0+0x1a>
 800a00c:	f7ff fe42 	bl	8009c94 <__errno>
 800a010:	2316      	movs	r3, #22
 800a012:	6003      	str	r3, [r0, #0]
 800a014:	2000      	movs	r0, #0
 800a016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a01a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a100 <_strtol_l.constprop.0+0x100>
 800a01e:	460d      	mov	r5, r1
 800a020:	462e      	mov	r6, r5
 800a022:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a026:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a02a:	f017 0708 	ands.w	r7, r7, #8
 800a02e:	d1f7      	bne.n	800a020 <_strtol_l.constprop.0+0x20>
 800a030:	2c2d      	cmp	r4, #45	; 0x2d
 800a032:	d132      	bne.n	800a09a <_strtol_l.constprop.0+0x9a>
 800a034:	782c      	ldrb	r4, [r5, #0]
 800a036:	2701      	movs	r7, #1
 800a038:	1cb5      	adds	r5, r6, #2
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d05b      	beq.n	800a0f6 <_strtol_l.constprop.0+0xf6>
 800a03e:	2b10      	cmp	r3, #16
 800a040:	d109      	bne.n	800a056 <_strtol_l.constprop.0+0x56>
 800a042:	2c30      	cmp	r4, #48	; 0x30
 800a044:	d107      	bne.n	800a056 <_strtol_l.constprop.0+0x56>
 800a046:	782c      	ldrb	r4, [r5, #0]
 800a048:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a04c:	2c58      	cmp	r4, #88	; 0x58
 800a04e:	d14d      	bne.n	800a0ec <_strtol_l.constprop.0+0xec>
 800a050:	786c      	ldrb	r4, [r5, #1]
 800a052:	2310      	movs	r3, #16
 800a054:	3502      	adds	r5, #2
 800a056:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a05a:	f108 38ff 	add.w	r8, r8, #4294967295
 800a05e:	f04f 0c00 	mov.w	ip, #0
 800a062:	fbb8 f9f3 	udiv	r9, r8, r3
 800a066:	4666      	mov	r6, ip
 800a068:	fb03 8a19 	mls	sl, r3, r9, r8
 800a06c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a070:	f1be 0f09 	cmp.w	lr, #9
 800a074:	d816      	bhi.n	800a0a4 <_strtol_l.constprop.0+0xa4>
 800a076:	4674      	mov	r4, lr
 800a078:	42a3      	cmp	r3, r4
 800a07a:	dd24      	ble.n	800a0c6 <_strtol_l.constprop.0+0xc6>
 800a07c:	f1bc 0f00 	cmp.w	ip, #0
 800a080:	db1e      	blt.n	800a0c0 <_strtol_l.constprop.0+0xc0>
 800a082:	45b1      	cmp	r9, r6
 800a084:	d31c      	bcc.n	800a0c0 <_strtol_l.constprop.0+0xc0>
 800a086:	d101      	bne.n	800a08c <_strtol_l.constprop.0+0x8c>
 800a088:	45a2      	cmp	sl, r4
 800a08a:	db19      	blt.n	800a0c0 <_strtol_l.constprop.0+0xc0>
 800a08c:	fb06 4603 	mla	r6, r6, r3, r4
 800a090:	f04f 0c01 	mov.w	ip, #1
 800a094:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a098:	e7e8      	b.n	800a06c <_strtol_l.constprop.0+0x6c>
 800a09a:	2c2b      	cmp	r4, #43	; 0x2b
 800a09c:	bf04      	itt	eq
 800a09e:	782c      	ldrbeq	r4, [r5, #0]
 800a0a0:	1cb5      	addeq	r5, r6, #2
 800a0a2:	e7ca      	b.n	800a03a <_strtol_l.constprop.0+0x3a>
 800a0a4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a0a8:	f1be 0f19 	cmp.w	lr, #25
 800a0ac:	d801      	bhi.n	800a0b2 <_strtol_l.constprop.0+0xb2>
 800a0ae:	3c37      	subs	r4, #55	; 0x37
 800a0b0:	e7e2      	b.n	800a078 <_strtol_l.constprop.0+0x78>
 800a0b2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a0b6:	f1be 0f19 	cmp.w	lr, #25
 800a0ba:	d804      	bhi.n	800a0c6 <_strtol_l.constprop.0+0xc6>
 800a0bc:	3c57      	subs	r4, #87	; 0x57
 800a0be:	e7db      	b.n	800a078 <_strtol_l.constprop.0+0x78>
 800a0c0:	f04f 3cff 	mov.w	ip, #4294967295
 800a0c4:	e7e6      	b.n	800a094 <_strtol_l.constprop.0+0x94>
 800a0c6:	f1bc 0f00 	cmp.w	ip, #0
 800a0ca:	da05      	bge.n	800a0d8 <_strtol_l.constprop.0+0xd8>
 800a0cc:	2322      	movs	r3, #34	; 0x22
 800a0ce:	6003      	str	r3, [r0, #0]
 800a0d0:	4646      	mov	r6, r8
 800a0d2:	b942      	cbnz	r2, 800a0e6 <_strtol_l.constprop.0+0xe6>
 800a0d4:	4630      	mov	r0, r6
 800a0d6:	e79e      	b.n	800a016 <_strtol_l.constprop.0+0x16>
 800a0d8:	b107      	cbz	r7, 800a0dc <_strtol_l.constprop.0+0xdc>
 800a0da:	4276      	negs	r6, r6
 800a0dc:	2a00      	cmp	r2, #0
 800a0de:	d0f9      	beq.n	800a0d4 <_strtol_l.constprop.0+0xd4>
 800a0e0:	f1bc 0f00 	cmp.w	ip, #0
 800a0e4:	d000      	beq.n	800a0e8 <_strtol_l.constprop.0+0xe8>
 800a0e6:	1e69      	subs	r1, r5, #1
 800a0e8:	6011      	str	r1, [r2, #0]
 800a0ea:	e7f3      	b.n	800a0d4 <_strtol_l.constprop.0+0xd4>
 800a0ec:	2430      	movs	r4, #48	; 0x30
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d1b1      	bne.n	800a056 <_strtol_l.constprop.0+0x56>
 800a0f2:	2308      	movs	r3, #8
 800a0f4:	e7af      	b.n	800a056 <_strtol_l.constprop.0+0x56>
 800a0f6:	2c30      	cmp	r4, #48	; 0x30
 800a0f8:	d0a5      	beq.n	800a046 <_strtol_l.constprop.0+0x46>
 800a0fa:	230a      	movs	r3, #10
 800a0fc:	e7ab      	b.n	800a056 <_strtol_l.constprop.0+0x56>
 800a0fe:	bf00      	nop
 800a100:	0800c199 	.word	0x0800c199

0800a104 <_strtol_r>:
 800a104:	f7ff bf7c 	b.w	800a000 <_strtol_l.constprop.0>

0800a108 <strtol>:
 800a108:	4613      	mov	r3, r2
 800a10a:	460a      	mov	r2, r1
 800a10c:	4601      	mov	r1, r0
 800a10e:	4802      	ldr	r0, [pc, #8]	; (800a118 <strtol+0x10>)
 800a110:	6800      	ldr	r0, [r0, #0]
 800a112:	f7ff bf75 	b.w	800a000 <_strtol_l.constprop.0>
 800a116:	bf00      	nop
 800a118:	20000034 	.word	0x20000034

0800a11c <__swbuf_r>:
 800a11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a11e:	460e      	mov	r6, r1
 800a120:	4614      	mov	r4, r2
 800a122:	4605      	mov	r5, r0
 800a124:	b118      	cbz	r0, 800a12e <__swbuf_r+0x12>
 800a126:	6983      	ldr	r3, [r0, #24]
 800a128:	b90b      	cbnz	r3, 800a12e <__swbuf_r+0x12>
 800a12a:	f000 fa11 	bl	800a550 <__sinit>
 800a12e:	4b21      	ldr	r3, [pc, #132]	; (800a1b4 <__swbuf_r+0x98>)
 800a130:	429c      	cmp	r4, r3
 800a132:	d12b      	bne.n	800a18c <__swbuf_r+0x70>
 800a134:	686c      	ldr	r4, [r5, #4]
 800a136:	69a3      	ldr	r3, [r4, #24]
 800a138:	60a3      	str	r3, [r4, #8]
 800a13a:	89a3      	ldrh	r3, [r4, #12]
 800a13c:	071a      	lsls	r2, r3, #28
 800a13e:	d52f      	bpl.n	800a1a0 <__swbuf_r+0x84>
 800a140:	6923      	ldr	r3, [r4, #16]
 800a142:	b36b      	cbz	r3, 800a1a0 <__swbuf_r+0x84>
 800a144:	6923      	ldr	r3, [r4, #16]
 800a146:	6820      	ldr	r0, [r4, #0]
 800a148:	1ac0      	subs	r0, r0, r3
 800a14a:	6963      	ldr	r3, [r4, #20]
 800a14c:	b2f6      	uxtb	r6, r6
 800a14e:	4283      	cmp	r3, r0
 800a150:	4637      	mov	r7, r6
 800a152:	dc04      	bgt.n	800a15e <__swbuf_r+0x42>
 800a154:	4621      	mov	r1, r4
 800a156:	4628      	mov	r0, r5
 800a158:	f000 f966 	bl	800a428 <_fflush_r>
 800a15c:	bb30      	cbnz	r0, 800a1ac <__swbuf_r+0x90>
 800a15e:	68a3      	ldr	r3, [r4, #8]
 800a160:	3b01      	subs	r3, #1
 800a162:	60a3      	str	r3, [r4, #8]
 800a164:	6823      	ldr	r3, [r4, #0]
 800a166:	1c5a      	adds	r2, r3, #1
 800a168:	6022      	str	r2, [r4, #0]
 800a16a:	701e      	strb	r6, [r3, #0]
 800a16c:	6963      	ldr	r3, [r4, #20]
 800a16e:	3001      	adds	r0, #1
 800a170:	4283      	cmp	r3, r0
 800a172:	d004      	beq.n	800a17e <__swbuf_r+0x62>
 800a174:	89a3      	ldrh	r3, [r4, #12]
 800a176:	07db      	lsls	r3, r3, #31
 800a178:	d506      	bpl.n	800a188 <__swbuf_r+0x6c>
 800a17a:	2e0a      	cmp	r6, #10
 800a17c:	d104      	bne.n	800a188 <__swbuf_r+0x6c>
 800a17e:	4621      	mov	r1, r4
 800a180:	4628      	mov	r0, r5
 800a182:	f000 f951 	bl	800a428 <_fflush_r>
 800a186:	b988      	cbnz	r0, 800a1ac <__swbuf_r+0x90>
 800a188:	4638      	mov	r0, r7
 800a18a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a18c:	4b0a      	ldr	r3, [pc, #40]	; (800a1b8 <__swbuf_r+0x9c>)
 800a18e:	429c      	cmp	r4, r3
 800a190:	d101      	bne.n	800a196 <__swbuf_r+0x7a>
 800a192:	68ac      	ldr	r4, [r5, #8]
 800a194:	e7cf      	b.n	800a136 <__swbuf_r+0x1a>
 800a196:	4b09      	ldr	r3, [pc, #36]	; (800a1bc <__swbuf_r+0xa0>)
 800a198:	429c      	cmp	r4, r3
 800a19a:	bf08      	it	eq
 800a19c:	68ec      	ldreq	r4, [r5, #12]
 800a19e:	e7ca      	b.n	800a136 <__swbuf_r+0x1a>
 800a1a0:	4621      	mov	r1, r4
 800a1a2:	4628      	mov	r0, r5
 800a1a4:	f000 f81e 	bl	800a1e4 <__swsetup_r>
 800a1a8:	2800      	cmp	r0, #0
 800a1aa:	d0cb      	beq.n	800a144 <__swbuf_r+0x28>
 800a1ac:	f04f 37ff 	mov.w	r7, #4294967295
 800a1b0:	e7ea      	b.n	800a188 <__swbuf_r+0x6c>
 800a1b2:	bf00      	nop
 800a1b4:	0800c2bc 	.word	0x0800c2bc
 800a1b8:	0800c2dc 	.word	0x0800c2dc
 800a1bc:	0800c29c 	.word	0x0800c29c

0800a1c0 <_write_r>:
 800a1c0:	b538      	push	{r3, r4, r5, lr}
 800a1c2:	4d07      	ldr	r5, [pc, #28]	; (800a1e0 <_write_r+0x20>)
 800a1c4:	4604      	mov	r4, r0
 800a1c6:	4608      	mov	r0, r1
 800a1c8:	4611      	mov	r1, r2
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	602a      	str	r2, [r5, #0]
 800a1ce:	461a      	mov	r2, r3
 800a1d0:	f7f7 fe8a 	bl	8001ee8 <_write>
 800a1d4:	1c43      	adds	r3, r0, #1
 800a1d6:	d102      	bne.n	800a1de <_write_r+0x1e>
 800a1d8:	682b      	ldr	r3, [r5, #0]
 800a1da:	b103      	cbz	r3, 800a1de <_write_r+0x1e>
 800a1dc:	6023      	str	r3, [r4, #0]
 800a1de:	bd38      	pop	{r3, r4, r5, pc}
 800a1e0:	200038bc 	.word	0x200038bc

0800a1e4 <__swsetup_r>:
 800a1e4:	4b32      	ldr	r3, [pc, #200]	; (800a2b0 <__swsetup_r+0xcc>)
 800a1e6:	b570      	push	{r4, r5, r6, lr}
 800a1e8:	681d      	ldr	r5, [r3, #0]
 800a1ea:	4606      	mov	r6, r0
 800a1ec:	460c      	mov	r4, r1
 800a1ee:	b125      	cbz	r5, 800a1fa <__swsetup_r+0x16>
 800a1f0:	69ab      	ldr	r3, [r5, #24]
 800a1f2:	b913      	cbnz	r3, 800a1fa <__swsetup_r+0x16>
 800a1f4:	4628      	mov	r0, r5
 800a1f6:	f000 f9ab 	bl	800a550 <__sinit>
 800a1fa:	4b2e      	ldr	r3, [pc, #184]	; (800a2b4 <__swsetup_r+0xd0>)
 800a1fc:	429c      	cmp	r4, r3
 800a1fe:	d10f      	bne.n	800a220 <__swsetup_r+0x3c>
 800a200:	686c      	ldr	r4, [r5, #4]
 800a202:	89a3      	ldrh	r3, [r4, #12]
 800a204:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a208:	0719      	lsls	r1, r3, #28
 800a20a:	d42c      	bmi.n	800a266 <__swsetup_r+0x82>
 800a20c:	06dd      	lsls	r5, r3, #27
 800a20e:	d411      	bmi.n	800a234 <__swsetup_r+0x50>
 800a210:	2309      	movs	r3, #9
 800a212:	6033      	str	r3, [r6, #0]
 800a214:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a218:	81a3      	strh	r3, [r4, #12]
 800a21a:	f04f 30ff 	mov.w	r0, #4294967295
 800a21e:	e03e      	b.n	800a29e <__swsetup_r+0xba>
 800a220:	4b25      	ldr	r3, [pc, #148]	; (800a2b8 <__swsetup_r+0xd4>)
 800a222:	429c      	cmp	r4, r3
 800a224:	d101      	bne.n	800a22a <__swsetup_r+0x46>
 800a226:	68ac      	ldr	r4, [r5, #8]
 800a228:	e7eb      	b.n	800a202 <__swsetup_r+0x1e>
 800a22a:	4b24      	ldr	r3, [pc, #144]	; (800a2bc <__swsetup_r+0xd8>)
 800a22c:	429c      	cmp	r4, r3
 800a22e:	bf08      	it	eq
 800a230:	68ec      	ldreq	r4, [r5, #12]
 800a232:	e7e6      	b.n	800a202 <__swsetup_r+0x1e>
 800a234:	0758      	lsls	r0, r3, #29
 800a236:	d512      	bpl.n	800a25e <__swsetup_r+0x7a>
 800a238:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a23a:	b141      	cbz	r1, 800a24e <__swsetup_r+0x6a>
 800a23c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a240:	4299      	cmp	r1, r3
 800a242:	d002      	beq.n	800a24a <__swsetup_r+0x66>
 800a244:	4630      	mov	r0, r6
 800a246:	f000 fab5 	bl	800a7b4 <_free_r>
 800a24a:	2300      	movs	r3, #0
 800a24c:	6363      	str	r3, [r4, #52]	; 0x34
 800a24e:	89a3      	ldrh	r3, [r4, #12]
 800a250:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a254:	81a3      	strh	r3, [r4, #12]
 800a256:	2300      	movs	r3, #0
 800a258:	6063      	str	r3, [r4, #4]
 800a25a:	6923      	ldr	r3, [r4, #16]
 800a25c:	6023      	str	r3, [r4, #0]
 800a25e:	89a3      	ldrh	r3, [r4, #12]
 800a260:	f043 0308 	orr.w	r3, r3, #8
 800a264:	81a3      	strh	r3, [r4, #12]
 800a266:	6923      	ldr	r3, [r4, #16]
 800a268:	b94b      	cbnz	r3, 800a27e <__swsetup_r+0x9a>
 800a26a:	89a3      	ldrh	r3, [r4, #12]
 800a26c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a270:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a274:	d003      	beq.n	800a27e <__swsetup_r+0x9a>
 800a276:	4621      	mov	r1, r4
 800a278:	4630      	mov	r0, r6
 800a27a:	f000 fa53 	bl	800a724 <__smakebuf_r>
 800a27e:	89a0      	ldrh	r0, [r4, #12]
 800a280:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a284:	f010 0301 	ands.w	r3, r0, #1
 800a288:	d00a      	beq.n	800a2a0 <__swsetup_r+0xbc>
 800a28a:	2300      	movs	r3, #0
 800a28c:	60a3      	str	r3, [r4, #8]
 800a28e:	6963      	ldr	r3, [r4, #20]
 800a290:	425b      	negs	r3, r3
 800a292:	61a3      	str	r3, [r4, #24]
 800a294:	6923      	ldr	r3, [r4, #16]
 800a296:	b943      	cbnz	r3, 800a2aa <__swsetup_r+0xc6>
 800a298:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a29c:	d1ba      	bne.n	800a214 <__swsetup_r+0x30>
 800a29e:	bd70      	pop	{r4, r5, r6, pc}
 800a2a0:	0781      	lsls	r1, r0, #30
 800a2a2:	bf58      	it	pl
 800a2a4:	6963      	ldrpl	r3, [r4, #20]
 800a2a6:	60a3      	str	r3, [r4, #8]
 800a2a8:	e7f4      	b.n	800a294 <__swsetup_r+0xb0>
 800a2aa:	2000      	movs	r0, #0
 800a2ac:	e7f7      	b.n	800a29e <__swsetup_r+0xba>
 800a2ae:	bf00      	nop
 800a2b0:	20000034 	.word	0x20000034
 800a2b4:	0800c2bc 	.word	0x0800c2bc
 800a2b8:	0800c2dc 	.word	0x0800c2dc
 800a2bc:	0800c29c 	.word	0x0800c29c

0800a2c0 <__assert_func>:
 800a2c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a2c2:	4614      	mov	r4, r2
 800a2c4:	461a      	mov	r2, r3
 800a2c6:	4b09      	ldr	r3, [pc, #36]	; (800a2ec <__assert_func+0x2c>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	4605      	mov	r5, r0
 800a2cc:	68d8      	ldr	r0, [r3, #12]
 800a2ce:	b14c      	cbz	r4, 800a2e4 <__assert_func+0x24>
 800a2d0:	4b07      	ldr	r3, [pc, #28]	; (800a2f0 <__assert_func+0x30>)
 800a2d2:	9100      	str	r1, [sp, #0]
 800a2d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a2d8:	4906      	ldr	r1, [pc, #24]	; (800a2f4 <__assert_func+0x34>)
 800a2da:	462b      	mov	r3, r5
 800a2dc:	f000 f9b6 	bl	800a64c <fiprintf>
 800a2e0:	f001 fa62 	bl	800b7a8 <abort>
 800a2e4:	4b04      	ldr	r3, [pc, #16]	; (800a2f8 <__assert_func+0x38>)
 800a2e6:	461c      	mov	r4, r3
 800a2e8:	e7f3      	b.n	800a2d2 <__assert_func+0x12>
 800a2ea:	bf00      	nop
 800a2ec:	20000034 	.word	0x20000034
 800a2f0:	0800c15c 	.word	0x0800c15c
 800a2f4:	0800c169 	.word	0x0800c169
 800a2f8:	0800c197 	.word	0x0800c197

0800a2fc <_close_r>:
 800a2fc:	b538      	push	{r3, r4, r5, lr}
 800a2fe:	4d06      	ldr	r5, [pc, #24]	; (800a318 <_close_r+0x1c>)
 800a300:	2300      	movs	r3, #0
 800a302:	4604      	mov	r4, r0
 800a304:	4608      	mov	r0, r1
 800a306:	602b      	str	r3, [r5, #0]
 800a308:	f7f8 f813 	bl	8002332 <_close>
 800a30c:	1c43      	adds	r3, r0, #1
 800a30e:	d102      	bne.n	800a316 <_close_r+0x1a>
 800a310:	682b      	ldr	r3, [r5, #0]
 800a312:	b103      	cbz	r3, 800a316 <_close_r+0x1a>
 800a314:	6023      	str	r3, [r4, #0]
 800a316:	bd38      	pop	{r3, r4, r5, pc}
 800a318:	200038bc 	.word	0x200038bc

0800a31c <__sflush_r>:
 800a31c:	898a      	ldrh	r2, [r1, #12]
 800a31e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a322:	4605      	mov	r5, r0
 800a324:	0710      	lsls	r0, r2, #28
 800a326:	460c      	mov	r4, r1
 800a328:	d458      	bmi.n	800a3dc <__sflush_r+0xc0>
 800a32a:	684b      	ldr	r3, [r1, #4]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	dc05      	bgt.n	800a33c <__sflush_r+0x20>
 800a330:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a332:	2b00      	cmp	r3, #0
 800a334:	dc02      	bgt.n	800a33c <__sflush_r+0x20>
 800a336:	2000      	movs	r0, #0
 800a338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a33c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a33e:	2e00      	cmp	r6, #0
 800a340:	d0f9      	beq.n	800a336 <__sflush_r+0x1a>
 800a342:	2300      	movs	r3, #0
 800a344:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a348:	682f      	ldr	r7, [r5, #0]
 800a34a:	602b      	str	r3, [r5, #0]
 800a34c:	d032      	beq.n	800a3b4 <__sflush_r+0x98>
 800a34e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a350:	89a3      	ldrh	r3, [r4, #12]
 800a352:	075a      	lsls	r2, r3, #29
 800a354:	d505      	bpl.n	800a362 <__sflush_r+0x46>
 800a356:	6863      	ldr	r3, [r4, #4]
 800a358:	1ac0      	subs	r0, r0, r3
 800a35a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a35c:	b10b      	cbz	r3, 800a362 <__sflush_r+0x46>
 800a35e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a360:	1ac0      	subs	r0, r0, r3
 800a362:	2300      	movs	r3, #0
 800a364:	4602      	mov	r2, r0
 800a366:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a368:	6a21      	ldr	r1, [r4, #32]
 800a36a:	4628      	mov	r0, r5
 800a36c:	47b0      	blx	r6
 800a36e:	1c43      	adds	r3, r0, #1
 800a370:	89a3      	ldrh	r3, [r4, #12]
 800a372:	d106      	bne.n	800a382 <__sflush_r+0x66>
 800a374:	6829      	ldr	r1, [r5, #0]
 800a376:	291d      	cmp	r1, #29
 800a378:	d82c      	bhi.n	800a3d4 <__sflush_r+0xb8>
 800a37a:	4a2a      	ldr	r2, [pc, #168]	; (800a424 <__sflush_r+0x108>)
 800a37c:	40ca      	lsrs	r2, r1
 800a37e:	07d6      	lsls	r6, r2, #31
 800a380:	d528      	bpl.n	800a3d4 <__sflush_r+0xb8>
 800a382:	2200      	movs	r2, #0
 800a384:	6062      	str	r2, [r4, #4]
 800a386:	04d9      	lsls	r1, r3, #19
 800a388:	6922      	ldr	r2, [r4, #16]
 800a38a:	6022      	str	r2, [r4, #0]
 800a38c:	d504      	bpl.n	800a398 <__sflush_r+0x7c>
 800a38e:	1c42      	adds	r2, r0, #1
 800a390:	d101      	bne.n	800a396 <__sflush_r+0x7a>
 800a392:	682b      	ldr	r3, [r5, #0]
 800a394:	b903      	cbnz	r3, 800a398 <__sflush_r+0x7c>
 800a396:	6560      	str	r0, [r4, #84]	; 0x54
 800a398:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a39a:	602f      	str	r7, [r5, #0]
 800a39c:	2900      	cmp	r1, #0
 800a39e:	d0ca      	beq.n	800a336 <__sflush_r+0x1a>
 800a3a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a3a4:	4299      	cmp	r1, r3
 800a3a6:	d002      	beq.n	800a3ae <__sflush_r+0x92>
 800a3a8:	4628      	mov	r0, r5
 800a3aa:	f000 fa03 	bl	800a7b4 <_free_r>
 800a3ae:	2000      	movs	r0, #0
 800a3b0:	6360      	str	r0, [r4, #52]	; 0x34
 800a3b2:	e7c1      	b.n	800a338 <__sflush_r+0x1c>
 800a3b4:	6a21      	ldr	r1, [r4, #32]
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	4628      	mov	r0, r5
 800a3ba:	47b0      	blx	r6
 800a3bc:	1c41      	adds	r1, r0, #1
 800a3be:	d1c7      	bne.n	800a350 <__sflush_r+0x34>
 800a3c0:	682b      	ldr	r3, [r5, #0]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d0c4      	beq.n	800a350 <__sflush_r+0x34>
 800a3c6:	2b1d      	cmp	r3, #29
 800a3c8:	d001      	beq.n	800a3ce <__sflush_r+0xb2>
 800a3ca:	2b16      	cmp	r3, #22
 800a3cc:	d101      	bne.n	800a3d2 <__sflush_r+0xb6>
 800a3ce:	602f      	str	r7, [r5, #0]
 800a3d0:	e7b1      	b.n	800a336 <__sflush_r+0x1a>
 800a3d2:	89a3      	ldrh	r3, [r4, #12]
 800a3d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3d8:	81a3      	strh	r3, [r4, #12]
 800a3da:	e7ad      	b.n	800a338 <__sflush_r+0x1c>
 800a3dc:	690f      	ldr	r7, [r1, #16]
 800a3de:	2f00      	cmp	r7, #0
 800a3e0:	d0a9      	beq.n	800a336 <__sflush_r+0x1a>
 800a3e2:	0793      	lsls	r3, r2, #30
 800a3e4:	680e      	ldr	r6, [r1, #0]
 800a3e6:	bf08      	it	eq
 800a3e8:	694b      	ldreq	r3, [r1, #20]
 800a3ea:	600f      	str	r7, [r1, #0]
 800a3ec:	bf18      	it	ne
 800a3ee:	2300      	movne	r3, #0
 800a3f0:	eba6 0807 	sub.w	r8, r6, r7
 800a3f4:	608b      	str	r3, [r1, #8]
 800a3f6:	f1b8 0f00 	cmp.w	r8, #0
 800a3fa:	dd9c      	ble.n	800a336 <__sflush_r+0x1a>
 800a3fc:	6a21      	ldr	r1, [r4, #32]
 800a3fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a400:	4643      	mov	r3, r8
 800a402:	463a      	mov	r2, r7
 800a404:	4628      	mov	r0, r5
 800a406:	47b0      	blx	r6
 800a408:	2800      	cmp	r0, #0
 800a40a:	dc06      	bgt.n	800a41a <__sflush_r+0xfe>
 800a40c:	89a3      	ldrh	r3, [r4, #12]
 800a40e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a412:	81a3      	strh	r3, [r4, #12]
 800a414:	f04f 30ff 	mov.w	r0, #4294967295
 800a418:	e78e      	b.n	800a338 <__sflush_r+0x1c>
 800a41a:	4407      	add	r7, r0
 800a41c:	eba8 0800 	sub.w	r8, r8, r0
 800a420:	e7e9      	b.n	800a3f6 <__sflush_r+0xda>
 800a422:	bf00      	nop
 800a424:	20400001 	.word	0x20400001

0800a428 <_fflush_r>:
 800a428:	b538      	push	{r3, r4, r5, lr}
 800a42a:	690b      	ldr	r3, [r1, #16]
 800a42c:	4605      	mov	r5, r0
 800a42e:	460c      	mov	r4, r1
 800a430:	b913      	cbnz	r3, 800a438 <_fflush_r+0x10>
 800a432:	2500      	movs	r5, #0
 800a434:	4628      	mov	r0, r5
 800a436:	bd38      	pop	{r3, r4, r5, pc}
 800a438:	b118      	cbz	r0, 800a442 <_fflush_r+0x1a>
 800a43a:	6983      	ldr	r3, [r0, #24]
 800a43c:	b90b      	cbnz	r3, 800a442 <_fflush_r+0x1a>
 800a43e:	f000 f887 	bl	800a550 <__sinit>
 800a442:	4b14      	ldr	r3, [pc, #80]	; (800a494 <_fflush_r+0x6c>)
 800a444:	429c      	cmp	r4, r3
 800a446:	d11b      	bne.n	800a480 <_fflush_r+0x58>
 800a448:	686c      	ldr	r4, [r5, #4]
 800a44a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d0ef      	beq.n	800a432 <_fflush_r+0xa>
 800a452:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a454:	07d0      	lsls	r0, r2, #31
 800a456:	d404      	bmi.n	800a462 <_fflush_r+0x3a>
 800a458:	0599      	lsls	r1, r3, #22
 800a45a:	d402      	bmi.n	800a462 <_fflush_r+0x3a>
 800a45c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a45e:	f000 f927 	bl	800a6b0 <__retarget_lock_acquire_recursive>
 800a462:	4628      	mov	r0, r5
 800a464:	4621      	mov	r1, r4
 800a466:	f7ff ff59 	bl	800a31c <__sflush_r>
 800a46a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a46c:	07da      	lsls	r2, r3, #31
 800a46e:	4605      	mov	r5, r0
 800a470:	d4e0      	bmi.n	800a434 <_fflush_r+0xc>
 800a472:	89a3      	ldrh	r3, [r4, #12]
 800a474:	059b      	lsls	r3, r3, #22
 800a476:	d4dd      	bmi.n	800a434 <_fflush_r+0xc>
 800a478:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a47a:	f000 f91a 	bl	800a6b2 <__retarget_lock_release_recursive>
 800a47e:	e7d9      	b.n	800a434 <_fflush_r+0xc>
 800a480:	4b05      	ldr	r3, [pc, #20]	; (800a498 <_fflush_r+0x70>)
 800a482:	429c      	cmp	r4, r3
 800a484:	d101      	bne.n	800a48a <_fflush_r+0x62>
 800a486:	68ac      	ldr	r4, [r5, #8]
 800a488:	e7df      	b.n	800a44a <_fflush_r+0x22>
 800a48a:	4b04      	ldr	r3, [pc, #16]	; (800a49c <_fflush_r+0x74>)
 800a48c:	429c      	cmp	r4, r3
 800a48e:	bf08      	it	eq
 800a490:	68ec      	ldreq	r4, [r5, #12]
 800a492:	e7da      	b.n	800a44a <_fflush_r+0x22>
 800a494:	0800c2bc 	.word	0x0800c2bc
 800a498:	0800c2dc 	.word	0x0800c2dc
 800a49c:	0800c29c 	.word	0x0800c29c

0800a4a0 <std>:
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	b510      	push	{r4, lr}
 800a4a4:	4604      	mov	r4, r0
 800a4a6:	e9c0 3300 	strd	r3, r3, [r0]
 800a4aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a4ae:	6083      	str	r3, [r0, #8]
 800a4b0:	8181      	strh	r1, [r0, #12]
 800a4b2:	6643      	str	r3, [r0, #100]	; 0x64
 800a4b4:	81c2      	strh	r2, [r0, #14]
 800a4b6:	6183      	str	r3, [r0, #24]
 800a4b8:	4619      	mov	r1, r3
 800a4ba:	2208      	movs	r2, #8
 800a4bc:	305c      	adds	r0, #92	; 0x5c
 800a4be:	f7ff fc21 	bl	8009d04 <memset>
 800a4c2:	4b05      	ldr	r3, [pc, #20]	; (800a4d8 <std+0x38>)
 800a4c4:	6263      	str	r3, [r4, #36]	; 0x24
 800a4c6:	4b05      	ldr	r3, [pc, #20]	; (800a4dc <std+0x3c>)
 800a4c8:	62a3      	str	r3, [r4, #40]	; 0x28
 800a4ca:	4b05      	ldr	r3, [pc, #20]	; (800a4e0 <std+0x40>)
 800a4cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a4ce:	4b05      	ldr	r3, [pc, #20]	; (800a4e4 <std+0x44>)
 800a4d0:	6224      	str	r4, [r4, #32]
 800a4d2:	6323      	str	r3, [r4, #48]	; 0x30
 800a4d4:	bd10      	pop	{r4, pc}
 800a4d6:	bf00      	nop
 800a4d8:	08009e89 	.word	0x08009e89
 800a4dc:	08009eaf 	.word	0x08009eaf
 800a4e0:	08009ee7 	.word	0x08009ee7
 800a4e4:	08009f0b 	.word	0x08009f0b

0800a4e8 <_cleanup_r>:
 800a4e8:	4901      	ldr	r1, [pc, #4]	; (800a4f0 <_cleanup_r+0x8>)
 800a4ea:	f000 b8c1 	b.w	800a670 <_fwalk_reent>
 800a4ee:	bf00      	nop
 800a4f0:	0800a429 	.word	0x0800a429

0800a4f4 <__sfmoreglue>:
 800a4f4:	b570      	push	{r4, r5, r6, lr}
 800a4f6:	2268      	movs	r2, #104	; 0x68
 800a4f8:	1e4d      	subs	r5, r1, #1
 800a4fa:	4355      	muls	r5, r2
 800a4fc:	460e      	mov	r6, r1
 800a4fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a502:	f000 f9c3 	bl	800a88c <_malloc_r>
 800a506:	4604      	mov	r4, r0
 800a508:	b140      	cbz	r0, 800a51c <__sfmoreglue+0x28>
 800a50a:	2100      	movs	r1, #0
 800a50c:	e9c0 1600 	strd	r1, r6, [r0]
 800a510:	300c      	adds	r0, #12
 800a512:	60a0      	str	r0, [r4, #8]
 800a514:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a518:	f7ff fbf4 	bl	8009d04 <memset>
 800a51c:	4620      	mov	r0, r4
 800a51e:	bd70      	pop	{r4, r5, r6, pc}

0800a520 <__sfp_lock_acquire>:
 800a520:	4801      	ldr	r0, [pc, #4]	; (800a528 <__sfp_lock_acquire+0x8>)
 800a522:	f000 b8c5 	b.w	800a6b0 <__retarget_lock_acquire_recursive>
 800a526:	bf00      	nop
 800a528:	200038b1 	.word	0x200038b1

0800a52c <__sfp_lock_release>:
 800a52c:	4801      	ldr	r0, [pc, #4]	; (800a534 <__sfp_lock_release+0x8>)
 800a52e:	f000 b8c0 	b.w	800a6b2 <__retarget_lock_release_recursive>
 800a532:	bf00      	nop
 800a534:	200038b1 	.word	0x200038b1

0800a538 <__sinit_lock_acquire>:
 800a538:	4801      	ldr	r0, [pc, #4]	; (800a540 <__sinit_lock_acquire+0x8>)
 800a53a:	f000 b8b9 	b.w	800a6b0 <__retarget_lock_acquire_recursive>
 800a53e:	bf00      	nop
 800a540:	200038b2 	.word	0x200038b2

0800a544 <__sinit_lock_release>:
 800a544:	4801      	ldr	r0, [pc, #4]	; (800a54c <__sinit_lock_release+0x8>)
 800a546:	f000 b8b4 	b.w	800a6b2 <__retarget_lock_release_recursive>
 800a54a:	bf00      	nop
 800a54c:	200038b2 	.word	0x200038b2

0800a550 <__sinit>:
 800a550:	b510      	push	{r4, lr}
 800a552:	4604      	mov	r4, r0
 800a554:	f7ff fff0 	bl	800a538 <__sinit_lock_acquire>
 800a558:	69a3      	ldr	r3, [r4, #24]
 800a55a:	b11b      	cbz	r3, 800a564 <__sinit+0x14>
 800a55c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a560:	f7ff bff0 	b.w	800a544 <__sinit_lock_release>
 800a564:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a568:	6523      	str	r3, [r4, #80]	; 0x50
 800a56a:	4b13      	ldr	r3, [pc, #76]	; (800a5b8 <__sinit+0x68>)
 800a56c:	4a13      	ldr	r2, [pc, #76]	; (800a5bc <__sinit+0x6c>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	62a2      	str	r2, [r4, #40]	; 0x28
 800a572:	42a3      	cmp	r3, r4
 800a574:	bf04      	itt	eq
 800a576:	2301      	moveq	r3, #1
 800a578:	61a3      	streq	r3, [r4, #24]
 800a57a:	4620      	mov	r0, r4
 800a57c:	f000 f820 	bl	800a5c0 <__sfp>
 800a580:	6060      	str	r0, [r4, #4]
 800a582:	4620      	mov	r0, r4
 800a584:	f000 f81c 	bl	800a5c0 <__sfp>
 800a588:	60a0      	str	r0, [r4, #8]
 800a58a:	4620      	mov	r0, r4
 800a58c:	f000 f818 	bl	800a5c0 <__sfp>
 800a590:	2200      	movs	r2, #0
 800a592:	60e0      	str	r0, [r4, #12]
 800a594:	2104      	movs	r1, #4
 800a596:	6860      	ldr	r0, [r4, #4]
 800a598:	f7ff ff82 	bl	800a4a0 <std>
 800a59c:	68a0      	ldr	r0, [r4, #8]
 800a59e:	2201      	movs	r2, #1
 800a5a0:	2109      	movs	r1, #9
 800a5a2:	f7ff ff7d 	bl	800a4a0 <std>
 800a5a6:	68e0      	ldr	r0, [r4, #12]
 800a5a8:	2202      	movs	r2, #2
 800a5aa:	2112      	movs	r1, #18
 800a5ac:	f7ff ff78 	bl	800a4a0 <std>
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	61a3      	str	r3, [r4, #24]
 800a5b4:	e7d2      	b.n	800a55c <__sinit+0xc>
 800a5b6:	bf00      	nop
 800a5b8:	0800c0e4 	.word	0x0800c0e4
 800a5bc:	0800a4e9 	.word	0x0800a4e9

0800a5c0 <__sfp>:
 800a5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5c2:	4607      	mov	r7, r0
 800a5c4:	f7ff ffac 	bl	800a520 <__sfp_lock_acquire>
 800a5c8:	4b1e      	ldr	r3, [pc, #120]	; (800a644 <__sfp+0x84>)
 800a5ca:	681e      	ldr	r6, [r3, #0]
 800a5cc:	69b3      	ldr	r3, [r6, #24]
 800a5ce:	b913      	cbnz	r3, 800a5d6 <__sfp+0x16>
 800a5d0:	4630      	mov	r0, r6
 800a5d2:	f7ff ffbd 	bl	800a550 <__sinit>
 800a5d6:	3648      	adds	r6, #72	; 0x48
 800a5d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a5dc:	3b01      	subs	r3, #1
 800a5de:	d503      	bpl.n	800a5e8 <__sfp+0x28>
 800a5e0:	6833      	ldr	r3, [r6, #0]
 800a5e2:	b30b      	cbz	r3, 800a628 <__sfp+0x68>
 800a5e4:	6836      	ldr	r6, [r6, #0]
 800a5e6:	e7f7      	b.n	800a5d8 <__sfp+0x18>
 800a5e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a5ec:	b9d5      	cbnz	r5, 800a624 <__sfp+0x64>
 800a5ee:	4b16      	ldr	r3, [pc, #88]	; (800a648 <__sfp+0x88>)
 800a5f0:	60e3      	str	r3, [r4, #12]
 800a5f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a5f6:	6665      	str	r5, [r4, #100]	; 0x64
 800a5f8:	f000 f859 	bl	800a6ae <__retarget_lock_init_recursive>
 800a5fc:	f7ff ff96 	bl	800a52c <__sfp_lock_release>
 800a600:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a604:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a608:	6025      	str	r5, [r4, #0]
 800a60a:	61a5      	str	r5, [r4, #24]
 800a60c:	2208      	movs	r2, #8
 800a60e:	4629      	mov	r1, r5
 800a610:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a614:	f7ff fb76 	bl	8009d04 <memset>
 800a618:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a61c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a620:	4620      	mov	r0, r4
 800a622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a624:	3468      	adds	r4, #104	; 0x68
 800a626:	e7d9      	b.n	800a5dc <__sfp+0x1c>
 800a628:	2104      	movs	r1, #4
 800a62a:	4638      	mov	r0, r7
 800a62c:	f7ff ff62 	bl	800a4f4 <__sfmoreglue>
 800a630:	4604      	mov	r4, r0
 800a632:	6030      	str	r0, [r6, #0]
 800a634:	2800      	cmp	r0, #0
 800a636:	d1d5      	bne.n	800a5e4 <__sfp+0x24>
 800a638:	f7ff ff78 	bl	800a52c <__sfp_lock_release>
 800a63c:	230c      	movs	r3, #12
 800a63e:	603b      	str	r3, [r7, #0]
 800a640:	e7ee      	b.n	800a620 <__sfp+0x60>
 800a642:	bf00      	nop
 800a644:	0800c0e4 	.word	0x0800c0e4
 800a648:	ffff0001 	.word	0xffff0001

0800a64c <fiprintf>:
 800a64c:	b40e      	push	{r1, r2, r3}
 800a64e:	b503      	push	{r0, r1, lr}
 800a650:	4601      	mov	r1, r0
 800a652:	ab03      	add	r3, sp, #12
 800a654:	4805      	ldr	r0, [pc, #20]	; (800a66c <fiprintf+0x20>)
 800a656:	f853 2b04 	ldr.w	r2, [r3], #4
 800a65a:	6800      	ldr	r0, [r0, #0]
 800a65c:	9301      	str	r3, [sp, #4]
 800a65e:	f000 fb85 	bl	800ad6c <_vfiprintf_r>
 800a662:	b002      	add	sp, #8
 800a664:	f85d eb04 	ldr.w	lr, [sp], #4
 800a668:	b003      	add	sp, #12
 800a66a:	4770      	bx	lr
 800a66c:	20000034 	.word	0x20000034

0800a670 <_fwalk_reent>:
 800a670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a674:	4606      	mov	r6, r0
 800a676:	4688      	mov	r8, r1
 800a678:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a67c:	2700      	movs	r7, #0
 800a67e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a682:	f1b9 0901 	subs.w	r9, r9, #1
 800a686:	d505      	bpl.n	800a694 <_fwalk_reent+0x24>
 800a688:	6824      	ldr	r4, [r4, #0]
 800a68a:	2c00      	cmp	r4, #0
 800a68c:	d1f7      	bne.n	800a67e <_fwalk_reent+0xe>
 800a68e:	4638      	mov	r0, r7
 800a690:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a694:	89ab      	ldrh	r3, [r5, #12]
 800a696:	2b01      	cmp	r3, #1
 800a698:	d907      	bls.n	800a6aa <_fwalk_reent+0x3a>
 800a69a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a69e:	3301      	adds	r3, #1
 800a6a0:	d003      	beq.n	800a6aa <_fwalk_reent+0x3a>
 800a6a2:	4629      	mov	r1, r5
 800a6a4:	4630      	mov	r0, r6
 800a6a6:	47c0      	blx	r8
 800a6a8:	4307      	orrs	r7, r0
 800a6aa:	3568      	adds	r5, #104	; 0x68
 800a6ac:	e7e9      	b.n	800a682 <_fwalk_reent+0x12>

0800a6ae <__retarget_lock_init_recursive>:
 800a6ae:	4770      	bx	lr

0800a6b0 <__retarget_lock_acquire_recursive>:
 800a6b0:	4770      	bx	lr

0800a6b2 <__retarget_lock_release_recursive>:
 800a6b2:	4770      	bx	lr

0800a6b4 <_lseek_r>:
 800a6b4:	b538      	push	{r3, r4, r5, lr}
 800a6b6:	4d07      	ldr	r5, [pc, #28]	; (800a6d4 <_lseek_r+0x20>)
 800a6b8:	4604      	mov	r4, r0
 800a6ba:	4608      	mov	r0, r1
 800a6bc:	4611      	mov	r1, r2
 800a6be:	2200      	movs	r2, #0
 800a6c0:	602a      	str	r2, [r5, #0]
 800a6c2:	461a      	mov	r2, r3
 800a6c4:	f7f7 fe5c 	bl	8002380 <_lseek>
 800a6c8:	1c43      	adds	r3, r0, #1
 800a6ca:	d102      	bne.n	800a6d2 <_lseek_r+0x1e>
 800a6cc:	682b      	ldr	r3, [r5, #0]
 800a6ce:	b103      	cbz	r3, 800a6d2 <_lseek_r+0x1e>
 800a6d0:	6023      	str	r3, [r4, #0]
 800a6d2:	bd38      	pop	{r3, r4, r5, pc}
 800a6d4:	200038bc 	.word	0x200038bc

0800a6d8 <__swhatbuf_r>:
 800a6d8:	b570      	push	{r4, r5, r6, lr}
 800a6da:	460e      	mov	r6, r1
 800a6dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6e0:	2900      	cmp	r1, #0
 800a6e2:	b096      	sub	sp, #88	; 0x58
 800a6e4:	4614      	mov	r4, r2
 800a6e6:	461d      	mov	r5, r3
 800a6e8:	da08      	bge.n	800a6fc <__swhatbuf_r+0x24>
 800a6ea:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	602a      	str	r2, [r5, #0]
 800a6f2:	061a      	lsls	r2, r3, #24
 800a6f4:	d410      	bmi.n	800a718 <__swhatbuf_r+0x40>
 800a6f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6fa:	e00e      	b.n	800a71a <__swhatbuf_r+0x42>
 800a6fc:	466a      	mov	r2, sp
 800a6fe:	f001 f85b 	bl	800b7b8 <_fstat_r>
 800a702:	2800      	cmp	r0, #0
 800a704:	dbf1      	blt.n	800a6ea <__swhatbuf_r+0x12>
 800a706:	9a01      	ldr	r2, [sp, #4]
 800a708:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a70c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a710:	425a      	negs	r2, r3
 800a712:	415a      	adcs	r2, r3
 800a714:	602a      	str	r2, [r5, #0]
 800a716:	e7ee      	b.n	800a6f6 <__swhatbuf_r+0x1e>
 800a718:	2340      	movs	r3, #64	; 0x40
 800a71a:	2000      	movs	r0, #0
 800a71c:	6023      	str	r3, [r4, #0]
 800a71e:	b016      	add	sp, #88	; 0x58
 800a720:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a724 <__smakebuf_r>:
 800a724:	898b      	ldrh	r3, [r1, #12]
 800a726:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a728:	079d      	lsls	r5, r3, #30
 800a72a:	4606      	mov	r6, r0
 800a72c:	460c      	mov	r4, r1
 800a72e:	d507      	bpl.n	800a740 <__smakebuf_r+0x1c>
 800a730:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a734:	6023      	str	r3, [r4, #0]
 800a736:	6123      	str	r3, [r4, #16]
 800a738:	2301      	movs	r3, #1
 800a73a:	6163      	str	r3, [r4, #20]
 800a73c:	b002      	add	sp, #8
 800a73e:	bd70      	pop	{r4, r5, r6, pc}
 800a740:	ab01      	add	r3, sp, #4
 800a742:	466a      	mov	r2, sp
 800a744:	f7ff ffc8 	bl	800a6d8 <__swhatbuf_r>
 800a748:	9900      	ldr	r1, [sp, #0]
 800a74a:	4605      	mov	r5, r0
 800a74c:	4630      	mov	r0, r6
 800a74e:	f000 f89d 	bl	800a88c <_malloc_r>
 800a752:	b948      	cbnz	r0, 800a768 <__smakebuf_r+0x44>
 800a754:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a758:	059a      	lsls	r2, r3, #22
 800a75a:	d4ef      	bmi.n	800a73c <__smakebuf_r+0x18>
 800a75c:	f023 0303 	bic.w	r3, r3, #3
 800a760:	f043 0302 	orr.w	r3, r3, #2
 800a764:	81a3      	strh	r3, [r4, #12]
 800a766:	e7e3      	b.n	800a730 <__smakebuf_r+0xc>
 800a768:	4b0d      	ldr	r3, [pc, #52]	; (800a7a0 <__smakebuf_r+0x7c>)
 800a76a:	62b3      	str	r3, [r6, #40]	; 0x28
 800a76c:	89a3      	ldrh	r3, [r4, #12]
 800a76e:	6020      	str	r0, [r4, #0]
 800a770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a774:	81a3      	strh	r3, [r4, #12]
 800a776:	9b00      	ldr	r3, [sp, #0]
 800a778:	6163      	str	r3, [r4, #20]
 800a77a:	9b01      	ldr	r3, [sp, #4]
 800a77c:	6120      	str	r0, [r4, #16]
 800a77e:	b15b      	cbz	r3, 800a798 <__smakebuf_r+0x74>
 800a780:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a784:	4630      	mov	r0, r6
 800a786:	f001 f829 	bl	800b7dc <_isatty_r>
 800a78a:	b128      	cbz	r0, 800a798 <__smakebuf_r+0x74>
 800a78c:	89a3      	ldrh	r3, [r4, #12]
 800a78e:	f023 0303 	bic.w	r3, r3, #3
 800a792:	f043 0301 	orr.w	r3, r3, #1
 800a796:	81a3      	strh	r3, [r4, #12]
 800a798:	89a0      	ldrh	r0, [r4, #12]
 800a79a:	4305      	orrs	r5, r0
 800a79c:	81a5      	strh	r5, [r4, #12]
 800a79e:	e7cd      	b.n	800a73c <__smakebuf_r+0x18>
 800a7a0:	0800a4e9 	.word	0x0800a4e9

0800a7a4 <malloc>:
 800a7a4:	4b02      	ldr	r3, [pc, #8]	; (800a7b0 <malloc+0xc>)
 800a7a6:	4601      	mov	r1, r0
 800a7a8:	6818      	ldr	r0, [r3, #0]
 800a7aa:	f000 b86f 	b.w	800a88c <_malloc_r>
 800a7ae:	bf00      	nop
 800a7b0:	20000034 	.word	0x20000034

0800a7b4 <_free_r>:
 800a7b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a7b6:	2900      	cmp	r1, #0
 800a7b8:	d044      	beq.n	800a844 <_free_r+0x90>
 800a7ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7be:	9001      	str	r0, [sp, #4]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	f1a1 0404 	sub.w	r4, r1, #4
 800a7c6:	bfb8      	it	lt
 800a7c8:	18e4      	addlt	r4, r4, r3
 800a7ca:	f001 f817 	bl	800b7fc <__malloc_lock>
 800a7ce:	4a1e      	ldr	r2, [pc, #120]	; (800a848 <_free_r+0x94>)
 800a7d0:	9801      	ldr	r0, [sp, #4]
 800a7d2:	6813      	ldr	r3, [r2, #0]
 800a7d4:	b933      	cbnz	r3, 800a7e4 <_free_r+0x30>
 800a7d6:	6063      	str	r3, [r4, #4]
 800a7d8:	6014      	str	r4, [r2, #0]
 800a7da:	b003      	add	sp, #12
 800a7dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a7e0:	f001 b812 	b.w	800b808 <__malloc_unlock>
 800a7e4:	42a3      	cmp	r3, r4
 800a7e6:	d908      	bls.n	800a7fa <_free_r+0x46>
 800a7e8:	6825      	ldr	r5, [r4, #0]
 800a7ea:	1961      	adds	r1, r4, r5
 800a7ec:	428b      	cmp	r3, r1
 800a7ee:	bf01      	itttt	eq
 800a7f0:	6819      	ldreq	r1, [r3, #0]
 800a7f2:	685b      	ldreq	r3, [r3, #4]
 800a7f4:	1949      	addeq	r1, r1, r5
 800a7f6:	6021      	streq	r1, [r4, #0]
 800a7f8:	e7ed      	b.n	800a7d6 <_free_r+0x22>
 800a7fa:	461a      	mov	r2, r3
 800a7fc:	685b      	ldr	r3, [r3, #4]
 800a7fe:	b10b      	cbz	r3, 800a804 <_free_r+0x50>
 800a800:	42a3      	cmp	r3, r4
 800a802:	d9fa      	bls.n	800a7fa <_free_r+0x46>
 800a804:	6811      	ldr	r1, [r2, #0]
 800a806:	1855      	adds	r5, r2, r1
 800a808:	42a5      	cmp	r5, r4
 800a80a:	d10b      	bne.n	800a824 <_free_r+0x70>
 800a80c:	6824      	ldr	r4, [r4, #0]
 800a80e:	4421      	add	r1, r4
 800a810:	1854      	adds	r4, r2, r1
 800a812:	42a3      	cmp	r3, r4
 800a814:	6011      	str	r1, [r2, #0]
 800a816:	d1e0      	bne.n	800a7da <_free_r+0x26>
 800a818:	681c      	ldr	r4, [r3, #0]
 800a81a:	685b      	ldr	r3, [r3, #4]
 800a81c:	6053      	str	r3, [r2, #4]
 800a81e:	4421      	add	r1, r4
 800a820:	6011      	str	r1, [r2, #0]
 800a822:	e7da      	b.n	800a7da <_free_r+0x26>
 800a824:	d902      	bls.n	800a82c <_free_r+0x78>
 800a826:	230c      	movs	r3, #12
 800a828:	6003      	str	r3, [r0, #0]
 800a82a:	e7d6      	b.n	800a7da <_free_r+0x26>
 800a82c:	6825      	ldr	r5, [r4, #0]
 800a82e:	1961      	adds	r1, r4, r5
 800a830:	428b      	cmp	r3, r1
 800a832:	bf04      	itt	eq
 800a834:	6819      	ldreq	r1, [r3, #0]
 800a836:	685b      	ldreq	r3, [r3, #4]
 800a838:	6063      	str	r3, [r4, #4]
 800a83a:	bf04      	itt	eq
 800a83c:	1949      	addeq	r1, r1, r5
 800a83e:	6021      	streq	r1, [r4, #0]
 800a840:	6054      	str	r4, [r2, #4]
 800a842:	e7ca      	b.n	800a7da <_free_r+0x26>
 800a844:	b003      	add	sp, #12
 800a846:	bd30      	pop	{r4, r5, pc}
 800a848:	200038b4 	.word	0x200038b4

0800a84c <sbrk_aligned>:
 800a84c:	b570      	push	{r4, r5, r6, lr}
 800a84e:	4e0e      	ldr	r6, [pc, #56]	; (800a888 <sbrk_aligned+0x3c>)
 800a850:	460c      	mov	r4, r1
 800a852:	6831      	ldr	r1, [r6, #0]
 800a854:	4605      	mov	r5, r0
 800a856:	b911      	cbnz	r1, 800a85e <sbrk_aligned+0x12>
 800a858:	f000 feb0 	bl	800b5bc <_sbrk_r>
 800a85c:	6030      	str	r0, [r6, #0]
 800a85e:	4621      	mov	r1, r4
 800a860:	4628      	mov	r0, r5
 800a862:	f000 feab 	bl	800b5bc <_sbrk_r>
 800a866:	1c43      	adds	r3, r0, #1
 800a868:	d00a      	beq.n	800a880 <sbrk_aligned+0x34>
 800a86a:	1cc4      	adds	r4, r0, #3
 800a86c:	f024 0403 	bic.w	r4, r4, #3
 800a870:	42a0      	cmp	r0, r4
 800a872:	d007      	beq.n	800a884 <sbrk_aligned+0x38>
 800a874:	1a21      	subs	r1, r4, r0
 800a876:	4628      	mov	r0, r5
 800a878:	f000 fea0 	bl	800b5bc <_sbrk_r>
 800a87c:	3001      	adds	r0, #1
 800a87e:	d101      	bne.n	800a884 <sbrk_aligned+0x38>
 800a880:	f04f 34ff 	mov.w	r4, #4294967295
 800a884:	4620      	mov	r0, r4
 800a886:	bd70      	pop	{r4, r5, r6, pc}
 800a888:	200038b8 	.word	0x200038b8

0800a88c <_malloc_r>:
 800a88c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a890:	1ccd      	adds	r5, r1, #3
 800a892:	f025 0503 	bic.w	r5, r5, #3
 800a896:	3508      	adds	r5, #8
 800a898:	2d0c      	cmp	r5, #12
 800a89a:	bf38      	it	cc
 800a89c:	250c      	movcc	r5, #12
 800a89e:	2d00      	cmp	r5, #0
 800a8a0:	4607      	mov	r7, r0
 800a8a2:	db01      	blt.n	800a8a8 <_malloc_r+0x1c>
 800a8a4:	42a9      	cmp	r1, r5
 800a8a6:	d905      	bls.n	800a8b4 <_malloc_r+0x28>
 800a8a8:	230c      	movs	r3, #12
 800a8aa:	603b      	str	r3, [r7, #0]
 800a8ac:	2600      	movs	r6, #0
 800a8ae:	4630      	mov	r0, r6
 800a8b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8b4:	4e2e      	ldr	r6, [pc, #184]	; (800a970 <_malloc_r+0xe4>)
 800a8b6:	f000 ffa1 	bl	800b7fc <__malloc_lock>
 800a8ba:	6833      	ldr	r3, [r6, #0]
 800a8bc:	461c      	mov	r4, r3
 800a8be:	bb34      	cbnz	r4, 800a90e <_malloc_r+0x82>
 800a8c0:	4629      	mov	r1, r5
 800a8c2:	4638      	mov	r0, r7
 800a8c4:	f7ff ffc2 	bl	800a84c <sbrk_aligned>
 800a8c8:	1c43      	adds	r3, r0, #1
 800a8ca:	4604      	mov	r4, r0
 800a8cc:	d14d      	bne.n	800a96a <_malloc_r+0xde>
 800a8ce:	6834      	ldr	r4, [r6, #0]
 800a8d0:	4626      	mov	r6, r4
 800a8d2:	2e00      	cmp	r6, #0
 800a8d4:	d140      	bne.n	800a958 <_malloc_r+0xcc>
 800a8d6:	6823      	ldr	r3, [r4, #0]
 800a8d8:	4631      	mov	r1, r6
 800a8da:	4638      	mov	r0, r7
 800a8dc:	eb04 0803 	add.w	r8, r4, r3
 800a8e0:	f000 fe6c 	bl	800b5bc <_sbrk_r>
 800a8e4:	4580      	cmp	r8, r0
 800a8e6:	d13a      	bne.n	800a95e <_malloc_r+0xd2>
 800a8e8:	6821      	ldr	r1, [r4, #0]
 800a8ea:	3503      	adds	r5, #3
 800a8ec:	1a6d      	subs	r5, r5, r1
 800a8ee:	f025 0503 	bic.w	r5, r5, #3
 800a8f2:	3508      	adds	r5, #8
 800a8f4:	2d0c      	cmp	r5, #12
 800a8f6:	bf38      	it	cc
 800a8f8:	250c      	movcc	r5, #12
 800a8fa:	4629      	mov	r1, r5
 800a8fc:	4638      	mov	r0, r7
 800a8fe:	f7ff ffa5 	bl	800a84c <sbrk_aligned>
 800a902:	3001      	adds	r0, #1
 800a904:	d02b      	beq.n	800a95e <_malloc_r+0xd2>
 800a906:	6823      	ldr	r3, [r4, #0]
 800a908:	442b      	add	r3, r5
 800a90a:	6023      	str	r3, [r4, #0]
 800a90c:	e00e      	b.n	800a92c <_malloc_r+0xa0>
 800a90e:	6822      	ldr	r2, [r4, #0]
 800a910:	1b52      	subs	r2, r2, r5
 800a912:	d41e      	bmi.n	800a952 <_malloc_r+0xc6>
 800a914:	2a0b      	cmp	r2, #11
 800a916:	d916      	bls.n	800a946 <_malloc_r+0xba>
 800a918:	1961      	adds	r1, r4, r5
 800a91a:	42a3      	cmp	r3, r4
 800a91c:	6025      	str	r5, [r4, #0]
 800a91e:	bf18      	it	ne
 800a920:	6059      	strne	r1, [r3, #4]
 800a922:	6863      	ldr	r3, [r4, #4]
 800a924:	bf08      	it	eq
 800a926:	6031      	streq	r1, [r6, #0]
 800a928:	5162      	str	r2, [r4, r5]
 800a92a:	604b      	str	r3, [r1, #4]
 800a92c:	4638      	mov	r0, r7
 800a92e:	f104 060b 	add.w	r6, r4, #11
 800a932:	f000 ff69 	bl	800b808 <__malloc_unlock>
 800a936:	f026 0607 	bic.w	r6, r6, #7
 800a93a:	1d23      	adds	r3, r4, #4
 800a93c:	1af2      	subs	r2, r6, r3
 800a93e:	d0b6      	beq.n	800a8ae <_malloc_r+0x22>
 800a940:	1b9b      	subs	r3, r3, r6
 800a942:	50a3      	str	r3, [r4, r2]
 800a944:	e7b3      	b.n	800a8ae <_malloc_r+0x22>
 800a946:	6862      	ldr	r2, [r4, #4]
 800a948:	42a3      	cmp	r3, r4
 800a94a:	bf0c      	ite	eq
 800a94c:	6032      	streq	r2, [r6, #0]
 800a94e:	605a      	strne	r2, [r3, #4]
 800a950:	e7ec      	b.n	800a92c <_malloc_r+0xa0>
 800a952:	4623      	mov	r3, r4
 800a954:	6864      	ldr	r4, [r4, #4]
 800a956:	e7b2      	b.n	800a8be <_malloc_r+0x32>
 800a958:	4634      	mov	r4, r6
 800a95a:	6876      	ldr	r6, [r6, #4]
 800a95c:	e7b9      	b.n	800a8d2 <_malloc_r+0x46>
 800a95e:	230c      	movs	r3, #12
 800a960:	603b      	str	r3, [r7, #0]
 800a962:	4638      	mov	r0, r7
 800a964:	f000 ff50 	bl	800b808 <__malloc_unlock>
 800a968:	e7a1      	b.n	800a8ae <_malloc_r+0x22>
 800a96a:	6025      	str	r5, [r4, #0]
 800a96c:	e7de      	b.n	800a92c <_malloc_r+0xa0>
 800a96e:	bf00      	nop
 800a970:	200038b4 	.word	0x200038b4

0800a974 <_sungetc_r>:
 800a974:	b538      	push	{r3, r4, r5, lr}
 800a976:	1c4b      	adds	r3, r1, #1
 800a978:	4614      	mov	r4, r2
 800a97a:	d103      	bne.n	800a984 <_sungetc_r+0x10>
 800a97c:	f04f 35ff 	mov.w	r5, #4294967295
 800a980:	4628      	mov	r0, r5
 800a982:	bd38      	pop	{r3, r4, r5, pc}
 800a984:	8993      	ldrh	r3, [r2, #12]
 800a986:	f023 0320 	bic.w	r3, r3, #32
 800a98a:	8193      	strh	r3, [r2, #12]
 800a98c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a98e:	6852      	ldr	r2, [r2, #4]
 800a990:	b2cd      	uxtb	r5, r1
 800a992:	b18b      	cbz	r3, 800a9b8 <_sungetc_r+0x44>
 800a994:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a996:	4293      	cmp	r3, r2
 800a998:	dd08      	ble.n	800a9ac <_sungetc_r+0x38>
 800a99a:	6823      	ldr	r3, [r4, #0]
 800a99c:	1e5a      	subs	r2, r3, #1
 800a99e:	6022      	str	r2, [r4, #0]
 800a9a0:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a9a4:	6863      	ldr	r3, [r4, #4]
 800a9a6:	3301      	adds	r3, #1
 800a9a8:	6063      	str	r3, [r4, #4]
 800a9aa:	e7e9      	b.n	800a980 <_sungetc_r+0xc>
 800a9ac:	4621      	mov	r1, r4
 800a9ae:	f000 fec1 	bl	800b734 <__submore>
 800a9b2:	2800      	cmp	r0, #0
 800a9b4:	d0f1      	beq.n	800a99a <_sungetc_r+0x26>
 800a9b6:	e7e1      	b.n	800a97c <_sungetc_r+0x8>
 800a9b8:	6921      	ldr	r1, [r4, #16]
 800a9ba:	6823      	ldr	r3, [r4, #0]
 800a9bc:	b151      	cbz	r1, 800a9d4 <_sungetc_r+0x60>
 800a9be:	4299      	cmp	r1, r3
 800a9c0:	d208      	bcs.n	800a9d4 <_sungetc_r+0x60>
 800a9c2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800a9c6:	42a9      	cmp	r1, r5
 800a9c8:	d104      	bne.n	800a9d4 <_sungetc_r+0x60>
 800a9ca:	3b01      	subs	r3, #1
 800a9cc:	3201      	adds	r2, #1
 800a9ce:	6023      	str	r3, [r4, #0]
 800a9d0:	6062      	str	r2, [r4, #4]
 800a9d2:	e7d5      	b.n	800a980 <_sungetc_r+0xc>
 800a9d4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800a9d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a9dc:	6363      	str	r3, [r4, #52]	; 0x34
 800a9de:	2303      	movs	r3, #3
 800a9e0:	63a3      	str	r3, [r4, #56]	; 0x38
 800a9e2:	4623      	mov	r3, r4
 800a9e4:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a9e8:	6023      	str	r3, [r4, #0]
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	e7dc      	b.n	800a9a8 <_sungetc_r+0x34>

0800a9ee <__ssrefill_r>:
 800a9ee:	b510      	push	{r4, lr}
 800a9f0:	460c      	mov	r4, r1
 800a9f2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a9f4:	b169      	cbz	r1, 800aa12 <__ssrefill_r+0x24>
 800a9f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a9fa:	4299      	cmp	r1, r3
 800a9fc:	d001      	beq.n	800aa02 <__ssrefill_r+0x14>
 800a9fe:	f7ff fed9 	bl	800a7b4 <_free_r>
 800aa02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aa04:	6063      	str	r3, [r4, #4]
 800aa06:	2000      	movs	r0, #0
 800aa08:	6360      	str	r0, [r4, #52]	; 0x34
 800aa0a:	b113      	cbz	r3, 800aa12 <__ssrefill_r+0x24>
 800aa0c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800aa0e:	6023      	str	r3, [r4, #0]
 800aa10:	bd10      	pop	{r4, pc}
 800aa12:	6923      	ldr	r3, [r4, #16]
 800aa14:	6023      	str	r3, [r4, #0]
 800aa16:	2300      	movs	r3, #0
 800aa18:	6063      	str	r3, [r4, #4]
 800aa1a:	89a3      	ldrh	r3, [r4, #12]
 800aa1c:	f043 0320 	orr.w	r3, r3, #32
 800aa20:	81a3      	strh	r3, [r4, #12]
 800aa22:	f04f 30ff 	mov.w	r0, #4294967295
 800aa26:	e7f3      	b.n	800aa10 <__ssrefill_r+0x22>

0800aa28 <__ssvfiscanf_r>:
 800aa28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa2c:	460c      	mov	r4, r1
 800aa2e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800aa32:	2100      	movs	r1, #0
 800aa34:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800aa38:	49a6      	ldr	r1, [pc, #664]	; (800acd4 <__ssvfiscanf_r+0x2ac>)
 800aa3a:	91a0      	str	r1, [sp, #640]	; 0x280
 800aa3c:	f10d 0804 	add.w	r8, sp, #4
 800aa40:	49a5      	ldr	r1, [pc, #660]	; (800acd8 <__ssvfiscanf_r+0x2b0>)
 800aa42:	4fa6      	ldr	r7, [pc, #664]	; (800acdc <__ssvfiscanf_r+0x2b4>)
 800aa44:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800ace0 <__ssvfiscanf_r+0x2b8>
 800aa48:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800aa4c:	4606      	mov	r6, r0
 800aa4e:	91a1      	str	r1, [sp, #644]	; 0x284
 800aa50:	9300      	str	r3, [sp, #0]
 800aa52:	7813      	ldrb	r3, [r2, #0]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	f000 815a 	beq.w	800ad0e <__ssvfiscanf_r+0x2e6>
 800aa5a:	5dd9      	ldrb	r1, [r3, r7]
 800aa5c:	f011 0108 	ands.w	r1, r1, #8
 800aa60:	f102 0501 	add.w	r5, r2, #1
 800aa64:	d019      	beq.n	800aa9a <__ssvfiscanf_r+0x72>
 800aa66:	6863      	ldr	r3, [r4, #4]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	dd0f      	ble.n	800aa8c <__ssvfiscanf_r+0x64>
 800aa6c:	6823      	ldr	r3, [r4, #0]
 800aa6e:	781a      	ldrb	r2, [r3, #0]
 800aa70:	5cba      	ldrb	r2, [r7, r2]
 800aa72:	0712      	lsls	r2, r2, #28
 800aa74:	d401      	bmi.n	800aa7a <__ssvfiscanf_r+0x52>
 800aa76:	462a      	mov	r2, r5
 800aa78:	e7eb      	b.n	800aa52 <__ssvfiscanf_r+0x2a>
 800aa7a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800aa7c:	3201      	adds	r2, #1
 800aa7e:	9245      	str	r2, [sp, #276]	; 0x114
 800aa80:	6862      	ldr	r2, [r4, #4]
 800aa82:	3301      	adds	r3, #1
 800aa84:	3a01      	subs	r2, #1
 800aa86:	6062      	str	r2, [r4, #4]
 800aa88:	6023      	str	r3, [r4, #0]
 800aa8a:	e7ec      	b.n	800aa66 <__ssvfiscanf_r+0x3e>
 800aa8c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800aa8e:	4621      	mov	r1, r4
 800aa90:	4630      	mov	r0, r6
 800aa92:	4798      	blx	r3
 800aa94:	2800      	cmp	r0, #0
 800aa96:	d0e9      	beq.n	800aa6c <__ssvfiscanf_r+0x44>
 800aa98:	e7ed      	b.n	800aa76 <__ssvfiscanf_r+0x4e>
 800aa9a:	2b25      	cmp	r3, #37	; 0x25
 800aa9c:	d012      	beq.n	800aac4 <__ssvfiscanf_r+0x9c>
 800aa9e:	469a      	mov	sl, r3
 800aaa0:	6863      	ldr	r3, [r4, #4]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	f340 8091 	ble.w	800abca <__ssvfiscanf_r+0x1a2>
 800aaa8:	6822      	ldr	r2, [r4, #0]
 800aaaa:	7813      	ldrb	r3, [r2, #0]
 800aaac:	4553      	cmp	r3, sl
 800aaae:	f040 812e 	bne.w	800ad0e <__ssvfiscanf_r+0x2e6>
 800aab2:	6863      	ldr	r3, [r4, #4]
 800aab4:	3b01      	subs	r3, #1
 800aab6:	6063      	str	r3, [r4, #4]
 800aab8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800aaba:	3201      	adds	r2, #1
 800aabc:	3301      	adds	r3, #1
 800aabe:	6022      	str	r2, [r4, #0]
 800aac0:	9345      	str	r3, [sp, #276]	; 0x114
 800aac2:	e7d8      	b.n	800aa76 <__ssvfiscanf_r+0x4e>
 800aac4:	9141      	str	r1, [sp, #260]	; 0x104
 800aac6:	9143      	str	r1, [sp, #268]	; 0x10c
 800aac8:	7853      	ldrb	r3, [r2, #1]
 800aaca:	2b2a      	cmp	r3, #42	; 0x2a
 800aacc:	bf02      	ittt	eq
 800aace:	2310      	moveq	r3, #16
 800aad0:	1c95      	addeq	r5, r2, #2
 800aad2:	9341      	streq	r3, [sp, #260]	; 0x104
 800aad4:	220a      	movs	r2, #10
 800aad6:	46aa      	mov	sl, r5
 800aad8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800aadc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800aae0:	2b09      	cmp	r3, #9
 800aae2:	d91d      	bls.n	800ab20 <__ssvfiscanf_r+0xf8>
 800aae4:	487e      	ldr	r0, [pc, #504]	; (800ace0 <__ssvfiscanf_r+0x2b8>)
 800aae6:	2203      	movs	r2, #3
 800aae8:	f7f5 fb8a 	bl	8000200 <memchr>
 800aaec:	b140      	cbz	r0, 800ab00 <__ssvfiscanf_r+0xd8>
 800aaee:	2301      	movs	r3, #1
 800aaf0:	eba0 0009 	sub.w	r0, r0, r9
 800aaf4:	fa03 f000 	lsl.w	r0, r3, r0
 800aaf8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800aafa:	4318      	orrs	r0, r3
 800aafc:	9041      	str	r0, [sp, #260]	; 0x104
 800aafe:	4655      	mov	r5, sl
 800ab00:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ab04:	2b78      	cmp	r3, #120	; 0x78
 800ab06:	d806      	bhi.n	800ab16 <__ssvfiscanf_r+0xee>
 800ab08:	2b57      	cmp	r3, #87	; 0x57
 800ab0a:	d810      	bhi.n	800ab2e <__ssvfiscanf_r+0x106>
 800ab0c:	2b25      	cmp	r3, #37	; 0x25
 800ab0e:	d0c6      	beq.n	800aa9e <__ssvfiscanf_r+0x76>
 800ab10:	d856      	bhi.n	800abc0 <__ssvfiscanf_r+0x198>
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d064      	beq.n	800abe0 <__ssvfiscanf_r+0x1b8>
 800ab16:	2303      	movs	r3, #3
 800ab18:	9347      	str	r3, [sp, #284]	; 0x11c
 800ab1a:	230a      	movs	r3, #10
 800ab1c:	9342      	str	r3, [sp, #264]	; 0x108
 800ab1e:	e071      	b.n	800ac04 <__ssvfiscanf_r+0x1dc>
 800ab20:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800ab22:	fb02 1103 	mla	r1, r2, r3, r1
 800ab26:	3930      	subs	r1, #48	; 0x30
 800ab28:	9143      	str	r1, [sp, #268]	; 0x10c
 800ab2a:	4655      	mov	r5, sl
 800ab2c:	e7d3      	b.n	800aad6 <__ssvfiscanf_r+0xae>
 800ab2e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800ab32:	2a20      	cmp	r2, #32
 800ab34:	d8ef      	bhi.n	800ab16 <__ssvfiscanf_r+0xee>
 800ab36:	a101      	add	r1, pc, #4	; (adr r1, 800ab3c <__ssvfiscanf_r+0x114>)
 800ab38:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ab3c:	0800abef 	.word	0x0800abef
 800ab40:	0800ab17 	.word	0x0800ab17
 800ab44:	0800ab17 	.word	0x0800ab17
 800ab48:	0800ac4d 	.word	0x0800ac4d
 800ab4c:	0800ab17 	.word	0x0800ab17
 800ab50:	0800ab17 	.word	0x0800ab17
 800ab54:	0800ab17 	.word	0x0800ab17
 800ab58:	0800ab17 	.word	0x0800ab17
 800ab5c:	0800ab17 	.word	0x0800ab17
 800ab60:	0800ab17 	.word	0x0800ab17
 800ab64:	0800ab17 	.word	0x0800ab17
 800ab68:	0800ac63 	.word	0x0800ac63
 800ab6c:	0800ac39 	.word	0x0800ac39
 800ab70:	0800abc7 	.word	0x0800abc7
 800ab74:	0800abc7 	.word	0x0800abc7
 800ab78:	0800abc7 	.word	0x0800abc7
 800ab7c:	0800ab17 	.word	0x0800ab17
 800ab80:	0800ac3d 	.word	0x0800ac3d
 800ab84:	0800ab17 	.word	0x0800ab17
 800ab88:	0800ab17 	.word	0x0800ab17
 800ab8c:	0800ab17 	.word	0x0800ab17
 800ab90:	0800ab17 	.word	0x0800ab17
 800ab94:	0800ac73 	.word	0x0800ac73
 800ab98:	0800ac45 	.word	0x0800ac45
 800ab9c:	0800abe7 	.word	0x0800abe7
 800aba0:	0800ab17 	.word	0x0800ab17
 800aba4:	0800ab17 	.word	0x0800ab17
 800aba8:	0800ac6f 	.word	0x0800ac6f
 800abac:	0800ab17 	.word	0x0800ab17
 800abb0:	0800ac39 	.word	0x0800ac39
 800abb4:	0800ab17 	.word	0x0800ab17
 800abb8:	0800ab17 	.word	0x0800ab17
 800abbc:	0800abef 	.word	0x0800abef
 800abc0:	3b45      	subs	r3, #69	; 0x45
 800abc2:	2b02      	cmp	r3, #2
 800abc4:	d8a7      	bhi.n	800ab16 <__ssvfiscanf_r+0xee>
 800abc6:	2305      	movs	r3, #5
 800abc8:	e01b      	b.n	800ac02 <__ssvfiscanf_r+0x1da>
 800abca:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800abcc:	4621      	mov	r1, r4
 800abce:	4630      	mov	r0, r6
 800abd0:	4798      	blx	r3
 800abd2:	2800      	cmp	r0, #0
 800abd4:	f43f af68 	beq.w	800aaa8 <__ssvfiscanf_r+0x80>
 800abd8:	9844      	ldr	r0, [sp, #272]	; 0x110
 800abda:	2800      	cmp	r0, #0
 800abdc:	f040 808d 	bne.w	800acfa <__ssvfiscanf_r+0x2d2>
 800abe0:	f04f 30ff 	mov.w	r0, #4294967295
 800abe4:	e08f      	b.n	800ad06 <__ssvfiscanf_r+0x2de>
 800abe6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800abe8:	f042 0220 	orr.w	r2, r2, #32
 800abec:	9241      	str	r2, [sp, #260]	; 0x104
 800abee:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800abf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800abf4:	9241      	str	r2, [sp, #260]	; 0x104
 800abf6:	2210      	movs	r2, #16
 800abf8:	2b6f      	cmp	r3, #111	; 0x6f
 800abfa:	9242      	str	r2, [sp, #264]	; 0x108
 800abfc:	bf34      	ite	cc
 800abfe:	2303      	movcc	r3, #3
 800ac00:	2304      	movcs	r3, #4
 800ac02:	9347      	str	r3, [sp, #284]	; 0x11c
 800ac04:	6863      	ldr	r3, [r4, #4]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	dd42      	ble.n	800ac90 <__ssvfiscanf_r+0x268>
 800ac0a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ac0c:	0659      	lsls	r1, r3, #25
 800ac0e:	d404      	bmi.n	800ac1a <__ssvfiscanf_r+0x1f2>
 800ac10:	6823      	ldr	r3, [r4, #0]
 800ac12:	781a      	ldrb	r2, [r3, #0]
 800ac14:	5cba      	ldrb	r2, [r7, r2]
 800ac16:	0712      	lsls	r2, r2, #28
 800ac18:	d441      	bmi.n	800ac9e <__ssvfiscanf_r+0x276>
 800ac1a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800ac1c:	2b02      	cmp	r3, #2
 800ac1e:	dc50      	bgt.n	800acc2 <__ssvfiscanf_r+0x29a>
 800ac20:	466b      	mov	r3, sp
 800ac22:	4622      	mov	r2, r4
 800ac24:	a941      	add	r1, sp, #260	; 0x104
 800ac26:	4630      	mov	r0, r6
 800ac28:	f000 fb64 	bl	800b2f4 <_scanf_chars>
 800ac2c:	2801      	cmp	r0, #1
 800ac2e:	d06e      	beq.n	800ad0e <__ssvfiscanf_r+0x2e6>
 800ac30:	2802      	cmp	r0, #2
 800ac32:	f47f af20 	bne.w	800aa76 <__ssvfiscanf_r+0x4e>
 800ac36:	e7cf      	b.n	800abd8 <__ssvfiscanf_r+0x1b0>
 800ac38:	220a      	movs	r2, #10
 800ac3a:	e7dd      	b.n	800abf8 <__ssvfiscanf_r+0x1d0>
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	9342      	str	r3, [sp, #264]	; 0x108
 800ac40:	2303      	movs	r3, #3
 800ac42:	e7de      	b.n	800ac02 <__ssvfiscanf_r+0x1da>
 800ac44:	2308      	movs	r3, #8
 800ac46:	9342      	str	r3, [sp, #264]	; 0x108
 800ac48:	2304      	movs	r3, #4
 800ac4a:	e7da      	b.n	800ac02 <__ssvfiscanf_r+0x1da>
 800ac4c:	4629      	mov	r1, r5
 800ac4e:	4640      	mov	r0, r8
 800ac50:	f000 fcc4 	bl	800b5dc <__sccl>
 800ac54:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ac56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac5a:	9341      	str	r3, [sp, #260]	; 0x104
 800ac5c:	4605      	mov	r5, r0
 800ac5e:	2301      	movs	r3, #1
 800ac60:	e7cf      	b.n	800ac02 <__ssvfiscanf_r+0x1da>
 800ac62:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ac64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac68:	9341      	str	r3, [sp, #260]	; 0x104
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	e7c9      	b.n	800ac02 <__ssvfiscanf_r+0x1da>
 800ac6e:	2302      	movs	r3, #2
 800ac70:	e7c7      	b.n	800ac02 <__ssvfiscanf_r+0x1da>
 800ac72:	9841      	ldr	r0, [sp, #260]	; 0x104
 800ac74:	06c3      	lsls	r3, r0, #27
 800ac76:	f53f aefe 	bmi.w	800aa76 <__ssvfiscanf_r+0x4e>
 800ac7a:	9b00      	ldr	r3, [sp, #0]
 800ac7c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ac7e:	1d19      	adds	r1, r3, #4
 800ac80:	9100      	str	r1, [sp, #0]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	f010 0f01 	tst.w	r0, #1
 800ac88:	bf14      	ite	ne
 800ac8a:	801a      	strhne	r2, [r3, #0]
 800ac8c:	601a      	streq	r2, [r3, #0]
 800ac8e:	e6f2      	b.n	800aa76 <__ssvfiscanf_r+0x4e>
 800ac90:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ac92:	4621      	mov	r1, r4
 800ac94:	4630      	mov	r0, r6
 800ac96:	4798      	blx	r3
 800ac98:	2800      	cmp	r0, #0
 800ac9a:	d0b6      	beq.n	800ac0a <__ssvfiscanf_r+0x1e2>
 800ac9c:	e79c      	b.n	800abd8 <__ssvfiscanf_r+0x1b0>
 800ac9e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800aca0:	3201      	adds	r2, #1
 800aca2:	9245      	str	r2, [sp, #276]	; 0x114
 800aca4:	6862      	ldr	r2, [r4, #4]
 800aca6:	3a01      	subs	r2, #1
 800aca8:	2a00      	cmp	r2, #0
 800acaa:	6062      	str	r2, [r4, #4]
 800acac:	dd02      	ble.n	800acb4 <__ssvfiscanf_r+0x28c>
 800acae:	3301      	adds	r3, #1
 800acb0:	6023      	str	r3, [r4, #0]
 800acb2:	e7ad      	b.n	800ac10 <__ssvfiscanf_r+0x1e8>
 800acb4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800acb6:	4621      	mov	r1, r4
 800acb8:	4630      	mov	r0, r6
 800acba:	4798      	blx	r3
 800acbc:	2800      	cmp	r0, #0
 800acbe:	d0a7      	beq.n	800ac10 <__ssvfiscanf_r+0x1e8>
 800acc0:	e78a      	b.n	800abd8 <__ssvfiscanf_r+0x1b0>
 800acc2:	2b04      	cmp	r3, #4
 800acc4:	dc0e      	bgt.n	800ace4 <__ssvfiscanf_r+0x2bc>
 800acc6:	466b      	mov	r3, sp
 800acc8:	4622      	mov	r2, r4
 800acca:	a941      	add	r1, sp, #260	; 0x104
 800accc:	4630      	mov	r0, r6
 800acce:	f000 fb6b 	bl	800b3a8 <_scanf_i>
 800acd2:	e7ab      	b.n	800ac2c <__ssvfiscanf_r+0x204>
 800acd4:	0800a975 	.word	0x0800a975
 800acd8:	0800a9ef 	.word	0x0800a9ef
 800acdc:	0800c199 	.word	0x0800c199
 800ace0:	0800c2fc 	.word	0x0800c2fc
 800ace4:	4b0b      	ldr	r3, [pc, #44]	; (800ad14 <__ssvfiscanf_r+0x2ec>)
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	f43f aec5 	beq.w	800aa76 <__ssvfiscanf_r+0x4e>
 800acec:	466b      	mov	r3, sp
 800acee:	4622      	mov	r2, r4
 800acf0:	a941      	add	r1, sp, #260	; 0x104
 800acf2:	4630      	mov	r0, r6
 800acf4:	f3af 8000 	nop.w
 800acf8:	e798      	b.n	800ac2c <__ssvfiscanf_r+0x204>
 800acfa:	89a3      	ldrh	r3, [r4, #12]
 800acfc:	f013 0f40 	tst.w	r3, #64	; 0x40
 800ad00:	bf18      	it	ne
 800ad02:	f04f 30ff 	movne.w	r0, #4294967295
 800ad06:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800ad0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad0e:	9844      	ldr	r0, [sp, #272]	; 0x110
 800ad10:	e7f9      	b.n	800ad06 <__ssvfiscanf_r+0x2de>
 800ad12:	bf00      	nop
 800ad14:	00000000 	.word	0x00000000

0800ad18 <__sfputc_r>:
 800ad18:	6893      	ldr	r3, [r2, #8]
 800ad1a:	3b01      	subs	r3, #1
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	b410      	push	{r4}
 800ad20:	6093      	str	r3, [r2, #8]
 800ad22:	da08      	bge.n	800ad36 <__sfputc_r+0x1e>
 800ad24:	6994      	ldr	r4, [r2, #24]
 800ad26:	42a3      	cmp	r3, r4
 800ad28:	db01      	blt.n	800ad2e <__sfputc_r+0x16>
 800ad2a:	290a      	cmp	r1, #10
 800ad2c:	d103      	bne.n	800ad36 <__sfputc_r+0x1e>
 800ad2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad32:	f7ff b9f3 	b.w	800a11c <__swbuf_r>
 800ad36:	6813      	ldr	r3, [r2, #0]
 800ad38:	1c58      	adds	r0, r3, #1
 800ad3a:	6010      	str	r0, [r2, #0]
 800ad3c:	7019      	strb	r1, [r3, #0]
 800ad3e:	4608      	mov	r0, r1
 800ad40:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad44:	4770      	bx	lr

0800ad46 <__sfputs_r>:
 800ad46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad48:	4606      	mov	r6, r0
 800ad4a:	460f      	mov	r7, r1
 800ad4c:	4614      	mov	r4, r2
 800ad4e:	18d5      	adds	r5, r2, r3
 800ad50:	42ac      	cmp	r4, r5
 800ad52:	d101      	bne.n	800ad58 <__sfputs_r+0x12>
 800ad54:	2000      	movs	r0, #0
 800ad56:	e007      	b.n	800ad68 <__sfputs_r+0x22>
 800ad58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad5c:	463a      	mov	r2, r7
 800ad5e:	4630      	mov	r0, r6
 800ad60:	f7ff ffda 	bl	800ad18 <__sfputc_r>
 800ad64:	1c43      	adds	r3, r0, #1
 800ad66:	d1f3      	bne.n	800ad50 <__sfputs_r+0xa>
 800ad68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ad6c <_vfiprintf_r>:
 800ad6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad70:	460d      	mov	r5, r1
 800ad72:	b09d      	sub	sp, #116	; 0x74
 800ad74:	4614      	mov	r4, r2
 800ad76:	4698      	mov	r8, r3
 800ad78:	4606      	mov	r6, r0
 800ad7a:	b118      	cbz	r0, 800ad84 <_vfiprintf_r+0x18>
 800ad7c:	6983      	ldr	r3, [r0, #24]
 800ad7e:	b90b      	cbnz	r3, 800ad84 <_vfiprintf_r+0x18>
 800ad80:	f7ff fbe6 	bl	800a550 <__sinit>
 800ad84:	4b89      	ldr	r3, [pc, #548]	; (800afac <_vfiprintf_r+0x240>)
 800ad86:	429d      	cmp	r5, r3
 800ad88:	d11b      	bne.n	800adc2 <_vfiprintf_r+0x56>
 800ad8a:	6875      	ldr	r5, [r6, #4]
 800ad8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad8e:	07d9      	lsls	r1, r3, #31
 800ad90:	d405      	bmi.n	800ad9e <_vfiprintf_r+0x32>
 800ad92:	89ab      	ldrh	r3, [r5, #12]
 800ad94:	059a      	lsls	r2, r3, #22
 800ad96:	d402      	bmi.n	800ad9e <_vfiprintf_r+0x32>
 800ad98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad9a:	f7ff fc89 	bl	800a6b0 <__retarget_lock_acquire_recursive>
 800ad9e:	89ab      	ldrh	r3, [r5, #12]
 800ada0:	071b      	lsls	r3, r3, #28
 800ada2:	d501      	bpl.n	800ada8 <_vfiprintf_r+0x3c>
 800ada4:	692b      	ldr	r3, [r5, #16]
 800ada6:	b9eb      	cbnz	r3, 800ade4 <_vfiprintf_r+0x78>
 800ada8:	4629      	mov	r1, r5
 800adaa:	4630      	mov	r0, r6
 800adac:	f7ff fa1a 	bl	800a1e4 <__swsetup_r>
 800adb0:	b1c0      	cbz	r0, 800ade4 <_vfiprintf_r+0x78>
 800adb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800adb4:	07dc      	lsls	r4, r3, #31
 800adb6:	d50e      	bpl.n	800add6 <_vfiprintf_r+0x6a>
 800adb8:	f04f 30ff 	mov.w	r0, #4294967295
 800adbc:	b01d      	add	sp, #116	; 0x74
 800adbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adc2:	4b7b      	ldr	r3, [pc, #492]	; (800afb0 <_vfiprintf_r+0x244>)
 800adc4:	429d      	cmp	r5, r3
 800adc6:	d101      	bne.n	800adcc <_vfiprintf_r+0x60>
 800adc8:	68b5      	ldr	r5, [r6, #8]
 800adca:	e7df      	b.n	800ad8c <_vfiprintf_r+0x20>
 800adcc:	4b79      	ldr	r3, [pc, #484]	; (800afb4 <_vfiprintf_r+0x248>)
 800adce:	429d      	cmp	r5, r3
 800add0:	bf08      	it	eq
 800add2:	68f5      	ldreq	r5, [r6, #12]
 800add4:	e7da      	b.n	800ad8c <_vfiprintf_r+0x20>
 800add6:	89ab      	ldrh	r3, [r5, #12]
 800add8:	0598      	lsls	r0, r3, #22
 800adda:	d4ed      	bmi.n	800adb8 <_vfiprintf_r+0x4c>
 800addc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800adde:	f7ff fc68 	bl	800a6b2 <__retarget_lock_release_recursive>
 800ade2:	e7e9      	b.n	800adb8 <_vfiprintf_r+0x4c>
 800ade4:	2300      	movs	r3, #0
 800ade6:	9309      	str	r3, [sp, #36]	; 0x24
 800ade8:	2320      	movs	r3, #32
 800adea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800adee:	f8cd 800c 	str.w	r8, [sp, #12]
 800adf2:	2330      	movs	r3, #48	; 0x30
 800adf4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800afb8 <_vfiprintf_r+0x24c>
 800adf8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800adfc:	f04f 0901 	mov.w	r9, #1
 800ae00:	4623      	mov	r3, r4
 800ae02:	469a      	mov	sl, r3
 800ae04:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae08:	b10a      	cbz	r2, 800ae0e <_vfiprintf_r+0xa2>
 800ae0a:	2a25      	cmp	r2, #37	; 0x25
 800ae0c:	d1f9      	bne.n	800ae02 <_vfiprintf_r+0x96>
 800ae0e:	ebba 0b04 	subs.w	fp, sl, r4
 800ae12:	d00b      	beq.n	800ae2c <_vfiprintf_r+0xc0>
 800ae14:	465b      	mov	r3, fp
 800ae16:	4622      	mov	r2, r4
 800ae18:	4629      	mov	r1, r5
 800ae1a:	4630      	mov	r0, r6
 800ae1c:	f7ff ff93 	bl	800ad46 <__sfputs_r>
 800ae20:	3001      	adds	r0, #1
 800ae22:	f000 80aa 	beq.w	800af7a <_vfiprintf_r+0x20e>
 800ae26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae28:	445a      	add	r2, fp
 800ae2a:	9209      	str	r2, [sp, #36]	; 0x24
 800ae2c:	f89a 3000 	ldrb.w	r3, [sl]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	f000 80a2 	beq.w	800af7a <_vfiprintf_r+0x20e>
 800ae36:	2300      	movs	r3, #0
 800ae38:	f04f 32ff 	mov.w	r2, #4294967295
 800ae3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae40:	f10a 0a01 	add.w	sl, sl, #1
 800ae44:	9304      	str	r3, [sp, #16]
 800ae46:	9307      	str	r3, [sp, #28]
 800ae48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae4c:	931a      	str	r3, [sp, #104]	; 0x68
 800ae4e:	4654      	mov	r4, sl
 800ae50:	2205      	movs	r2, #5
 800ae52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae56:	4858      	ldr	r0, [pc, #352]	; (800afb8 <_vfiprintf_r+0x24c>)
 800ae58:	f7f5 f9d2 	bl	8000200 <memchr>
 800ae5c:	9a04      	ldr	r2, [sp, #16]
 800ae5e:	b9d8      	cbnz	r0, 800ae98 <_vfiprintf_r+0x12c>
 800ae60:	06d1      	lsls	r1, r2, #27
 800ae62:	bf44      	itt	mi
 800ae64:	2320      	movmi	r3, #32
 800ae66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae6a:	0713      	lsls	r3, r2, #28
 800ae6c:	bf44      	itt	mi
 800ae6e:	232b      	movmi	r3, #43	; 0x2b
 800ae70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae74:	f89a 3000 	ldrb.w	r3, [sl]
 800ae78:	2b2a      	cmp	r3, #42	; 0x2a
 800ae7a:	d015      	beq.n	800aea8 <_vfiprintf_r+0x13c>
 800ae7c:	9a07      	ldr	r2, [sp, #28]
 800ae7e:	4654      	mov	r4, sl
 800ae80:	2000      	movs	r0, #0
 800ae82:	f04f 0c0a 	mov.w	ip, #10
 800ae86:	4621      	mov	r1, r4
 800ae88:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae8c:	3b30      	subs	r3, #48	; 0x30
 800ae8e:	2b09      	cmp	r3, #9
 800ae90:	d94e      	bls.n	800af30 <_vfiprintf_r+0x1c4>
 800ae92:	b1b0      	cbz	r0, 800aec2 <_vfiprintf_r+0x156>
 800ae94:	9207      	str	r2, [sp, #28]
 800ae96:	e014      	b.n	800aec2 <_vfiprintf_r+0x156>
 800ae98:	eba0 0308 	sub.w	r3, r0, r8
 800ae9c:	fa09 f303 	lsl.w	r3, r9, r3
 800aea0:	4313      	orrs	r3, r2
 800aea2:	9304      	str	r3, [sp, #16]
 800aea4:	46a2      	mov	sl, r4
 800aea6:	e7d2      	b.n	800ae4e <_vfiprintf_r+0xe2>
 800aea8:	9b03      	ldr	r3, [sp, #12]
 800aeaa:	1d19      	adds	r1, r3, #4
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	9103      	str	r1, [sp, #12]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	bfbb      	ittet	lt
 800aeb4:	425b      	neglt	r3, r3
 800aeb6:	f042 0202 	orrlt.w	r2, r2, #2
 800aeba:	9307      	strge	r3, [sp, #28]
 800aebc:	9307      	strlt	r3, [sp, #28]
 800aebe:	bfb8      	it	lt
 800aec0:	9204      	strlt	r2, [sp, #16]
 800aec2:	7823      	ldrb	r3, [r4, #0]
 800aec4:	2b2e      	cmp	r3, #46	; 0x2e
 800aec6:	d10c      	bne.n	800aee2 <_vfiprintf_r+0x176>
 800aec8:	7863      	ldrb	r3, [r4, #1]
 800aeca:	2b2a      	cmp	r3, #42	; 0x2a
 800aecc:	d135      	bne.n	800af3a <_vfiprintf_r+0x1ce>
 800aece:	9b03      	ldr	r3, [sp, #12]
 800aed0:	1d1a      	adds	r2, r3, #4
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	9203      	str	r2, [sp, #12]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	bfb8      	it	lt
 800aeda:	f04f 33ff 	movlt.w	r3, #4294967295
 800aede:	3402      	adds	r4, #2
 800aee0:	9305      	str	r3, [sp, #20]
 800aee2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800afc8 <_vfiprintf_r+0x25c>
 800aee6:	7821      	ldrb	r1, [r4, #0]
 800aee8:	2203      	movs	r2, #3
 800aeea:	4650      	mov	r0, sl
 800aeec:	f7f5 f988 	bl	8000200 <memchr>
 800aef0:	b140      	cbz	r0, 800af04 <_vfiprintf_r+0x198>
 800aef2:	2340      	movs	r3, #64	; 0x40
 800aef4:	eba0 000a 	sub.w	r0, r0, sl
 800aef8:	fa03 f000 	lsl.w	r0, r3, r0
 800aefc:	9b04      	ldr	r3, [sp, #16]
 800aefe:	4303      	orrs	r3, r0
 800af00:	3401      	adds	r4, #1
 800af02:	9304      	str	r3, [sp, #16]
 800af04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af08:	482c      	ldr	r0, [pc, #176]	; (800afbc <_vfiprintf_r+0x250>)
 800af0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af0e:	2206      	movs	r2, #6
 800af10:	f7f5 f976 	bl	8000200 <memchr>
 800af14:	2800      	cmp	r0, #0
 800af16:	d03f      	beq.n	800af98 <_vfiprintf_r+0x22c>
 800af18:	4b29      	ldr	r3, [pc, #164]	; (800afc0 <_vfiprintf_r+0x254>)
 800af1a:	bb1b      	cbnz	r3, 800af64 <_vfiprintf_r+0x1f8>
 800af1c:	9b03      	ldr	r3, [sp, #12]
 800af1e:	3307      	adds	r3, #7
 800af20:	f023 0307 	bic.w	r3, r3, #7
 800af24:	3308      	adds	r3, #8
 800af26:	9303      	str	r3, [sp, #12]
 800af28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af2a:	443b      	add	r3, r7
 800af2c:	9309      	str	r3, [sp, #36]	; 0x24
 800af2e:	e767      	b.n	800ae00 <_vfiprintf_r+0x94>
 800af30:	fb0c 3202 	mla	r2, ip, r2, r3
 800af34:	460c      	mov	r4, r1
 800af36:	2001      	movs	r0, #1
 800af38:	e7a5      	b.n	800ae86 <_vfiprintf_r+0x11a>
 800af3a:	2300      	movs	r3, #0
 800af3c:	3401      	adds	r4, #1
 800af3e:	9305      	str	r3, [sp, #20]
 800af40:	4619      	mov	r1, r3
 800af42:	f04f 0c0a 	mov.w	ip, #10
 800af46:	4620      	mov	r0, r4
 800af48:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af4c:	3a30      	subs	r2, #48	; 0x30
 800af4e:	2a09      	cmp	r2, #9
 800af50:	d903      	bls.n	800af5a <_vfiprintf_r+0x1ee>
 800af52:	2b00      	cmp	r3, #0
 800af54:	d0c5      	beq.n	800aee2 <_vfiprintf_r+0x176>
 800af56:	9105      	str	r1, [sp, #20]
 800af58:	e7c3      	b.n	800aee2 <_vfiprintf_r+0x176>
 800af5a:	fb0c 2101 	mla	r1, ip, r1, r2
 800af5e:	4604      	mov	r4, r0
 800af60:	2301      	movs	r3, #1
 800af62:	e7f0      	b.n	800af46 <_vfiprintf_r+0x1da>
 800af64:	ab03      	add	r3, sp, #12
 800af66:	9300      	str	r3, [sp, #0]
 800af68:	462a      	mov	r2, r5
 800af6a:	4b16      	ldr	r3, [pc, #88]	; (800afc4 <_vfiprintf_r+0x258>)
 800af6c:	a904      	add	r1, sp, #16
 800af6e:	4630      	mov	r0, r6
 800af70:	f3af 8000 	nop.w
 800af74:	4607      	mov	r7, r0
 800af76:	1c78      	adds	r0, r7, #1
 800af78:	d1d6      	bne.n	800af28 <_vfiprintf_r+0x1bc>
 800af7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af7c:	07d9      	lsls	r1, r3, #31
 800af7e:	d405      	bmi.n	800af8c <_vfiprintf_r+0x220>
 800af80:	89ab      	ldrh	r3, [r5, #12]
 800af82:	059a      	lsls	r2, r3, #22
 800af84:	d402      	bmi.n	800af8c <_vfiprintf_r+0x220>
 800af86:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af88:	f7ff fb93 	bl	800a6b2 <__retarget_lock_release_recursive>
 800af8c:	89ab      	ldrh	r3, [r5, #12]
 800af8e:	065b      	lsls	r3, r3, #25
 800af90:	f53f af12 	bmi.w	800adb8 <_vfiprintf_r+0x4c>
 800af94:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af96:	e711      	b.n	800adbc <_vfiprintf_r+0x50>
 800af98:	ab03      	add	r3, sp, #12
 800af9a:	9300      	str	r3, [sp, #0]
 800af9c:	462a      	mov	r2, r5
 800af9e:	4b09      	ldr	r3, [pc, #36]	; (800afc4 <_vfiprintf_r+0x258>)
 800afa0:	a904      	add	r1, sp, #16
 800afa2:	4630      	mov	r0, r6
 800afa4:	f000 f880 	bl	800b0a8 <_printf_i>
 800afa8:	e7e4      	b.n	800af74 <_vfiprintf_r+0x208>
 800afaa:	bf00      	nop
 800afac:	0800c2bc 	.word	0x0800c2bc
 800afb0:	0800c2dc 	.word	0x0800c2dc
 800afb4:	0800c29c 	.word	0x0800c29c
 800afb8:	0800c300 	.word	0x0800c300
 800afbc:	0800c306 	.word	0x0800c306
 800afc0:	00000000 	.word	0x00000000
 800afc4:	0800ad47 	.word	0x0800ad47
 800afc8:	0800c2fc 	.word	0x0800c2fc

0800afcc <_printf_common>:
 800afcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afd0:	4616      	mov	r6, r2
 800afd2:	4699      	mov	r9, r3
 800afd4:	688a      	ldr	r2, [r1, #8]
 800afd6:	690b      	ldr	r3, [r1, #16]
 800afd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800afdc:	4293      	cmp	r3, r2
 800afde:	bfb8      	it	lt
 800afe0:	4613      	movlt	r3, r2
 800afe2:	6033      	str	r3, [r6, #0]
 800afe4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800afe8:	4607      	mov	r7, r0
 800afea:	460c      	mov	r4, r1
 800afec:	b10a      	cbz	r2, 800aff2 <_printf_common+0x26>
 800afee:	3301      	adds	r3, #1
 800aff0:	6033      	str	r3, [r6, #0]
 800aff2:	6823      	ldr	r3, [r4, #0]
 800aff4:	0699      	lsls	r1, r3, #26
 800aff6:	bf42      	ittt	mi
 800aff8:	6833      	ldrmi	r3, [r6, #0]
 800affa:	3302      	addmi	r3, #2
 800affc:	6033      	strmi	r3, [r6, #0]
 800affe:	6825      	ldr	r5, [r4, #0]
 800b000:	f015 0506 	ands.w	r5, r5, #6
 800b004:	d106      	bne.n	800b014 <_printf_common+0x48>
 800b006:	f104 0a19 	add.w	sl, r4, #25
 800b00a:	68e3      	ldr	r3, [r4, #12]
 800b00c:	6832      	ldr	r2, [r6, #0]
 800b00e:	1a9b      	subs	r3, r3, r2
 800b010:	42ab      	cmp	r3, r5
 800b012:	dc26      	bgt.n	800b062 <_printf_common+0x96>
 800b014:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b018:	1e13      	subs	r3, r2, #0
 800b01a:	6822      	ldr	r2, [r4, #0]
 800b01c:	bf18      	it	ne
 800b01e:	2301      	movne	r3, #1
 800b020:	0692      	lsls	r2, r2, #26
 800b022:	d42b      	bmi.n	800b07c <_printf_common+0xb0>
 800b024:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b028:	4649      	mov	r1, r9
 800b02a:	4638      	mov	r0, r7
 800b02c:	47c0      	blx	r8
 800b02e:	3001      	adds	r0, #1
 800b030:	d01e      	beq.n	800b070 <_printf_common+0xa4>
 800b032:	6823      	ldr	r3, [r4, #0]
 800b034:	68e5      	ldr	r5, [r4, #12]
 800b036:	6832      	ldr	r2, [r6, #0]
 800b038:	f003 0306 	and.w	r3, r3, #6
 800b03c:	2b04      	cmp	r3, #4
 800b03e:	bf08      	it	eq
 800b040:	1aad      	subeq	r5, r5, r2
 800b042:	68a3      	ldr	r3, [r4, #8]
 800b044:	6922      	ldr	r2, [r4, #16]
 800b046:	bf0c      	ite	eq
 800b048:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b04c:	2500      	movne	r5, #0
 800b04e:	4293      	cmp	r3, r2
 800b050:	bfc4      	itt	gt
 800b052:	1a9b      	subgt	r3, r3, r2
 800b054:	18ed      	addgt	r5, r5, r3
 800b056:	2600      	movs	r6, #0
 800b058:	341a      	adds	r4, #26
 800b05a:	42b5      	cmp	r5, r6
 800b05c:	d11a      	bne.n	800b094 <_printf_common+0xc8>
 800b05e:	2000      	movs	r0, #0
 800b060:	e008      	b.n	800b074 <_printf_common+0xa8>
 800b062:	2301      	movs	r3, #1
 800b064:	4652      	mov	r2, sl
 800b066:	4649      	mov	r1, r9
 800b068:	4638      	mov	r0, r7
 800b06a:	47c0      	blx	r8
 800b06c:	3001      	adds	r0, #1
 800b06e:	d103      	bne.n	800b078 <_printf_common+0xac>
 800b070:	f04f 30ff 	mov.w	r0, #4294967295
 800b074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b078:	3501      	adds	r5, #1
 800b07a:	e7c6      	b.n	800b00a <_printf_common+0x3e>
 800b07c:	18e1      	adds	r1, r4, r3
 800b07e:	1c5a      	adds	r2, r3, #1
 800b080:	2030      	movs	r0, #48	; 0x30
 800b082:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b086:	4422      	add	r2, r4
 800b088:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b08c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b090:	3302      	adds	r3, #2
 800b092:	e7c7      	b.n	800b024 <_printf_common+0x58>
 800b094:	2301      	movs	r3, #1
 800b096:	4622      	mov	r2, r4
 800b098:	4649      	mov	r1, r9
 800b09a:	4638      	mov	r0, r7
 800b09c:	47c0      	blx	r8
 800b09e:	3001      	adds	r0, #1
 800b0a0:	d0e6      	beq.n	800b070 <_printf_common+0xa4>
 800b0a2:	3601      	adds	r6, #1
 800b0a4:	e7d9      	b.n	800b05a <_printf_common+0x8e>
	...

0800b0a8 <_printf_i>:
 800b0a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b0ac:	7e0f      	ldrb	r7, [r1, #24]
 800b0ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b0b0:	2f78      	cmp	r7, #120	; 0x78
 800b0b2:	4691      	mov	r9, r2
 800b0b4:	4680      	mov	r8, r0
 800b0b6:	460c      	mov	r4, r1
 800b0b8:	469a      	mov	sl, r3
 800b0ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b0be:	d807      	bhi.n	800b0d0 <_printf_i+0x28>
 800b0c0:	2f62      	cmp	r7, #98	; 0x62
 800b0c2:	d80a      	bhi.n	800b0da <_printf_i+0x32>
 800b0c4:	2f00      	cmp	r7, #0
 800b0c6:	f000 80d8 	beq.w	800b27a <_printf_i+0x1d2>
 800b0ca:	2f58      	cmp	r7, #88	; 0x58
 800b0cc:	f000 80a3 	beq.w	800b216 <_printf_i+0x16e>
 800b0d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b0d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b0d8:	e03a      	b.n	800b150 <_printf_i+0xa8>
 800b0da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b0de:	2b15      	cmp	r3, #21
 800b0e0:	d8f6      	bhi.n	800b0d0 <_printf_i+0x28>
 800b0e2:	a101      	add	r1, pc, #4	; (adr r1, 800b0e8 <_printf_i+0x40>)
 800b0e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b0e8:	0800b141 	.word	0x0800b141
 800b0ec:	0800b155 	.word	0x0800b155
 800b0f0:	0800b0d1 	.word	0x0800b0d1
 800b0f4:	0800b0d1 	.word	0x0800b0d1
 800b0f8:	0800b0d1 	.word	0x0800b0d1
 800b0fc:	0800b0d1 	.word	0x0800b0d1
 800b100:	0800b155 	.word	0x0800b155
 800b104:	0800b0d1 	.word	0x0800b0d1
 800b108:	0800b0d1 	.word	0x0800b0d1
 800b10c:	0800b0d1 	.word	0x0800b0d1
 800b110:	0800b0d1 	.word	0x0800b0d1
 800b114:	0800b261 	.word	0x0800b261
 800b118:	0800b185 	.word	0x0800b185
 800b11c:	0800b243 	.word	0x0800b243
 800b120:	0800b0d1 	.word	0x0800b0d1
 800b124:	0800b0d1 	.word	0x0800b0d1
 800b128:	0800b283 	.word	0x0800b283
 800b12c:	0800b0d1 	.word	0x0800b0d1
 800b130:	0800b185 	.word	0x0800b185
 800b134:	0800b0d1 	.word	0x0800b0d1
 800b138:	0800b0d1 	.word	0x0800b0d1
 800b13c:	0800b24b 	.word	0x0800b24b
 800b140:	682b      	ldr	r3, [r5, #0]
 800b142:	1d1a      	adds	r2, r3, #4
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	602a      	str	r2, [r5, #0]
 800b148:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b14c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b150:	2301      	movs	r3, #1
 800b152:	e0a3      	b.n	800b29c <_printf_i+0x1f4>
 800b154:	6820      	ldr	r0, [r4, #0]
 800b156:	6829      	ldr	r1, [r5, #0]
 800b158:	0606      	lsls	r6, r0, #24
 800b15a:	f101 0304 	add.w	r3, r1, #4
 800b15e:	d50a      	bpl.n	800b176 <_printf_i+0xce>
 800b160:	680e      	ldr	r6, [r1, #0]
 800b162:	602b      	str	r3, [r5, #0]
 800b164:	2e00      	cmp	r6, #0
 800b166:	da03      	bge.n	800b170 <_printf_i+0xc8>
 800b168:	232d      	movs	r3, #45	; 0x2d
 800b16a:	4276      	negs	r6, r6
 800b16c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b170:	485e      	ldr	r0, [pc, #376]	; (800b2ec <_printf_i+0x244>)
 800b172:	230a      	movs	r3, #10
 800b174:	e019      	b.n	800b1aa <_printf_i+0x102>
 800b176:	680e      	ldr	r6, [r1, #0]
 800b178:	602b      	str	r3, [r5, #0]
 800b17a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b17e:	bf18      	it	ne
 800b180:	b236      	sxthne	r6, r6
 800b182:	e7ef      	b.n	800b164 <_printf_i+0xbc>
 800b184:	682b      	ldr	r3, [r5, #0]
 800b186:	6820      	ldr	r0, [r4, #0]
 800b188:	1d19      	adds	r1, r3, #4
 800b18a:	6029      	str	r1, [r5, #0]
 800b18c:	0601      	lsls	r1, r0, #24
 800b18e:	d501      	bpl.n	800b194 <_printf_i+0xec>
 800b190:	681e      	ldr	r6, [r3, #0]
 800b192:	e002      	b.n	800b19a <_printf_i+0xf2>
 800b194:	0646      	lsls	r6, r0, #25
 800b196:	d5fb      	bpl.n	800b190 <_printf_i+0xe8>
 800b198:	881e      	ldrh	r6, [r3, #0]
 800b19a:	4854      	ldr	r0, [pc, #336]	; (800b2ec <_printf_i+0x244>)
 800b19c:	2f6f      	cmp	r7, #111	; 0x6f
 800b19e:	bf0c      	ite	eq
 800b1a0:	2308      	moveq	r3, #8
 800b1a2:	230a      	movne	r3, #10
 800b1a4:	2100      	movs	r1, #0
 800b1a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b1aa:	6865      	ldr	r5, [r4, #4]
 800b1ac:	60a5      	str	r5, [r4, #8]
 800b1ae:	2d00      	cmp	r5, #0
 800b1b0:	bfa2      	ittt	ge
 800b1b2:	6821      	ldrge	r1, [r4, #0]
 800b1b4:	f021 0104 	bicge.w	r1, r1, #4
 800b1b8:	6021      	strge	r1, [r4, #0]
 800b1ba:	b90e      	cbnz	r6, 800b1c0 <_printf_i+0x118>
 800b1bc:	2d00      	cmp	r5, #0
 800b1be:	d04d      	beq.n	800b25c <_printf_i+0x1b4>
 800b1c0:	4615      	mov	r5, r2
 800b1c2:	fbb6 f1f3 	udiv	r1, r6, r3
 800b1c6:	fb03 6711 	mls	r7, r3, r1, r6
 800b1ca:	5dc7      	ldrb	r7, [r0, r7]
 800b1cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b1d0:	4637      	mov	r7, r6
 800b1d2:	42bb      	cmp	r3, r7
 800b1d4:	460e      	mov	r6, r1
 800b1d6:	d9f4      	bls.n	800b1c2 <_printf_i+0x11a>
 800b1d8:	2b08      	cmp	r3, #8
 800b1da:	d10b      	bne.n	800b1f4 <_printf_i+0x14c>
 800b1dc:	6823      	ldr	r3, [r4, #0]
 800b1de:	07de      	lsls	r6, r3, #31
 800b1e0:	d508      	bpl.n	800b1f4 <_printf_i+0x14c>
 800b1e2:	6923      	ldr	r3, [r4, #16]
 800b1e4:	6861      	ldr	r1, [r4, #4]
 800b1e6:	4299      	cmp	r1, r3
 800b1e8:	bfde      	ittt	le
 800b1ea:	2330      	movle	r3, #48	; 0x30
 800b1ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b1f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b1f4:	1b52      	subs	r2, r2, r5
 800b1f6:	6122      	str	r2, [r4, #16]
 800b1f8:	f8cd a000 	str.w	sl, [sp]
 800b1fc:	464b      	mov	r3, r9
 800b1fe:	aa03      	add	r2, sp, #12
 800b200:	4621      	mov	r1, r4
 800b202:	4640      	mov	r0, r8
 800b204:	f7ff fee2 	bl	800afcc <_printf_common>
 800b208:	3001      	adds	r0, #1
 800b20a:	d14c      	bne.n	800b2a6 <_printf_i+0x1fe>
 800b20c:	f04f 30ff 	mov.w	r0, #4294967295
 800b210:	b004      	add	sp, #16
 800b212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b216:	4835      	ldr	r0, [pc, #212]	; (800b2ec <_printf_i+0x244>)
 800b218:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b21c:	6829      	ldr	r1, [r5, #0]
 800b21e:	6823      	ldr	r3, [r4, #0]
 800b220:	f851 6b04 	ldr.w	r6, [r1], #4
 800b224:	6029      	str	r1, [r5, #0]
 800b226:	061d      	lsls	r5, r3, #24
 800b228:	d514      	bpl.n	800b254 <_printf_i+0x1ac>
 800b22a:	07df      	lsls	r7, r3, #31
 800b22c:	bf44      	itt	mi
 800b22e:	f043 0320 	orrmi.w	r3, r3, #32
 800b232:	6023      	strmi	r3, [r4, #0]
 800b234:	b91e      	cbnz	r6, 800b23e <_printf_i+0x196>
 800b236:	6823      	ldr	r3, [r4, #0]
 800b238:	f023 0320 	bic.w	r3, r3, #32
 800b23c:	6023      	str	r3, [r4, #0]
 800b23e:	2310      	movs	r3, #16
 800b240:	e7b0      	b.n	800b1a4 <_printf_i+0xfc>
 800b242:	6823      	ldr	r3, [r4, #0]
 800b244:	f043 0320 	orr.w	r3, r3, #32
 800b248:	6023      	str	r3, [r4, #0]
 800b24a:	2378      	movs	r3, #120	; 0x78
 800b24c:	4828      	ldr	r0, [pc, #160]	; (800b2f0 <_printf_i+0x248>)
 800b24e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b252:	e7e3      	b.n	800b21c <_printf_i+0x174>
 800b254:	0659      	lsls	r1, r3, #25
 800b256:	bf48      	it	mi
 800b258:	b2b6      	uxthmi	r6, r6
 800b25a:	e7e6      	b.n	800b22a <_printf_i+0x182>
 800b25c:	4615      	mov	r5, r2
 800b25e:	e7bb      	b.n	800b1d8 <_printf_i+0x130>
 800b260:	682b      	ldr	r3, [r5, #0]
 800b262:	6826      	ldr	r6, [r4, #0]
 800b264:	6961      	ldr	r1, [r4, #20]
 800b266:	1d18      	adds	r0, r3, #4
 800b268:	6028      	str	r0, [r5, #0]
 800b26a:	0635      	lsls	r5, r6, #24
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	d501      	bpl.n	800b274 <_printf_i+0x1cc>
 800b270:	6019      	str	r1, [r3, #0]
 800b272:	e002      	b.n	800b27a <_printf_i+0x1d2>
 800b274:	0670      	lsls	r0, r6, #25
 800b276:	d5fb      	bpl.n	800b270 <_printf_i+0x1c8>
 800b278:	8019      	strh	r1, [r3, #0]
 800b27a:	2300      	movs	r3, #0
 800b27c:	6123      	str	r3, [r4, #16]
 800b27e:	4615      	mov	r5, r2
 800b280:	e7ba      	b.n	800b1f8 <_printf_i+0x150>
 800b282:	682b      	ldr	r3, [r5, #0]
 800b284:	1d1a      	adds	r2, r3, #4
 800b286:	602a      	str	r2, [r5, #0]
 800b288:	681d      	ldr	r5, [r3, #0]
 800b28a:	6862      	ldr	r2, [r4, #4]
 800b28c:	2100      	movs	r1, #0
 800b28e:	4628      	mov	r0, r5
 800b290:	f7f4 ffb6 	bl	8000200 <memchr>
 800b294:	b108      	cbz	r0, 800b29a <_printf_i+0x1f2>
 800b296:	1b40      	subs	r0, r0, r5
 800b298:	6060      	str	r0, [r4, #4]
 800b29a:	6863      	ldr	r3, [r4, #4]
 800b29c:	6123      	str	r3, [r4, #16]
 800b29e:	2300      	movs	r3, #0
 800b2a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b2a4:	e7a8      	b.n	800b1f8 <_printf_i+0x150>
 800b2a6:	6923      	ldr	r3, [r4, #16]
 800b2a8:	462a      	mov	r2, r5
 800b2aa:	4649      	mov	r1, r9
 800b2ac:	4640      	mov	r0, r8
 800b2ae:	47d0      	blx	sl
 800b2b0:	3001      	adds	r0, #1
 800b2b2:	d0ab      	beq.n	800b20c <_printf_i+0x164>
 800b2b4:	6823      	ldr	r3, [r4, #0]
 800b2b6:	079b      	lsls	r3, r3, #30
 800b2b8:	d413      	bmi.n	800b2e2 <_printf_i+0x23a>
 800b2ba:	68e0      	ldr	r0, [r4, #12]
 800b2bc:	9b03      	ldr	r3, [sp, #12]
 800b2be:	4298      	cmp	r0, r3
 800b2c0:	bfb8      	it	lt
 800b2c2:	4618      	movlt	r0, r3
 800b2c4:	e7a4      	b.n	800b210 <_printf_i+0x168>
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	4632      	mov	r2, r6
 800b2ca:	4649      	mov	r1, r9
 800b2cc:	4640      	mov	r0, r8
 800b2ce:	47d0      	blx	sl
 800b2d0:	3001      	adds	r0, #1
 800b2d2:	d09b      	beq.n	800b20c <_printf_i+0x164>
 800b2d4:	3501      	adds	r5, #1
 800b2d6:	68e3      	ldr	r3, [r4, #12]
 800b2d8:	9903      	ldr	r1, [sp, #12]
 800b2da:	1a5b      	subs	r3, r3, r1
 800b2dc:	42ab      	cmp	r3, r5
 800b2de:	dcf2      	bgt.n	800b2c6 <_printf_i+0x21e>
 800b2e0:	e7eb      	b.n	800b2ba <_printf_i+0x212>
 800b2e2:	2500      	movs	r5, #0
 800b2e4:	f104 0619 	add.w	r6, r4, #25
 800b2e8:	e7f5      	b.n	800b2d6 <_printf_i+0x22e>
 800b2ea:	bf00      	nop
 800b2ec:	0800c30d 	.word	0x0800c30d
 800b2f0:	0800c31e 	.word	0x0800c31e

0800b2f4 <_scanf_chars>:
 800b2f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2f8:	4615      	mov	r5, r2
 800b2fa:	688a      	ldr	r2, [r1, #8]
 800b2fc:	4680      	mov	r8, r0
 800b2fe:	460c      	mov	r4, r1
 800b300:	b932      	cbnz	r2, 800b310 <_scanf_chars+0x1c>
 800b302:	698a      	ldr	r2, [r1, #24]
 800b304:	2a00      	cmp	r2, #0
 800b306:	bf0c      	ite	eq
 800b308:	2201      	moveq	r2, #1
 800b30a:	f04f 32ff 	movne.w	r2, #4294967295
 800b30e:	608a      	str	r2, [r1, #8]
 800b310:	6822      	ldr	r2, [r4, #0]
 800b312:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800b3a4 <_scanf_chars+0xb0>
 800b316:	06d1      	lsls	r1, r2, #27
 800b318:	bf5f      	itttt	pl
 800b31a:	681a      	ldrpl	r2, [r3, #0]
 800b31c:	1d11      	addpl	r1, r2, #4
 800b31e:	6019      	strpl	r1, [r3, #0]
 800b320:	6816      	ldrpl	r6, [r2, #0]
 800b322:	2700      	movs	r7, #0
 800b324:	69a0      	ldr	r0, [r4, #24]
 800b326:	b188      	cbz	r0, 800b34c <_scanf_chars+0x58>
 800b328:	2801      	cmp	r0, #1
 800b32a:	d107      	bne.n	800b33c <_scanf_chars+0x48>
 800b32c:	682a      	ldr	r2, [r5, #0]
 800b32e:	7811      	ldrb	r1, [r2, #0]
 800b330:	6962      	ldr	r2, [r4, #20]
 800b332:	5c52      	ldrb	r2, [r2, r1]
 800b334:	b952      	cbnz	r2, 800b34c <_scanf_chars+0x58>
 800b336:	2f00      	cmp	r7, #0
 800b338:	d031      	beq.n	800b39e <_scanf_chars+0xaa>
 800b33a:	e022      	b.n	800b382 <_scanf_chars+0x8e>
 800b33c:	2802      	cmp	r0, #2
 800b33e:	d120      	bne.n	800b382 <_scanf_chars+0x8e>
 800b340:	682b      	ldr	r3, [r5, #0]
 800b342:	781b      	ldrb	r3, [r3, #0]
 800b344:	f813 3009 	ldrb.w	r3, [r3, r9]
 800b348:	071b      	lsls	r3, r3, #28
 800b34a:	d41a      	bmi.n	800b382 <_scanf_chars+0x8e>
 800b34c:	6823      	ldr	r3, [r4, #0]
 800b34e:	06da      	lsls	r2, r3, #27
 800b350:	bf5e      	ittt	pl
 800b352:	682b      	ldrpl	r3, [r5, #0]
 800b354:	781b      	ldrbpl	r3, [r3, #0]
 800b356:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b35a:	682a      	ldr	r2, [r5, #0]
 800b35c:	686b      	ldr	r3, [r5, #4]
 800b35e:	3201      	adds	r2, #1
 800b360:	602a      	str	r2, [r5, #0]
 800b362:	68a2      	ldr	r2, [r4, #8]
 800b364:	3b01      	subs	r3, #1
 800b366:	3a01      	subs	r2, #1
 800b368:	606b      	str	r3, [r5, #4]
 800b36a:	3701      	adds	r7, #1
 800b36c:	60a2      	str	r2, [r4, #8]
 800b36e:	b142      	cbz	r2, 800b382 <_scanf_chars+0x8e>
 800b370:	2b00      	cmp	r3, #0
 800b372:	dcd7      	bgt.n	800b324 <_scanf_chars+0x30>
 800b374:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b378:	4629      	mov	r1, r5
 800b37a:	4640      	mov	r0, r8
 800b37c:	4798      	blx	r3
 800b37e:	2800      	cmp	r0, #0
 800b380:	d0d0      	beq.n	800b324 <_scanf_chars+0x30>
 800b382:	6823      	ldr	r3, [r4, #0]
 800b384:	f013 0310 	ands.w	r3, r3, #16
 800b388:	d105      	bne.n	800b396 <_scanf_chars+0xa2>
 800b38a:	68e2      	ldr	r2, [r4, #12]
 800b38c:	3201      	adds	r2, #1
 800b38e:	60e2      	str	r2, [r4, #12]
 800b390:	69a2      	ldr	r2, [r4, #24]
 800b392:	b102      	cbz	r2, 800b396 <_scanf_chars+0xa2>
 800b394:	7033      	strb	r3, [r6, #0]
 800b396:	6923      	ldr	r3, [r4, #16]
 800b398:	443b      	add	r3, r7
 800b39a:	6123      	str	r3, [r4, #16]
 800b39c:	2000      	movs	r0, #0
 800b39e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3a2:	bf00      	nop
 800b3a4:	0800c199 	.word	0x0800c199

0800b3a8 <_scanf_i>:
 800b3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3ac:	4698      	mov	r8, r3
 800b3ae:	4b76      	ldr	r3, [pc, #472]	; (800b588 <_scanf_i+0x1e0>)
 800b3b0:	460c      	mov	r4, r1
 800b3b2:	4682      	mov	sl, r0
 800b3b4:	4616      	mov	r6, r2
 800b3b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b3ba:	b087      	sub	sp, #28
 800b3bc:	ab03      	add	r3, sp, #12
 800b3be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b3c2:	4b72      	ldr	r3, [pc, #456]	; (800b58c <_scanf_i+0x1e4>)
 800b3c4:	69a1      	ldr	r1, [r4, #24]
 800b3c6:	4a72      	ldr	r2, [pc, #456]	; (800b590 <_scanf_i+0x1e8>)
 800b3c8:	2903      	cmp	r1, #3
 800b3ca:	bf18      	it	ne
 800b3cc:	461a      	movne	r2, r3
 800b3ce:	68a3      	ldr	r3, [r4, #8]
 800b3d0:	9201      	str	r2, [sp, #4]
 800b3d2:	1e5a      	subs	r2, r3, #1
 800b3d4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b3d8:	bf88      	it	hi
 800b3da:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b3de:	4627      	mov	r7, r4
 800b3e0:	bf82      	ittt	hi
 800b3e2:	eb03 0905 	addhi.w	r9, r3, r5
 800b3e6:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b3ea:	60a3      	strhi	r3, [r4, #8]
 800b3ec:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b3f0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800b3f4:	bf98      	it	ls
 800b3f6:	f04f 0900 	movls.w	r9, #0
 800b3fa:	6023      	str	r3, [r4, #0]
 800b3fc:	463d      	mov	r5, r7
 800b3fe:	f04f 0b00 	mov.w	fp, #0
 800b402:	6831      	ldr	r1, [r6, #0]
 800b404:	ab03      	add	r3, sp, #12
 800b406:	7809      	ldrb	r1, [r1, #0]
 800b408:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b40c:	2202      	movs	r2, #2
 800b40e:	f7f4 fef7 	bl	8000200 <memchr>
 800b412:	b328      	cbz	r0, 800b460 <_scanf_i+0xb8>
 800b414:	f1bb 0f01 	cmp.w	fp, #1
 800b418:	d159      	bne.n	800b4ce <_scanf_i+0x126>
 800b41a:	6862      	ldr	r2, [r4, #4]
 800b41c:	b92a      	cbnz	r2, 800b42a <_scanf_i+0x82>
 800b41e:	6822      	ldr	r2, [r4, #0]
 800b420:	2308      	movs	r3, #8
 800b422:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b426:	6063      	str	r3, [r4, #4]
 800b428:	6022      	str	r2, [r4, #0]
 800b42a:	6822      	ldr	r2, [r4, #0]
 800b42c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800b430:	6022      	str	r2, [r4, #0]
 800b432:	68a2      	ldr	r2, [r4, #8]
 800b434:	1e51      	subs	r1, r2, #1
 800b436:	60a1      	str	r1, [r4, #8]
 800b438:	b192      	cbz	r2, 800b460 <_scanf_i+0xb8>
 800b43a:	6832      	ldr	r2, [r6, #0]
 800b43c:	1c51      	adds	r1, r2, #1
 800b43e:	6031      	str	r1, [r6, #0]
 800b440:	7812      	ldrb	r2, [r2, #0]
 800b442:	f805 2b01 	strb.w	r2, [r5], #1
 800b446:	6872      	ldr	r2, [r6, #4]
 800b448:	3a01      	subs	r2, #1
 800b44a:	2a00      	cmp	r2, #0
 800b44c:	6072      	str	r2, [r6, #4]
 800b44e:	dc07      	bgt.n	800b460 <_scanf_i+0xb8>
 800b450:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800b454:	4631      	mov	r1, r6
 800b456:	4650      	mov	r0, sl
 800b458:	4790      	blx	r2
 800b45a:	2800      	cmp	r0, #0
 800b45c:	f040 8085 	bne.w	800b56a <_scanf_i+0x1c2>
 800b460:	f10b 0b01 	add.w	fp, fp, #1
 800b464:	f1bb 0f03 	cmp.w	fp, #3
 800b468:	d1cb      	bne.n	800b402 <_scanf_i+0x5a>
 800b46a:	6863      	ldr	r3, [r4, #4]
 800b46c:	b90b      	cbnz	r3, 800b472 <_scanf_i+0xca>
 800b46e:	230a      	movs	r3, #10
 800b470:	6063      	str	r3, [r4, #4]
 800b472:	6863      	ldr	r3, [r4, #4]
 800b474:	4947      	ldr	r1, [pc, #284]	; (800b594 <_scanf_i+0x1ec>)
 800b476:	6960      	ldr	r0, [r4, #20]
 800b478:	1ac9      	subs	r1, r1, r3
 800b47a:	f000 f8af 	bl	800b5dc <__sccl>
 800b47e:	f04f 0b00 	mov.w	fp, #0
 800b482:	68a3      	ldr	r3, [r4, #8]
 800b484:	6822      	ldr	r2, [r4, #0]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d03d      	beq.n	800b506 <_scanf_i+0x15e>
 800b48a:	6831      	ldr	r1, [r6, #0]
 800b48c:	6960      	ldr	r0, [r4, #20]
 800b48e:	f891 c000 	ldrb.w	ip, [r1]
 800b492:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b496:	2800      	cmp	r0, #0
 800b498:	d035      	beq.n	800b506 <_scanf_i+0x15e>
 800b49a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800b49e:	d124      	bne.n	800b4ea <_scanf_i+0x142>
 800b4a0:	0510      	lsls	r0, r2, #20
 800b4a2:	d522      	bpl.n	800b4ea <_scanf_i+0x142>
 800b4a4:	f10b 0b01 	add.w	fp, fp, #1
 800b4a8:	f1b9 0f00 	cmp.w	r9, #0
 800b4ac:	d003      	beq.n	800b4b6 <_scanf_i+0x10e>
 800b4ae:	3301      	adds	r3, #1
 800b4b0:	f109 39ff 	add.w	r9, r9, #4294967295
 800b4b4:	60a3      	str	r3, [r4, #8]
 800b4b6:	6873      	ldr	r3, [r6, #4]
 800b4b8:	3b01      	subs	r3, #1
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	6073      	str	r3, [r6, #4]
 800b4be:	dd1b      	ble.n	800b4f8 <_scanf_i+0x150>
 800b4c0:	6833      	ldr	r3, [r6, #0]
 800b4c2:	3301      	adds	r3, #1
 800b4c4:	6033      	str	r3, [r6, #0]
 800b4c6:	68a3      	ldr	r3, [r4, #8]
 800b4c8:	3b01      	subs	r3, #1
 800b4ca:	60a3      	str	r3, [r4, #8]
 800b4cc:	e7d9      	b.n	800b482 <_scanf_i+0xda>
 800b4ce:	f1bb 0f02 	cmp.w	fp, #2
 800b4d2:	d1ae      	bne.n	800b432 <_scanf_i+0x8a>
 800b4d4:	6822      	ldr	r2, [r4, #0]
 800b4d6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800b4da:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b4de:	d1bf      	bne.n	800b460 <_scanf_i+0xb8>
 800b4e0:	2310      	movs	r3, #16
 800b4e2:	6063      	str	r3, [r4, #4]
 800b4e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b4e8:	e7a2      	b.n	800b430 <_scanf_i+0x88>
 800b4ea:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800b4ee:	6022      	str	r2, [r4, #0]
 800b4f0:	780b      	ldrb	r3, [r1, #0]
 800b4f2:	f805 3b01 	strb.w	r3, [r5], #1
 800b4f6:	e7de      	b.n	800b4b6 <_scanf_i+0x10e>
 800b4f8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b4fc:	4631      	mov	r1, r6
 800b4fe:	4650      	mov	r0, sl
 800b500:	4798      	blx	r3
 800b502:	2800      	cmp	r0, #0
 800b504:	d0df      	beq.n	800b4c6 <_scanf_i+0x11e>
 800b506:	6823      	ldr	r3, [r4, #0]
 800b508:	05db      	lsls	r3, r3, #23
 800b50a:	d50d      	bpl.n	800b528 <_scanf_i+0x180>
 800b50c:	42bd      	cmp	r5, r7
 800b50e:	d909      	bls.n	800b524 <_scanf_i+0x17c>
 800b510:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b514:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b518:	4632      	mov	r2, r6
 800b51a:	4650      	mov	r0, sl
 800b51c:	4798      	blx	r3
 800b51e:	f105 39ff 	add.w	r9, r5, #4294967295
 800b522:	464d      	mov	r5, r9
 800b524:	42bd      	cmp	r5, r7
 800b526:	d02d      	beq.n	800b584 <_scanf_i+0x1dc>
 800b528:	6822      	ldr	r2, [r4, #0]
 800b52a:	f012 0210 	ands.w	r2, r2, #16
 800b52e:	d113      	bne.n	800b558 <_scanf_i+0x1b0>
 800b530:	702a      	strb	r2, [r5, #0]
 800b532:	6863      	ldr	r3, [r4, #4]
 800b534:	9e01      	ldr	r6, [sp, #4]
 800b536:	4639      	mov	r1, r7
 800b538:	4650      	mov	r0, sl
 800b53a:	47b0      	blx	r6
 800b53c:	6821      	ldr	r1, [r4, #0]
 800b53e:	f8d8 3000 	ldr.w	r3, [r8]
 800b542:	f011 0f20 	tst.w	r1, #32
 800b546:	d013      	beq.n	800b570 <_scanf_i+0x1c8>
 800b548:	1d1a      	adds	r2, r3, #4
 800b54a:	f8c8 2000 	str.w	r2, [r8]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	6018      	str	r0, [r3, #0]
 800b552:	68e3      	ldr	r3, [r4, #12]
 800b554:	3301      	adds	r3, #1
 800b556:	60e3      	str	r3, [r4, #12]
 800b558:	1bed      	subs	r5, r5, r7
 800b55a:	44ab      	add	fp, r5
 800b55c:	6925      	ldr	r5, [r4, #16]
 800b55e:	445d      	add	r5, fp
 800b560:	6125      	str	r5, [r4, #16]
 800b562:	2000      	movs	r0, #0
 800b564:	b007      	add	sp, #28
 800b566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b56a:	f04f 0b00 	mov.w	fp, #0
 800b56e:	e7ca      	b.n	800b506 <_scanf_i+0x15e>
 800b570:	1d1a      	adds	r2, r3, #4
 800b572:	f8c8 2000 	str.w	r2, [r8]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	f011 0f01 	tst.w	r1, #1
 800b57c:	bf14      	ite	ne
 800b57e:	8018      	strhne	r0, [r3, #0]
 800b580:	6018      	streq	r0, [r3, #0]
 800b582:	e7e6      	b.n	800b552 <_scanf_i+0x1aa>
 800b584:	2001      	movs	r0, #1
 800b586:	e7ed      	b.n	800b564 <_scanf_i+0x1bc>
 800b588:	0800bed4 	.word	0x0800bed4
 800b58c:	0800b731 	.word	0x0800b731
 800b590:	0800a105 	.word	0x0800a105
 800b594:	0800c348 	.word	0x0800c348

0800b598 <_read_r>:
 800b598:	b538      	push	{r3, r4, r5, lr}
 800b59a:	4d07      	ldr	r5, [pc, #28]	; (800b5b8 <_read_r+0x20>)
 800b59c:	4604      	mov	r4, r0
 800b59e:	4608      	mov	r0, r1
 800b5a0:	4611      	mov	r1, r2
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	602a      	str	r2, [r5, #0]
 800b5a6:	461a      	mov	r2, r3
 800b5a8:	f7f6 fea6 	bl	80022f8 <_read>
 800b5ac:	1c43      	adds	r3, r0, #1
 800b5ae:	d102      	bne.n	800b5b6 <_read_r+0x1e>
 800b5b0:	682b      	ldr	r3, [r5, #0]
 800b5b2:	b103      	cbz	r3, 800b5b6 <_read_r+0x1e>
 800b5b4:	6023      	str	r3, [r4, #0]
 800b5b6:	bd38      	pop	{r3, r4, r5, pc}
 800b5b8:	200038bc 	.word	0x200038bc

0800b5bc <_sbrk_r>:
 800b5bc:	b538      	push	{r3, r4, r5, lr}
 800b5be:	4d06      	ldr	r5, [pc, #24]	; (800b5d8 <_sbrk_r+0x1c>)
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	4604      	mov	r4, r0
 800b5c4:	4608      	mov	r0, r1
 800b5c6:	602b      	str	r3, [r5, #0]
 800b5c8:	f7f6 fee8 	bl	800239c <_sbrk>
 800b5cc:	1c43      	adds	r3, r0, #1
 800b5ce:	d102      	bne.n	800b5d6 <_sbrk_r+0x1a>
 800b5d0:	682b      	ldr	r3, [r5, #0]
 800b5d2:	b103      	cbz	r3, 800b5d6 <_sbrk_r+0x1a>
 800b5d4:	6023      	str	r3, [r4, #0]
 800b5d6:	bd38      	pop	{r3, r4, r5, pc}
 800b5d8:	200038bc 	.word	0x200038bc

0800b5dc <__sccl>:
 800b5dc:	b570      	push	{r4, r5, r6, lr}
 800b5de:	780b      	ldrb	r3, [r1, #0]
 800b5e0:	4604      	mov	r4, r0
 800b5e2:	2b5e      	cmp	r3, #94	; 0x5e
 800b5e4:	bf0b      	itete	eq
 800b5e6:	784b      	ldrbeq	r3, [r1, #1]
 800b5e8:	1c48      	addne	r0, r1, #1
 800b5ea:	1c88      	addeq	r0, r1, #2
 800b5ec:	2200      	movne	r2, #0
 800b5ee:	bf08      	it	eq
 800b5f0:	2201      	moveq	r2, #1
 800b5f2:	1e61      	subs	r1, r4, #1
 800b5f4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800b5f8:	f801 2f01 	strb.w	r2, [r1, #1]!
 800b5fc:	42a9      	cmp	r1, r5
 800b5fe:	d1fb      	bne.n	800b5f8 <__sccl+0x1c>
 800b600:	b90b      	cbnz	r3, 800b606 <__sccl+0x2a>
 800b602:	3801      	subs	r0, #1
 800b604:	bd70      	pop	{r4, r5, r6, pc}
 800b606:	f082 0201 	eor.w	r2, r2, #1
 800b60a:	54e2      	strb	r2, [r4, r3]
 800b60c:	4605      	mov	r5, r0
 800b60e:	4628      	mov	r0, r5
 800b610:	f810 1b01 	ldrb.w	r1, [r0], #1
 800b614:	292d      	cmp	r1, #45	; 0x2d
 800b616:	d006      	beq.n	800b626 <__sccl+0x4a>
 800b618:	295d      	cmp	r1, #93	; 0x5d
 800b61a:	d0f3      	beq.n	800b604 <__sccl+0x28>
 800b61c:	b909      	cbnz	r1, 800b622 <__sccl+0x46>
 800b61e:	4628      	mov	r0, r5
 800b620:	e7f0      	b.n	800b604 <__sccl+0x28>
 800b622:	460b      	mov	r3, r1
 800b624:	e7f1      	b.n	800b60a <__sccl+0x2e>
 800b626:	786e      	ldrb	r6, [r5, #1]
 800b628:	2e5d      	cmp	r6, #93	; 0x5d
 800b62a:	d0fa      	beq.n	800b622 <__sccl+0x46>
 800b62c:	42b3      	cmp	r3, r6
 800b62e:	dcf8      	bgt.n	800b622 <__sccl+0x46>
 800b630:	3502      	adds	r5, #2
 800b632:	4619      	mov	r1, r3
 800b634:	3101      	adds	r1, #1
 800b636:	428e      	cmp	r6, r1
 800b638:	5462      	strb	r2, [r4, r1]
 800b63a:	dcfb      	bgt.n	800b634 <__sccl+0x58>
 800b63c:	1af1      	subs	r1, r6, r3
 800b63e:	3901      	subs	r1, #1
 800b640:	1c58      	adds	r0, r3, #1
 800b642:	42b3      	cmp	r3, r6
 800b644:	bfa8      	it	ge
 800b646:	2100      	movge	r1, #0
 800b648:	1843      	adds	r3, r0, r1
 800b64a:	e7e0      	b.n	800b60e <__sccl+0x32>

0800b64c <_strtoul_l.constprop.0>:
 800b64c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b650:	4f36      	ldr	r7, [pc, #216]	; (800b72c <_strtoul_l.constprop.0+0xe0>)
 800b652:	4686      	mov	lr, r0
 800b654:	460d      	mov	r5, r1
 800b656:	4628      	mov	r0, r5
 800b658:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b65c:	5de6      	ldrb	r6, [r4, r7]
 800b65e:	f016 0608 	ands.w	r6, r6, #8
 800b662:	d1f8      	bne.n	800b656 <_strtoul_l.constprop.0+0xa>
 800b664:	2c2d      	cmp	r4, #45	; 0x2d
 800b666:	d12f      	bne.n	800b6c8 <_strtoul_l.constprop.0+0x7c>
 800b668:	782c      	ldrb	r4, [r5, #0]
 800b66a:	2601      	movs	r6, #1
 800b66c:	1c85      	adds	r5, r0, #2
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d057      	beq.n	800b722 <_strtoul_l.constprop.0+0xd6>
 800b672:	2b10      	cmp	r3, #16
 800b674:	d109      	bne.n	800b68a <_strtoul_l.constprop.0+0x3e>
 800b676:	2c30      	cmp	r4, #48	; 0x30
 800b678:	d107      	bne.n	800b68a <_strtoul_l.constprop.0+0x3e>
 800b67a:	7828      	ldrb	r0, [r5, #0]
 800b67c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800b680:	2858      	cmp	r0, #88	; 0x58
 800b682:	d149      	bne.n	800b718 <_strtoul_l.constprop.0+0xcc>
 800b684:	786c      	ldrb	r4, [r5, #1]
 800b686:	2310      	movs	r3, #16
 800b688:	3502      	adds	r5, #2
 800b68a:	f04f 38ff 	mov.w	r8, #4294967295
 800b68e:	2700      	movs	r7, #0
 800b690:	fbb8 f8f3 	udiv	r8, r8, r3
 800b694:	fb03 f908 	mul.w	r9, r3, r8
 800b698:	ea6f 0909 	mvn.w	r9, r9
 800b69c:	4638      	mov	r0, r7
 800b69e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b6a2:	f1bc 0f09 	cmp.w	ip, #9
 800b6a6:	d814      	bhi.n	800b6d2 <_strtoul_l.constprop.0+0x86>
 800b6a8:	4664      	mov	r4, ip
 800b6aa:	42a3      	cmp	r3, r4
 800b6ac:	dd22      	ble.n	800b6f4 <_strtoul_l.constprop.0+0xa8>
 800b6ae:	2f00      	cmp	r7, #0
 800b6b0:	db1d      	blt.n	800b6ee <_strtoul_l.constprop.0+0xa2>
 800b6b2:	4580      	cmp	r8, r0
 800b6b4:	d31b      	bcc.n	800b6ee <_strtoul_l.constprop.0+0xa2>
 800b6b6:	d101      	bne.n	800b6bc <_strtoul_l.constprop.0+0x70>
 800b6b8:	45a1      	cmp	r9, r4
 800b6ba:	db18      	blt.n	800b6ee <_strtoul_l.constprop.0+0xa2>
 800b6bc:	fb00 4003 	mla	r0, r0, r3, r4
 800b6c0:	2701      	movs	r7, #1
 800b6c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b6c6:	e7ea      	b.n	800b69e <_strtoul_l.constprop.0+0x52>
 800b6c8:	2c2b      	cmp	r4, #43	; 0x2b
 800b6ca:	bf04      	itt	eq
 800b6cc:	782c      	ldrbeq	r4, [r5, #0]
 800b6ce:	1c85      	addeq	r5, r0, #2
 800b6d0:	e7cd      	b.n	800b66e <_strtoul_l.constprop.0+0x22>
 800b6d2:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b6d6:	f1bc 0f19 	cmp.w	ip, #25
 800b6da:	d801      	bhi.n	800b6e0 <_strtoul_l.constprop.0+0x94>
 800b6dc:	3c37      	subs	r4, #55	; 0x37
 800b6de:	e7e4      	b.n	800b6aa <_strtoul_l.constprop.0+0x5e>
 800b6e0:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b6e4:	f1bc 0f19 	cmp.w	ip, #25
 800b6e8:	d804      	bhi.n	800b6f4 <_strtoul_l.constprop.0+0xa8>
 800b6ea:	3c57      	subs	r4, #87	; 0x57
 800b6ec:	e7dd      	b.n	800b6aa <_strtoul_l.constprop.0+0x5e>
 800b6ee:	f04f 37ff 	mov.w	r7, #4294967295
 800b6f2:	e7e6      	b.n	800b6c2 <_strtoul_l.constprop.0+0x76>
 800b6f4:	2f00      	cmp	r7, #0
 800b6f6:	da07      	bge.n	800b708 <_strtoul_l.constprop.0+0xbc>
 800b6f8:	2322      	movs	r3, #34	; 0x22
 800b6fa:	f8ce 3000 	str.w	r3, [lr]
 800b6fe:	f04f 30ff 	mov.w	r0, #4294967295
 800b702:	b932      	cbnz	r2, 800b712 <_strtoul_l.constprop.0+0xc6>
 800b704:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b708:	b106      	cbz	r6, 800b70c <_strtoul_l.constprop.0+0xc0>
 800b70a:	4240      	negs	r0, r0
 800b70c:	2a00      	cmp	r2, #0
 800b70e:	d0f9      	beq.n	800b704 <_strtoul_l.constprop.0+0xb8>
 800b710:	b107      	cbz	r7, 800b714 <_strtoul_l.constprop.0+0xc8>
 800b712:	1e69      	subs	r1, r5, #1
 800b714:	6011      	str	r1, [r2, #0]
 800b716:	e7f5      	b.n	800b704 <_strtoul_l.constprop.0+0xb8>
 800b718:	2430      	movs	r4, #48	; 0x30
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d1b5      	bne.n	800b68a <_strtoul_l.constprop.0+0x3e>
 800b71e:	2308      	movs	r3, #8
 800b720:	e7b3      	b.n	800b68a <_strtoul_l.constprop.0+0x3e>
 800b722:	2c30      	cmp	r4, #48	; 0x30
 800b724:	d0a9      	beq.n	800b67a <_strtoul_l.constprop.0+0x2e>
 800b726:	230a      	movs	r3, #10
 800b728:	e7af      	b.n	800b68a <_strtoul_l.constprop.0+0x3e>
 800b72a:	bf00      	nop
 800b72c:	0800c199 	.word	0x0800c199

0800b730 <_strtoul_r>:
 800b730:	f7ff bf8c 	b.w	800b64c <_strtoul_l.constprop.0>

0800b734 <__submore>:
 800b734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b738:	460c      	mov	r4, r1
 800b73a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b73c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b740:	4299      	cmp	r1, r3
 800b742:	d11d      	bne.n	800b780 <__submore+0x4c>
 800b744:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b748:	f7ff f8a0 	bl	800a88c <_malloc_r>
 800b74c:	b918      	cbnz	r0, 800b756 <__submore+0x22>
 800b74e:	f04f 30ff 	mov.w	r0, #4294967295
 800b752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b756:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b75a:	63a3      	str	r3, [r4, #56]	; 0x38
 800b75c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800b760:	6360      	str	r0, [r4, #52]	; 0x34
 800b762:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800b766:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b76a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800b76e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b772:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800b776:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800b77a:	6020      	str	r0, [r4, #0]
 800b77c:	2000      	movs	r0, #0
 800b77e:	e7e8      	b.n	800b752 <__submore+0x1e>
 800b780:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800b782:	0077      	lsls	r7, r6, #1
 800b784:	463a      	mov	r2, r7
 800b786:	f000 f845 	bl	800b814 <_realloc_r>
 800b78a:	4605      	mov	r5, r0
 800b78c:	2800      	cmp	r0, #0
 800b78e:	d0de      	beq.n	800b74e <__submore+0x1a>
 800b790:	eb00 0806 	add.w	r8, r0, r6
 800b794:	4601      	mov	r1, r0
 800b796:	4632      	mov	r2, r6
 800b798:	4640      	mov	r0, r8
 800b79a:	f7fe faa5 	bl	8009ce8 <memcpy>
 800b79e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800b7a2:	f8c4 8000 	str.w	r8, [r4]
 800b7a6:	e7e9      	b.n	800b77c <__submore+0x48>

0800b7a8 <abort>:
 800b7a8:	b508      	push	{r3, lr}
 800b7aa:	2006      	movs	r0, #6
 800b7ac:	f000 f88a 	bl	800b8c4 <raise>
 800b7b0:	2001      	movs	r0, #1
 800b7b2:	f7f6 fd97 	bl	80022e4 <_exit>
	...

0800b7b8 <_fstat_r>:
 800b7b8:	b538      	push	{r3, r4, r5, lr}
 800b7ba:	4d07      	ldr	r5, [pc, #28]	; (800b7d8 <_fstat_r+0x20>)
 800b7bc:	2300      	movs	r3, #0
 800b7be:	4604      	mov	r4, r0
 800b7c0:	4608      	mov	r0, r1
 800b7c2:	4611      	mov	r1, r2
 800b7c4:	602b      	str	r3, [r5, #0]
 800b7c6:	f7f6 fdc0 	bl	800234a <_fstat>
 800b7ca:	1c43      	adds	r3, r0, #1
 800b7cc:	d102      	bne.n	800b7d4 <_fstat_r+0x1c>
 800b7ce:	682b      	ldr	r3, [r5, #0]
 800b7d0:	b103      	cbz	r3, 800b7d4 <_fstat_r+0x1c>
 800b7d2:	6023      	str	r3, [r4, #0]
 800b7d4:	bd38      	pop	{r3, r4, r5, pc}
 800b7d6:	bf00      	nop
 800b7d8:	200038bc 	.word	0x200038bc

0800b7dc <_isatty_r>:
 800b7dc:	b538      	push	{r3, r4, r5, lr}
 800b7de:	4d06      	ldr	r5, [pc, #24]	; (800b7f8 <_isatty_r+0x1c>)
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	4604      	mov	r4, r0
 800b7e4:	4608      	mov	r0, r1
 800b7e6:	602b      	str	r3, [r5, #0]
 800b7e8:	f7f6 fdbf 	bl	800236a <_isatty>
 800b7ec:	1c43      	adds	r3, r0, #1
 800b7ee:	d102      	bne.n	800b7f6 <_isatty_r+0x1a>
 800b7f0:	682b      	ldr	r3, [r5, #0]
 800b7f2:	b103      	cbz	r3, 800b7f6 <_isatty_r+0x1a>
 800b7f4:	6023      	str	r3, [r4, #0]
 800b7f6:	bd38      	pop	{r3, r4, r5, pc}
 800b7f8:	200038bc 	.word	0x200038bc

0800b7fc <__malloc_lock>:
 800b7fc:	4801      	ldr	r0, [pc, #4]	; (800b804 <__malloc_lock+0x8>)
 800b7fe:	f7fe bf57 	b.w	800a6b0 <__retarget_lock_acquire_recursive>
 800b802:	bf00      	nop
 800b804:	200038b0 	.word	0x200038b0

0800b808 <__malloc_unlock>:
 800b808:	4801      	ldr	r0, [pc, #4]	; (800b810 <__malloc_unlock+0x8>)
 800b80a:	f7fe bf52 	b.w	800a6b2 <__retarget_lock_release_recursive>
 800b80e:	bf00      	nop
 800b810:	200038b0 	.word	0x200038b0

0800b814 <_realloc_r>:
 800b814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b818:	4680      	mov	r8, r0
 800b81a:	4614      	mov	r4, r2
 800b81c:	460e      	mov	r6, r1
 800b81e:	b921      	cbnz	r1, 800b82a <_realloc_r+0x16>
 800b820:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b824:	4611      	mov	r1, r2
 800b826:	f7ff b831 	b.w	800a88c <_malloc_r>
 800b82a:	b92a      	cbnz	r2, 800b838 <_realloc_r+0x24>
 800b82c:	f7fe ffc2 	bl	800a7b4 <_free_r>
 800b830:	4625      	mov	r5, r4
 800b832:	4628      	mov	r0, r5
 800b834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b838:	f000 f860 	bl	800b8fc <_malloc_usable_size_r>
 800b83c:	4284      	cmp	r4, r0
 800b83e:	4607      	mov	r7, r0
 800b840:	d802      	bhi.n	800b848 <_realloc_r+0x34>
 800b842:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b846:	d812      	bhi.n	800b86e <_realloc_r+0x5a>
 800b848:	4621      	mov	r1, r4
 800b84a:	4640      	mov	r0, r8
 800b84c:	f7ff f81e 	bl	800a88c <_malloc_r>
 800b850:	4605      	mov	r5, r0
 800b852:	2800      	cmp	r0, #0
 800b854:	d0ed      	beq.n	800b832 <_realloc_r+0x1e>
 800b856:	42bc      	cmp	r4, r7
 800b858:	4622      	mov	r2, r4
 800b85a:	4631      	mov	r1, r6
 800b85c:	bf28      	it	cs
 800b85e:	463a      	movcs	r2, r7
 800b860:	f7fe fa42 	bl	8009ce8 <memcpy>
 800b864:	4631      	mov	r1, r6
 800b866:	4640      	mov	r0, r8
 800b868:	f7fe ffa4 	bl	800a7b4 <_free_r>
 800b86c:	e7e1      	b.n	800b832 <_realloc_r+0x1e>
 800b86e:	4635      	mov	r5, r6
 800b870:	e7df      	b.n	800b832 <_realloc_r+0x1e>

0800b872 <_raise_r>:
 800b872:	291f      	cmp	r1, #31
 800b874:	b538      	push	{r3, r4, r5, lr}
 800b876:	4604      	mov	r4, r0
 800b878:	460d      	mov	r5, r1
 800b87a:	d904      	bls.n	800b886 <_raise_r+0x14>
 800b87c:	2316      	movs	r3, #22
 800b87e:	6003      	str	r3, [r0, #0]
 800b880:	f04f 30ff 	mov.w	r0, #4294967295
 800b884:	bd38      	pop	{r3, r4, r5, pc}
 800b886:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b888:	b112      	cbz	r2, 800b890 <_raise_r+0x1e>
 800b88a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b88e:	b94b      	cbnz	r3, 800b8a4 <_raise_r+0x32>
 800b890:	4620      	mov	r0, r4
 800b892:	f000 f831 	bl	800b8f8 <_getpid_r>
 800b896:	462a      	mov	r2, r5
 800b898:	4601      	mov	r1, r0
 800b89a:	4620      	mov	r0, r4
 800b89c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b8a0:	f000 b818 	b.w	800b8d4 <_kill_r>
 800b8a4:	2b01      	cmp	r3, #1
 800b8a6:	d00a      	beq.n	800b8be <_raise_r+0x4c>
 800b8a8:	1c59      	adds	r1, r3, #1
 800b8aa:	d103      	bne.n	800b8b4 <_raise_r+0x42>
 800b8ac:	2316      	movs	r3, #22
 800b8ae:	6003      	str	r3, [r0, #0]
 800b8b0:	2001      	movs	r0, #1
 800b8b2:	e7e7      	b.n	800b884 <_raise_r+0x12>
 800b8b4:	2400      	movs	r4, #0
 800b8b6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b8ba:	4628      	mov	r0, r5
 800b8bc:	4798      	blx	r3
 800b8be:	2000      	movs	r0, #0
 800b8c0:	e7e0      	b.n	800b884 <_raise_r+0x12>
	...

0800b8c4 <raise>:
 800b8c4:	4b02      	ldr	r3, [pc, #8]	; (800b8d0 <raise+0xc>)
 800b8c6:	4601      	mov	r1, r0
 800b8c8:	6818      	ldr	r0, [r3, #0]
 800b8ca:	f7ff bfd2 	b.w	800b872 <_raise_r>
 800b8ce:	bf00      	nop
 800b8d0:	20000034 	.word	0x20000034

0800b8d4 <_kill_r>:
 800b8d4:	b538      	push	{r3, r4, r5, lr}
 800b8d6:	4d07      	ldr	r5, [pc, #28]	; (800b8f4 <_kill_r+0x20>)
 800b8d8:	2300      	movs	r3, #0
 800b8da:	4604      	mov	r4, r0
 800b8dc:	4608      	mov	r0, r1
 800b8de:	4611      	mov	r1, r2
 800b8e0:	602b      	str	r3, [r5, #0]
 800b8e2:	f7f6 fcef 	bl	80022c4 <_kill>
 800b8e6:	1c43      	adds	r3, r0, #1
 800b8e8:	d102      	bne.n	800b8f0 <_kill_r+0x1c>
 800b8ea:	682b      	ldr	r3, [r5, #0]
 800b8ec:	b103      	cbz	r3, 800b8f0 <_kill_r+0x1c>
 800b8ee:	6023      	str	r3, [r4, #0]
 800b8f0:	bd38      	pop	{r3, r4, r5, pc}
 800b8f2:	bf00      	nop
 800b8f4:	200038bc 	.word	0x200038bc

0800b8f8 <_getpid_r>:
 800b8f8:	f7f6 bcdc 	b.w	80022b4 <_getpid>

0800b8fc <_malloc_usable_size_r>:
 800b8fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b900:	1f18      	subs	r0, r3, #4
 800b902:	2b00      	cmp	r3, #0
 800b904:	bfbc      	itt	lt
 800b906:	580b      	ldrlt	r3, [r1, r0]
 800b908:	18c0      	addlt	r0, r0, r3
 800b90a:	4770      	bx	lr

0800b90c <_init>:
 800b90c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b90e:	bf00      	nop
 800b910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b912:	bc08      	pop	{r3}
 800b914:	469e      	mov	lr, r3
 800b916:	4770      	bx	lr

0800b918 <_fini>:
 800b918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b91a:	bf00      	nop
 800b91c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b91e:	bc08      	pop	{r3}
 800b920:	469e      	mov	lr, r3
 800b922:	4770      	bx	lr
